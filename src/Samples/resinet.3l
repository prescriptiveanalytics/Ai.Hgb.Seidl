import "./baseconfig.3l"

# global config params
string urlExtension = "/v2"
baseurl = baseurl + urlExtension # baseurl defined within baseconfig.3l
basetopic = "resinet/demo" # basetopic declared within baseconfig.3l


# graph-specific definitions
typedef string datetime # type aliasing
struct position { float lat, float lng } # message payload definitions
struct weatherData { float globalRadiation, float airTemperature, float humidity }
struct inverterData { float pvPowerProduced, float powerConsumed, float batterySOC }

# message definition v1
# message forecastRequestV1 { position pos, datetime dt }
# message weatherReportV1 { weatherData rep, topic int zip }

# message definition v2
# message forecastRequestV2 { float lat, float lng, datetime dt }
# message weatherReportV2 { float globalRadiation, float airTemperature, float humidity }
position pos = { lat = 12.7, lng = 42.4 }
message forecastRequest { position pos, datetime dt }
message weatherReport { weatherData rep, topic int zip }

# 
# discussion: enable compatibility of definition v1 vs v2 ?
#

# one-line node definition (implicit type definition and instantiation)
node weatherService1(forecastRequest --> weatherReport) # publishes per zip-topic

# explicit node type definition and instantiation 
nodetype weatherServiceTemplate(forecastRequest --> weatherReport)
node weatherServiceTemplate weatherService2, weatherService3

# explicit node type definition and instantiation with properties
nodetype weatherServiceTemplateWithProps(forecastRequest --> weatherReport) {    
    property string graphColor
    input string command
    output int reportCount       
}
node weatherServiceTemplateWithProps weatherService4


nodetype node inverterModel(weatherReport --> inverterData) {
    property position pos            
}
node inverterModel inverterModel1(weatherReport.zip = 4020, pos = { 13.42, 43.14 }), inverterModel2( ... )


# meta information
# default meta: explicit definition of default = overriding global meta default
meta default {
    property string name
    property string description
}

meta servicesInfo {               
    property string color
}

nodetype weatherServiceTemplateWithMeta(forecastRequest --> weatherReport) {
    include servicesInfo # explicit meta porperty
    property string font # implicit meta property
}
node weatherServiceTemplate weatherService5 { name = "", description = "", color = "#665544", font = "Source Sans Pro" }



# alternatives:

# a1: input and output within parenthesis
node weatherService1 (forecastRequest,... => weatherReport,...) {
    ...
}

# a2: lambda vs arrow symbol --> TODO
node weatherService1 (forecastRequest,... --> weatherReport,...) {
    ...
}

# a3: import vs include for meta properties
nodetype weatherServiceTemplateWithMeta(forecastRequest) => weatherReport {
    include servicesInfo
}

# a4: ; terminator
node weatherService1 (forecastRequest,... => weatherReport,...) {
    ...
};
node weatherService weatherService1, weatherService2;
string x = "foo";

# a5: aliasing with optional format
type datetime : string, "yyyy-MM-dd-hh-mm-ss"
type datetime = string, "yyyy-MM-dd-hh-mm-ss"
type datetime = (string, "yyyy-MM-dd-hh-mm-ss")
typedef string datetime // TODO!



# a6
# type variable signature vs variable siganture -> allow combinations?

# a7
# alternatives within node and nodetype signatures:
# message usage vs implicit message definition and combinations
# topic-keyword inside node/nodetype signature
# node-body definition for node vs nodetype
# type variable signature vs variable siganture - allow combinations?
# ...




# WORK IN PROGRESS:


node logger = 

node weatherService2 = {
    name = "Weather Service Forecast"
    topic = "weather"    
    input = float lat, float lng, string timestamp
    output = weatherService1.output
}

node systemA = {
    name = "System A"
    topic = "system-a"
    input = string id
    output = int pvPeak, int battCapacity 
}

node pvProductionA = {
    topic = "pvprod-a"       
    input = forecastingWeather.arguments, int pvPeak, int battCapacity
}

graph resinet = {  

    weatherService1 -[:forecastingWeather]-> pvProductionA
    weatherService1 -[:forecastingWeather]->
    systemA -> pvProductionA
}


/*
graph r1 = {
    weatherService1 -[:forecastingWeather]->
}
*/

import r1

graph r2 = {
    r1 -> pvProductionA
}





