import "./baseconfig.3l"

# global config params
string urlExtension = "/v2"
baseurl = baseurl + urlExtension
basetopic = "resinet/demo"


# graph definitions:
# ##################

type datetime:string
struct position { float lat, float lng }
struct weatherData { float globalRadiation, float airTemperature, float humidity }
struct inverterData { float pvPowerProduced, float powerConsumed, float batterySOC }

# message definition v1
# message forecastRequestV1 { position pos, datetime dt }
# message weatherReportV1 { weatherData rep, topic int zip }

# message definition v2
# message forecastRequestV2 { float lat, float lng, datetime dt }
# message weatherReportV2 { float globalRadiation, float airTemperature, float humidity }

message forecastRequest { position pos, datetime dt }
message weatherReport { weatherData rep, topic int zip }

# 
# discussion: enable compatibility of definition v1 vs v2 ?
#

# one-line node definition (implicit type definition and instantiation)
node weatherService1(forecastRequest) => weatherReport # publishes per zip-topic

# explicit node type definition and instantiation 
nodetype weatherServiceTemplate(forecastRequest) => weatherReport
node weatherServiceTemplate weatherService2, weatherService3

# explicit node type definition and instantiation with properties
nodetype weatherServiceTemplateProps(forecastRequest) => weatherReport {    
    property string graphColor
    input string command
    output int reportCount       
}
node weatherServiceTemplateProps weatherService4


nodetype node inverterModel(weatherReport) => inverterData {
    property position pos            
}
node inverterModel inverterModel1(weatherReport.zip = 4020, pos = { 13.42, 43.14 }), inverterModel2( ... )


# additional features
# default meta: explicit definition of default = overriding global meta default
meta default {
    property string name
    property string description
}

meta servicesInfo {               
    property string color
}

# explicit
nodetype weatherServiceV2 { 

    import servicesInfo
    property string font # implicit meta property

    input position pos1, pos2
    input positionAndTime pos3
    input { float lat, float lng, datetime timestamp } pos4    

    output forecastingWeather        
}

node weatherServiceV2 weatherService5 { name = "", description = "", color = "#665544" }, weatherService2 # default: name=<weatherService1>, description=<typename>







# WORK IN PROGRESS:


node logger = 

node weatherService2 = {
    name = "Weather Service Forecast"
    topic = "weather"    
    input = float lat, float lng, string timestamp
    output = weatherService1.output
}

node systemA = {
    name = "System A"
    topic = "system-a"
    input = string id
    output = int pvPeak, int battCapacity 
}

node pvProductionA = {
    topic = "pvprod-a"       
    input = forecastingWeather.arguments, int pvPeak, int battCapacity
}

graph resinet = {  

    weatherService1 -[:forecastingWeather]-> pvProductionA
    weatherService1 -[:forecastingWeather]->
    systemA -> pvProductionA
}


/*
graph r1 = {
    weatherService1 -[:forecastingWeather]->
}
*/

import r1

graph r2 = {
    r1 -> pvProductionA
}





