struct LmdParameters { int laserPower, float velocity, float powderFlowRate }
message LmdStatus {int layer, int pos, LmdParameters params }
message Measurement {int pos, float dis }
message Report {int layer, int pos, float dev}
message CorrectionRequest { int layer }
message CorrectionResponse { int layer, int pos, LmdParameters params }

requestresponse Correction(req,res) {
    CorrectionRequest-->CorrectionResponse
}

edgetype Correction {
    request CorrectionRequest 
    response CorrectionResponse
}

nodetype LmdSystem {
    output LmdStatus status
    # output[req:correction] CorrectionRequest creq
    # input[res:correction] Correction cor

    client Correction cor
    # request Correction corr(creq, cor)
    publish LmdStatus status
    
    LmdStatus status()
    CorrectionRequest correction(CorrectionResponse cres)
    CorrectionRequest c2(CorrectionResponse c1)
    
    request correction {
        output CorrectionRequest creq
        input CorrectionResponse cor
    }
    
    property LmdParameters params
}
nodetype Sensor { output Measurement distance }

nodetype DataAnalysisService {
    input LmdStatus status
    input Measurement distance
    output Report rep

    subscribe status(LmdStatus)
    status(LmdStatus)

    server Correction cor

    response correction {
        output CorrectionRequest creq
        input CorrectionResponse cor
    }

    # input[req:foo] CorrectionRequest creq
    # output[res:foo] Correction cor
}
nodetype Monitor {
    input Report rep
    input LmdStatus lmdStatus # optional
 }



 # import "https://<...>/comvesmon_definitions"

 # node instantiation
 node Sensor sen ()
 node DataAnalysisService das ()
 node Monitor mon ()
 node LmdSystem lmd ( LmdParameters={ laserPower=1500, velocity=0.75, powderFlowRate=0.5} )



# node connection
lmd, sen --> das
das --> mon 
lmd =[]=> das












# scope demo

foo {    
    string version = "v1"    

    bar {
        string meaning = "foo beyond all recognition"
    }

    # anonymous scope
    {        
        int answer = 42
    }

    #float answerDivTen = 4.2
    bool no = true
}