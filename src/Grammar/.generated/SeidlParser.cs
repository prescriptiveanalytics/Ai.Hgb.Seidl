//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\P41608\Google Drive\FHHAGENBERG\FE\SPA\Demos\DSL\StructuredEntityInteractionDescriptionLanguage\Grammar\Seidl.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Seidl.Tools {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SeidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, NAME=41, WORD=42, STRING=43, NORMALSTRING=44, CHARSTRING=45, 
		LONGSTRING=46, INTEGER=47, FLOAT=48, WHITESPACE=49, STMEND=50, COMMENT=51, 
		LINECOMMENT=52, SHEBANG=53;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_block = 2, RULE_statement = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_variable = 7, RULE_variablelist = 8, 
		RULE_typedvariablelist = 9, RULE_expressionlist = 10, RULE_expression = 11, 
		RULE_arraydeclaration = 12, RULE_arrayaccess = 13, RULE_fieldaccess = 14, 
		RULE_lefthandside = 15, RULE_importstatement = 16, RULE_functiondefinition = 17, 
		RULE_functionbody = 18, RULE_returnstatement = 19, RULE_functioncall = 20, 
		RULE_recorddefinition = 21, RULE_graphdefinition = 22, RULE_nodedefinition = 23, 
		RULE_edgedefinition = 24, RULE_number = 25, RULE_string = 26, RULE_functiontype = 27, 
		RULE_recordtype = 28, RULE_graphtype = 29, RULE_nodetype = 30, RULE_edgetype = 31, 
		RULE_terminator = 32;
	public static readonly string[] ruleNames = {
		"root", "set", "block", "statement", "type", "atomictype", "complextype", 
		"variable", "variablelist", "typedvariablelist", "expressionlist", "expression", 
		"arraydeclaration", "arrayaccess", "fieldaccess", "lefthandside", "importstatement", 
		"functiondefinition", "functionbody", "returnstatement", "functioncall", 
		"recorddefinition", "graphdefinition", "nodedefinition", "edgedefinition", 
		"number", "string", "functiontype", "recordtype", "graphtype", "nodetype", 
		"edgetype", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'='", "'[]'", "'int'", "'float'", "'string'", "'bool'", 
		"'graph'", "'node'", "'edge'", "'record'", "'function'", "','", "'null'", 
		"'false'", "'true'", "'['", "']'", "'.'", "'import'", "'('", "')'", "'if'", 
		"'else if'", "'else'", "'while'", "'for'", "'in'", "'return'", "'name'", 
		"'nodes'", "'->'", "'input'", "'output'", "'-['", "']->'", "'from'", "'to'", 
		"'arguments'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NAME", "WORD", "STRING", "NORMALSTRING", 
		"CHARSTRING", "LONGSTRING", "INTEGER", "FLOAT", "WHITESPACE", "STMEND", 
		"COMMENT", "LINECOMMENT", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Seidl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SeidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			set();
			State = 67;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				{
				State = 69;
				statement();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__0);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				{
				State = 76;
				statement();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GraphdefinitionContext graphdefinition() {
			return GetRuleContext<GraphdefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgedefinitionContext edgedefinition() {
			return GetRuleContext<EdgedefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecorddefinitionContext recorddefinition() {
			return GetRuleContext<RecorddefinitionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				terminator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				type();
				State = 87;
				variablelist();
				State = 88;
				terminator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				variablelist();
				State = 91;
				Match(T__2);
				State = 92;
				expressionlist();
				State = 93;
				terminator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95;
				type();
				State = 96;
				variablelist();
				State = 97;
				Match(T__2);
				State = 98;
				expressionlist();
				State = 99;
				terminator();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 101;
				graphdefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 102;
				nodedefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 103;
				edgedefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 104;
				recorddefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				atomictype();
				State = 110;
				Match(T__3);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				complextype();
				State = 113;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 16, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			variable();
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 124;
				Match(T__13);
				State = 125;
				variable();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 18, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			type();
			State = 132;
			variable();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 133;
				Match(T__13);
				State = 134;
				type();
				State = 135;
				variable();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			expression();
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 143;
					Match(T__13);
					State = 144;
					expression();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				Match(T__14);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				Match(T__15);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				Match(T__16);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153;
				number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 154;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 155;
				variable();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 156;
				block();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 157;
				functiondefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 158;
				functioncall();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 159;
				importstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			type();
			State = 163;
			Match(T__3);
			State = 164;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 26, RULE_arrayaccess);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				variable();
				State = 167;
				Match(T__17);
				State = 168;
				expression();
				State = 169;
				Match(T__18);
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				@string();
				State = 172;
				Match(T__17);
				State = 173;
				expression();
				State = 174;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 28, RULE_fieldaccess);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				variable();
				State = 179;
				Match(T__19);
				State = 180;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				arrayaccess();
				State = 183;
				Match(T__19);
				State = 184;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 30, RULE_lefthandside);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SeidlParser.STRING, 0); }
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_importstatement);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(T__20);
				State = 194;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(T__20);
				State = 196;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctiontypeContext functiontype() {
			return GetRuleContext<FunctiontypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext[] typedvariablelist() {
			return GetRuleContexts<TypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext typedvariablelist(int i) {
			return GetRuleContext<TypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			functiontype();
			State = 200;
			variable();
			State = 201;
			Match(T__2);
			State = 202;
			Match(T__21);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
				{
				State = 203;
				typedvariablelist();
				}
			}

			State = 206;
			Match(T__22);
			State = 207;
			Match(T__21);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
				{
				State = 208;
				typedvariablelist();
				}
			}

			State = 211;
			Match(T__22);
			State = 212;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(T__0);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__23) | (1L << T__26) | (1L << T__27) | (1L << T__29) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				State = 261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 215;
					statement();
					}
					break;
				case 2:
					{
					State = 216;
					Match(T__23);
					State = 217;
					expression();
					State = 218;
					block();
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__24) {
						{
						{
						State = 219;
						Match(T__24);
						State = 220;
						expression();
						State = 221;
						block();
						}
						}
						State = 227;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__25) {
						{
						State = 228;
						Match(T__25);
						State = 229;
						block();
						}
					}

					}
					break;
				case 3:
					{
					State = 232;
					Match(T__26);
					State = 233;
					expression();
					State = 234;
					block();
					}
					break;
				case 4:
					{
					State = 236;
					Match(T__27);
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
						{
						State = 237;
						type();
						}
					}

					State = 240;
					variablelist();
					State = 241;
					Match(T__2);
					State = 242;
					expressionlist();
					State = 243;
					Match(T__13);
					State = 244;
					expression();
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__13) {
						{
						State = 245;
						Match(T__13);
						State = 246;
						expression();
						}
					}

					State = 249;
					block();
					}
					break;
				case 5:
					{
					State = 251;
					Match(T__27);
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
						{
						State = 252;
						type();
						}
					}

					State = 255;
					variable();
					State = 256;
					Match(T__28);
					State = 257;
					variable();
					State = 258;
					block();
					}
					break;
				case 6:
					{
					State = 260;
					returnstatement();
					}
					break;
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 266;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__29);
			State = 270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 269;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 40, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			variable();
			State = 273;
			Match(T__21);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 274;
				variablelist();
				}
			}

			State = 277;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecorddefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordtypeContext recordtype() {
			return GetRuleContext<RecordtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public RecorddefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recorddefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecorddefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecorddefinitionContext recorddefinition() {
		RecorddefinitionContext _localctx = new RecorddefinitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_recorddefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			recordtype();
			State = 280;
			variable();
			State = 281;
			Match(T__2);
			State = 282;
			Match(T__0);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
				{
				{
				State = 283;
				type();
				State = 284;
				variable();
				State = 285;
				terminator();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 292;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GraphtypeContext graphtype() {
			return GetRuleContext<GraphtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SeidlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SeidlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		public GraphdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphdefinitionContext graphdefinition() {
		GraphdefinitionContext _localctx = new GraphdefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_graphdefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			graphtype();
			State = 295;
			variable();
			State = 296;
			Match(T__2);
			State = 297;
			Match(T__0);
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__31) | (1L << NAME))) != 0)) {
				{
				State = 314;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 298;
					Match(T__30);
					State = 299;
					Match(T__2);
					State = 300;
					Match(NAME);
					State = 301;
					terminator();
					}
					break;
				case T__31:
					{
					State = 302;
					Match(T__31);
					State = 303;
					Match(T__2);
					State = 304;
					Match(T__17);
					State = 306;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NAME) {
						{
						State = 305;
						variablelist();
						}
					}

					State = 308;
					Match(T__18);
					State = 309;
					terminator();
					}
					break;
				case NAME:
					{
					State = 310;
					variablelist();
					State = 311;
					Match(T__32);
					State = 312;
					variablelist();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 319;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypeContext nodetype() {
			return GetRuleContext<NodetypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SeidlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SeidlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext[] typedvariablelist() {
			return GetRuleContexts<TypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext typedvariablelist(int i) {
			return GetRuleContext<TypedvariablelistContext>(i);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_nodedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			nodetype();
			State = 322;
			variable();
			State = 323;
			Match(T__2);
			State = 324;
			Match(T__0);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__33) | (1L << T__34))) != 0)) {
				{
				State = 345;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 325;
					Match(T__30);
					State = 326;
					Match(T__2);
					State = 327;
					Match(NAME);
					State = 328;
					terminator();
					}
					break;
				case T__33:
					{
					State = 329;
					Match(T__33);
					State = 330;
					Match(T__2);
					State = 331;
					Match(T__17);
					State = 333;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
						{
						State = 332;
						typedvariablelist();
						}
					}

					State = 335;
					Match(T__18);
					State = 336;
					terminator();
					}
					break;
				case T__34:
					{
					State = 337;
					Match(T__34);
					State = 338;
					Match(T__2);
					State = 339;
					Match(T__17);
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
						{
						State = 340;
						typedvariablelist();
						}
					}

					State = 343;
					Match(T__18);
					State = 344;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 350;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypeContext edgetype() {
			return GetRuleContext<EdgetypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext[] typedvariablelist() {
			return GetRuleContexts<TypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext typedvariablelist(int i) {
			return GetRuleContext<TypedvariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SeidlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SeidlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public EdgedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgedefinitionContext edgedefinition() {
		EdgedefinitionContext _localctx = new EdgedefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_edgedefinition);
		int _la;
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				edgetype();
				State = 353;
				variable();
				State = 354;
				Match(T__2);
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 355;
					variablelist();
					}
				}

				State = 358;
				Match(T__35);
				State = 359;
				typedvariablelist();
				State = 360;
				Match(T__36);
				State = 362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 361;
					variablelist();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				edgetype();
				State = 365;
				variable();
				State = 366;
				Match(T__2);
				State = 367;
				Match(T__0);
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) {
					{
					State = 395;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__30:
						{
						State = 368;
						Match(T__30);
						State = 369;
						Match(T__2);
						State = 370;
						Match(NAME);
						State = 371;
						terminator();
						}
						break;
					case T__37:
						{
						State = 372;
						Match(T__37);
						State = 373;
						Match(T__2);
						State = 374;
						Match(T__17);
						State = 376;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NAME) {
							{
							State = 375;
							variablelist();
							}
						}

						State = 378;
						Match(T__18);
						State = 379;
						terminator();
						}
						break;
					case T__38:
						{
						State = 380;
						Match(T__38);
						State = 381;
						Match(T__2);
						State = 382;
						Match(T__17);
						State = 384;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NAME) {
							{
							State = 383;
							variablelist();
							}
						}

						State = 386;
						Match(T__18);
						State = 387;
						terminator();
						}
						break;
					case T__39:
						{
						State = 388;
						Match(T__39);
						State = 389;
						Match(T__2);
						State = 390;
						Match(T__17);
						State = 391;
						typedvariablelist();
						State = 392;
						Match(T__18);
						State = 393;
						terminator();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 400;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SeidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SeidlParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 50, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(SeidlParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(SeidlParser.CHARSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(SeidlParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 52, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontypeContext : ParserRuleContext {
		public FunctiontypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiontype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiontypeContext functiontype() {
		FunctiontypeContext _localctx = new FunctiontypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_functiontype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordtypeContext : ParserRuleContext {
		public RecordtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordtypeContext recordtype() {
		RecordtypeContext _localctx = new RecordtypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_recordtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_graphtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypeContext : ParserRuleContext {
		public NodetypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypeContext nodetype() {
		NodetypeContext _localctx = new NodetypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_nodetype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypeContext : ParserRuleContext {
		public EdgetypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypeContext edgetype() {
		EdgetypeContext _localctx = new EdgetypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_edgetype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SeidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlVisitor<TResult> typedVisitor = visitor as ISeidlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x1A7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 'I', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'L', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'P', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'S', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'l', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'v', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x81', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x84', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x8C', '\n', '\v', '\f', '\v', '\xE', '\v', '\x8F', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x94', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\x97', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA3', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xB3', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xBD', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xC2', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xC8', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xCF', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\xD4', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xE2', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xE5', '\v', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xE9', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xF1', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xFA', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x100', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', 
		'\x14', '\x108', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x10B', '\v', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x111', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x116', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x122', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\x125', '\v', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x135', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x13D', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x140', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x150', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x158', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x15C', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x15F', '\v', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x167', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x16D', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x17B', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x183', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x18E', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x191', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x195', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x2', '\x2', '#', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x2', '\x6', '\x3', '\x2', '\a', '\n', '\x3', '\x2', '\v', '\xF', 
		'\x3', '\x2', '\x31', '\x32', '\x3', '\x2', '.', '\x30', '\x2', '\x1C5', 
		'\x2', '\x44', '\x3', '\x2', '\x2', '\x2', '\x4', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'M', '\x3', '\x2', '\x2', '\x2', '\b', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'u', '\x3', '\x2', '\x2', '\x2', '\f', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'y', '\x3', '\x2', '\x2', '\x2', '\x10', '{', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '}', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x16', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xB2', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', ' ', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xC7', '\x3', '\x2', '\x2', '\x2', '$', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD8', '\x3', '\x2', '\x2', '\x2', '(', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x112', '\x3', '\x2', '\x2', '\x2', ',', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x143', '\x3', '\x2', '\x2', '\x2', '\x32', '\x194', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x196', '\x3', '\x2', '\x2', '\x2', '\x36', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		':', '\x19C', '\x3', '\x2', '\x2', '\x2', '<', '\x19E', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1A0', '\x3', '\x2', '\x2', '\x2', '@', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\x4', '\x3', '\x2', '\x45', '\x46', '\a', '\x2', 
		'\x2', '\x3', '\x46', '\x3', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x5', 
		'\b', '\x5', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'K', '\x5', '\x3', '\x2', '\x2', '\x2', 'L', 'J', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'Q', '\a', '\x3', '\x2', '\x2', 'N', 
		'P', '\x5', '\b', '\x5', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x4', '\x2', '\x2', 
		'U', '\a', '\x3', '\x2', '\x2', '\x2', 'V', 'l', '\x5', '\x42', '\"', 
		'\x2', 'W', 'l', '\x5', '\x6', '\x4', '\x2', 'X', 'Y', '\x5', '\n', '\x6', 
		'\x2', 'Y', 'Z', '\x5', '\x12', '\n', '\x2', 'Z', '[', '\x5', '\x42', 
		'\"', '\x2', '[', 'l', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', '\x12', 
		'\n', '\x2', ']', '^', '\a', '\x5', '\x2', '\x2', '^', '_', '\x5', '\x16', 
		'\f', '\x2', '_', '`', '\x5', '\x42', '\"', '\x2', '`', 'l', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x5', '\n', '\x6', '\x2', '\x62', '\x63', 
		'\x5', '\x12', '\n', '\x2', '\x63', '\x64', '\a', '\x5', '\x2', '\x2', 
		'\x64', '\x65', '\x5', '\x16', '\f', '\x2', '\x65', '\x66', '\x5', '\x42', 
		'\"', '\x2', '\x66', 'l', '\x3', '\x2', '\x2', '\x2', 'g', 'l', '\x5', 
		'.', '\x18', '\x2', 'h', 'l', '\x5', '\x30', '\x19', '\x2', 'i', 'l', 
		'\x5', '\x32', '\x1A', '\x2', 'j', 'l', '\x5', ',', '\x17', '\x2', 'k', 
		'V', '\x3', '\x2', '\x2', '\x2', 'k', 'W', '\x3', '\x2', '\x2', '\x2', 
		'k', 'X', '\x3', '\x2', '\x2', '\x2', 'k', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\x61', '\x3', '\x2', '\x2', '\x2', 'k', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'v', '\x5', '\f', '\a', '\x2', 'n', 'v', '\x5', 
		'\xE', '\b', '\x2', 'o', 'p', '\x5', '\f', '\a', '\x2', 'p', 'q', '\a', 
		'\x6', '\x2', '\x2', 'q', 'v', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', 
		'\xE', '\b', '\x2', 's', 't', '\a', '\x6', '\x2', '\x2', 't', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'm', '\x3', '\x2', '\x2', '\x2', 'u', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'o', '\x3', '\x2', '\x2', '\x2', 'u', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'v', '\v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', 
		'\t', '\x2', '\x2', '\x2', 'x', '\r', '\x3', '\x2', '\x2', '\x2', 'y', 
		'z', '\t', '\x3', '\x2', '\x2', 'z', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', '+', '\x2', '\x2', '|', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x82', '\x5', '\x10', '\t', '\x2', '~', '\x7F', '\a', '\x10', '\x2', 
		'\x2', '\x7F', '\x81', '\x5', '\x10', '\t', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x13', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x5', '\n', '\x6', '\x2', '\x86', 
		'\x8D', '\x5', '\x10', '\t', '\x2', '\x87', '\x88', '\a', '\x10', '\x2', 
		'\x2', '\x88', '\x89', '\x5', '\n', '\x6', '\x2', '\x89', '\x8A', '\x5', 
		'\x10', '\t', '\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x95', '\x5', '\x18', '\r', 
		'\x2', '\x91', '\x92', '\a', '\x10', '\x2', '\x2', '\x92', '\x94', '\x5', 
		'\x18', '\r', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\xA3', '\a', '\x11', '\x2', '\x2', '\x99', '\xA3', '\a', '\x12', '\x2', 
		'\x2', '\x9A', '\xA3', '\a', '\x13', '\x2', '\x2', '\x9B', '\xA3', '\x5', 
		'\x34', '\x1B', '\x2', '\x9C', '\xA3', '\x5', '\x36', '\x1C', '\x2', '\x9D', 
		'\xA3', '\x5', '\x10', '\t', '\x2', '\x9E', '\xA3', '\x5', '\x6', '\x4', 
		'\x2', '\x9F', '\xA3', '\x5', '$', '\x13', '\x2', '\xA0', '\xA3', '\x5', 
		'*', '\x16', '\x2', '\xA1', '\xA3', '\x5', '\"', '\x12', '\x2', '\xA2', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\n', '\x6', 
		'\x2', '\xA5', '\xA6', '\a', '\x6', '\x2', '\x2', '\xA6', '\xA7', '\x5', 
		'\x10', '\t', '\x2', '\xA7', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x5', '\x10', '\t', '\x2', '\xA9', '\xAA', '\a', '\x14', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '\x18', '\r', '\x2', '\xAB', '\xAC', '\a', 
		'\x15', '\x2', '\x2', '\xAC', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x5', '\x36', '\x1C', '\x2', '\xAE', '\xAF', '\a', '\x14', '\x2', 
		'\x2', '\xAF', '\xB0', '\x5', '\x18', '\r', '\x2', '\xB0', '\xB1', '\a', 
		'\x15', '\x2', '\x2', '\xB1', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', 
		'\x10', '\t', '\x2', '\xB5', '\xB6', '\a', '\x16', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', ' ', '\x11', '\x2', '\xB7', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x5', '\x1C', '\xF', '\x2', '\xB9', '\xBA', '\a', 
		'\x16', '\x2', '\x2', '\xBA', '\xBB', '\x5', ' ', '\x11', '\x2', '\xBB', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBD', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC2', '\x5', '\x10', '\t', '\x2', '\xBF', 
		'\xC2', '\x5', '\x1E', '\x10', '\x2', '\xC0', '\xC2', '\x5', '\x1C', '\xF', 
		'\x2', '\xC1', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x17', '\x2', 
		'\x2', '\xC4', '\xC8', '\x5', '\x10', '\t', '\x2', '\xC5', '\xC6', '\a', 
		'\x17', '\x2', '\x2', '\xC6', '\xC8', '\a', '-', '\x2', '\x2', '\xC7', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '#', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x5', 
		'\x38', '\x1D', '\x2', '\xCA', '\xCB', '\x5', '\x10', '\t', '\x2', '\xCB', 
		'\xCC', '\a', '\x5', '\x2', '\x2', '\xCC', '\xCE', '\a', '\x18', '\x2', 
		'\x2', '\xCD', '\xCF', '\x5', '\x14', '\v', '\x2', '\xCE', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x19', '\x2', 
		'\x2', '\xD1', '\xD3', '\a', '\x18', '\x2', '\x2', '\xD2', '\xD4', '\x5', 
		'\x14', '\v', '\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\a', '\x19', '\x2', '\x2', '\xD6', '\xD7', '\x5', 
		'&', '\x14', '\x2', '\xD7', '%', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x109', 
		'\a', '\x3', '\x2', '\x2', '\xD9', '\x108', '\x5', '\b', '\x5', '\x2', 
		'\xDA', '\xDB', '\a', '\x1A', '\x2', '\x2', '\xDB', '\xDC', '\x5', '\x18', 
		'\r', '\x2', '\xDC', '\xE3', '\x5', '\x6', '\x4', '\x2', '\xDD', '\xDE', 
		'\a', '\x1B', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x18', '\r', '\x2', 
		'\xDF', '\xE0', '\x5', '\x6', '\x4', '\x2', '\xE0', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', 
		'\a', '\x1C', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x6', '\x4', '\x2', 
		'\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\x108', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\a', '\x1D', '\x2', '\x2', '\xEB', '\xEC', '\x5', '\x18', '\r', '\x2', 
		'\xEC', '\xED', '\x5', '\x6', '\x4', '\x2', '\xED', '\x108', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xF0', '\a', '\x1E', '\x2', '\x2', '\xEF', '\xF1', 
		'\x5', '\n', '\x6', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF3', '\x5', '\x12', '\n', '\x2', '\xF3', '\xF4', 
		'\a', '\x5', '\x2', '\x2', '\xF4', '\xF5', '\x5', '\x16', '\f', '\x2', 
		'\xF5', '\xF6', '\a', '\x10', '\x2', '\x2', '\xF6', '\xF9', '\x5', '\x18', 
		'\r', '\x2', '\xF7', '\xF8', '\a', '\x10', '\x2', '\x2', '\xF8', '\xFA', 
		'\x5', '\x18', '\r', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\x5', '\x6', '\x4', '\x2', '\xFC', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\a', '\x1E', '\x2', '\x2', 
		'\xFE', '\x100', '\x5', '\n', '\x6', '\x2', '\xFF', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x5', '\x10', '\t', '\x2', 
		'\x102', '\x103', '\a', '\x1F', '\x2', '\x2', '\x103', '\x104', '\x5', 
		'\x10', '\t', '\x2', '\x104', '\x105', '\x5', '\x6', '\x4', '\x2', '\x105', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x106', '\x108', '\x5', '(', '\x15', 
		'\x2', '\x107', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x107', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\x107', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\a', '\x4', '\x2', '\x2', '\x10D', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x110', '\a', ' ', '\x2', '\x2', '\x10F', '\x111', '\x5', 
		'\x12', '\n', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x111', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\x5', '\x10', '\t', '\x2', '\x113', '\x115', 
		'\a', '\x18', '\x2', '\x2', '\x114', '\x116', '\x5', '\x12', '\n', '\x2', 
		'\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\a', '\x19', '\x2', '\x2', '\x118', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\x5', ':', '\x1E', '\x2', '\x11A', '\x11B', 
		'\x5', '\x10', '\t', '\x2', '\x11B', '\x11C', '\a', '\x5', '\x2', '\x2', 
		'\x11C', '\x123', '\a', '\x3', '\x2', '\x2', '\x11D', '\x11E', '\x5', 
		'\n', '\x6', '\x2', '\x11E', '\x11F', '\x5', '\x10', '\t', '\x2', '\x11F', 
		'\x120', '\x5', '\x42', '\"', '\x2', '\x120', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x122', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\a', '\x4', '\x2', '\x2', '\x127', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x129', '\x5', '<', '\x1F', '\x2', '\x129', '\x12A', 
		'\x5', '\x10', '\t', '\x2', '\x12A', '\x12B', '\a', '\x5', '\x2', '\x2', 
		'\x12B', '\x13E', '\a', '\x3', '\x2', '\x2', '\x12C', '\x12D', '\a', '!', 
		'\x2', '\x2', '\x12D', '\x12E', '\a', '\x5', '\x2', '\x2', '\x12E', '\x12F', 
		'\a', '+', '\x2', '\x2', '\x12F', '\x13D', '\x5', '\x42', '\"', '\x2', 
		'\x130', '\x131', '\a', '\"', '\x2', '\x2', '\x131', '\x132', '\a', '\x5', 
		'\x2', '\x2', '\x132', '\x134', '\a', '\x14', '\x2', '\x2', '\x133', '\x135', 
		'\x5', '\x12', '\n', '\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\a', '\x15', '\x2', '\x2', '\x137', 
		'\x13D', '\x5', '\x42', '\"', '\x2', '\x138', '\x139', '\x5', '\x12', 
		'\n', '\x2', '\x139', '\x13A', '\a', '#', '\x2', '\x2', '\x13A', '\x13B', 
		'\x5', '\x12', '\n', '\x2', '\x13B', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x142', '\a', '\x4', '\x2', '\x2', '\x142', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x143', '\x144', '\x5', '>', ' ', '\x2', '\x144', '\x145', 
		'\x5', '\x10', '\t', '\x2', '\x145', '\x146', '\a', '\x5', '\x2', '\x2', 
		'\x146', '\x15D', '\a', '\x3', '\x2', '\x2', '\x147', '\x148', '\a', '!', 
		'\x2', '\x2', '\x148', '\x149', '\a', '\x5', '\x2', '\x2', '\x149', '\x14A', 
		'\a', '+', '\x2', '\x2', '\x14A', '\x15C', '\x5', '\x42', '\"', '\x2', 
		'\x14B', '\x14C', '\a', '$', '\x2', '\x2', '\x14C', '\x14D', '\a', '\x5', 
		'\x2', '\x2', '\x14D', '\x14F', '\a', '\x14', '\x2', '\x2', '\x14E', '\x150', 
		'\x5', '\x14', '\v', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\a', '\x15', '\x2', '\x2', '\x152', 
		'\x15C', '\x5', '\x42', '\"', '\x2', '\x153', '\x154', '\a', '%', '\x2', 
		'\x2', '\x154', '\x155', '\a', '\x5', '\x2', '\x2', '\x155', '\x157', 
		'\a', '\x14', '\x2', '\x2', '\x156', '\x158', '\x5', '\x14', '\v', '\x2', 
		'\x157', '\x156', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\a', '\x15', '\x2', '\x2', '\x15A', '\x15C', '\x5', '\x42', 
		'\"', '\x2', '\x15B', '\x147', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\a', '\x4', '\x2', '\x2', '\x161', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x163', '\x5', '@', '!', '\x2', '\x163', 
		'\x164', '\x5', '\x10', '\t', '\x2', '\x164', '\x166', '\a', '\x5', '\x2', 
		'\x2', '\x165', '\x167', '\x5', '\x12', '\n', '\x2', '\x166', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\a', 
		'&', '\x2', '\x2', '\x169', '\x16A', '\x5', '\x14', '\v', '\x2', '\x16A', 
		'\x16C', '\a', '\'', '\x2', '\x2', '\x16B', '\x16D', '\x5', '\x12', '\n', 
		'\x2', '\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\x5', '@', '!', '\x2', '\x16F', '\x170', '\x5', '\x10', 
		'\t', '\x2', '\x170', '\x171', '\a', '\x5', '\x2', '\x2', '\x171', '\x18F', 
		'\a', '\x3', '\x2', '\x2', '\x172', '\x173', '\a', '!', '\x2', '\x2', 
		'\x173', '\x174', '\a', '\x5', '\x2', '\x2', '\x174', '\x175', '\a', '+', 
		'\x2', '\x2', '\x175', '\x18E', '\x5', '\x42', '\"', '\x2', '\x176', '\x177', 
		'\a', '(', '\x2', '\x2', '\x177', '\x178', '\a', '\x5', '\x2', '\x2', 
		'\x178', '\x17A', '\a', '\x14', '\x2', '\x2', '\x179', '\x17B', '\x5', 
		'\x12', '\n', '\x2', '\x17A', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x17D', '\a', '\x15', '\x2', '\x2', '\x17D', '\x18E', 
		'\x5', '\x42', '\"', '\x2', '\x17E', '\x17F', '\a', ')', '\x2', '\x2', 
		'\x17F', '\x180', '\a', '\x5', '\x2', '\x2', '\x180', '\x182', '\a', '\x14', 
		'\x2', '\x2', '\x181', '\x183', '\x5', '\x12', '\n', '\x2', '\x182', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\a', 
		'\x15', '\x2', '\x2', '\x185', '\x18E', '\x5', '\x42', '\"', '\x2', '\x186', 
		'\x187', '\a', '*', '\x2', '\x2', '\x187', '\x188', '\a', '\x5', '\x2', 
		'\x2', '\x188', '\x189', '\a', '\x14', '\x2', '\x2', '\x189', '\x18A', 
		'\x5', '\x14', '\v', '\x2', '\x18A', '\x18B', '\a', '\x15', '\x2', '\x2', 
		'\x18B', '\x18C', '\x5', '\x42', '\"', '\x2', '\x18C', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x172', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x186', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', '\x192', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x193', '\a', '\x4', '\x2', '\x2', '\x193', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x162', '\x3', '\x2', '\x2', '\x2', '\x194', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x197', '\t', '\x4', '\x2', '\x2', '\x197', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x199', '\t', '\x5', '\x2', '\x2', '\x199', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\xF', '\x2', '\x2', 
		'\x19B', '\x39', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\a', '\xE', 
		'\x2', '\x2', '\x19D', ';', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', 
		'\a', '\v', '\x2', '\x2', '\x19F', '=', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\a', '\f', '\x2', '\x2', '\x1A1', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A3', '\a', '\r', '\x2', '\x2', '\x1A3', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', '\x34', '\x2', '\x2', '\x1A5', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '(', 'J', 'Q', 'k', 'u', '\x82', '\x8D', 
		'\x95', '\xA2', '\xB2', '\xBC', '\xC1', '\xC7', '\xCE', '\xD3', '\xE3', 
		'\xE8', '\xF0', '\xF9', '\xFF', '\x107', '\x109', '\x110', '\x115', '\x123', 
		'\x134', '\x13C', '\x13E', '\x14F', '\x157', '\x15B', '\x15D', '\x166', 
		'\x16C', '\x17A', '\x182', '\x18D', '\x18F', '\x194',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Seidl.Tools
