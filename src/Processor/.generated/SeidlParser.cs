//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/workspaces/spa/Ai.Hgb.Seidl/src/Grammar/SeidlParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ai.Hgb.Seidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SeidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARRAY=1, STRING=2, INT=3, FLOAT=4, BOOL=5, STRUCT=6, MESSAGE=7, EDGETYPE=8, 
		NODETYPE=9, NODE=10, SURROGATE=11, META=12, FUNCTION=13, TYPEDEF=14, IMPORT=15, 
		INCLUDE=16, PROPERTY=17, TOPIC=18, INPUT=19, OUTPUT=20, CLIENT=21, SERVER=22, 
		PUBLISH=23, SUBSCRIBE=24, REQUEST=25, RESPONSE=26, PUB=27, SUB=28, REQ=29, 
		RES=30, AUX=31, NULL=32, TRUE=33, FALSE=34, IF=35, ELSE=36, ELSEIF=37, 
		FOR=38, IN=39, WHILE=40, RETURN=41, AS=42, IMITATES=43, WITH=44, LATEST=45, 
		NAMEDEF=46, TAGDEF=47, DOT=48, STAR=49, COMMA=50, COLON=51, SEMI_COLON=52, 
		ASSIGN=53, ADD=54, MINUS=55, DIV=56, ARROW=57, HEAVYARROW=58, QUERYARROW_BEGIN=59, 
		QUERYARROW_END=60, QUERYHARROW_BEGIN=61, QUERYHARROW_END=62, EQUAL=63, 
		UNEQUAL=64, GREATERTHAN=65, GREATEREQUALTHAN=66, LESSTHAN=67, LESSEQUALTHAN=68, 
		AND=69, OR=70, OPEN_PAREN=71, CLOSE_PAREN=72, OPEN_BRACE=73, CLOSE_BRACE=74, 
		OPEN_BRACKET=75, CLOSE_BRACKET=76, NAME=77, WORD=78, STRINGLITERAL=79, 
		NORMALSTRING=80, CHARSTRING=81, LONGSTRING=82, INTEGER=83, FLOATINGPOINTNUMBER=84, 
		WHITESPACE=85, STMEND=86, COMMENT=87, LINECOMMENT=88, SHEBANG=89;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_atomictypeortypename = 7, 
		RULE_graphtype = 8, RULE_variable = 9, RULE_typename = 10, RULE_field = 11, 
		RULE_fieldlist = 12, RULE_variablelist = 13, RULE_typedvariablelist = 14, 
		RULE_customtypedvariablelist = 15, RULE_messageparameterlist = 16, RULE_messageparametersignature = 17, 
		RULE_expressionlist = 18, RULE_expression = 19, RULE_assignmentlist = 20, 
		RULE_assignment = 21, RULE_query = 22, RULE_comparator = 23, RULE_arraydeclaration = 24, 
		RULE_arrayaccess = 25, RULE_fieldaccess = 26, RULE_lefthandside = 27, 
		RULE_namedefstatement = 28, RULE_tagdefstatement = 29, RULE_tag = 30, 
		RULE_importstatement = 31, RULE_typedefstatement = 32, RULE_nodeconnectionstatement = 33, 
		RULE_surrogatedefinitionstatement = 34, RULE_surrogatebody = 35, RULE_functiondefinition = 36, 
		RULE_functionbody = 37, RULE_returnstatement = 38, RULE_functioncall = 39, 
		RULE_structpropertylist = 40, RULE_structdefinition = 41, RULE_messagetypename = 42, 
		RULE_nodetypename = 43, RULE_edgetypename = 44, RULE_messagetypelist = 45, 
		RULE_messagedefinition = 46, RULE_edgetypedefinition = 47, RULE_edgetypebody = 48, 
		RULE_nodetypedefinition = 49, RULE_nodetypesignature = 50, RULE_nodedefinition = 51, 
		RULE_nodebody = 52, RULE_nodebodyinout = 53, RULE_inoutoption = 54, RULE_nodebodyinclude = 55, 
		RULE_nodebodyproperty = 56, RULE_nodebodyclientserver = 57, RULE_nodeconstructor = 58, 
		RULE_metadefinition = 59, RULE_number = 60, RULE_string = 61, RULE_boolean = 62, 
		RULE_terminator = 63;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"atomictypeortypename", "graphtype", "variable", "typename", "field", 
		"fieldlist", "variablelist", "typedvariablelist", "customtypedvariablelist", 
		"messageparameterlist", "messageparametersignature", "expressionlist", 
		"expression", "assignmentlist", "assignment", "query", "comparator", "arraydeclaration", 
		"arrayaccess", "fieldaccess", "lefthandside", "namedefstatement", "tagdefstatement", 
		"tag", "importstatement", "typedefstatement", "nodeconnectionstatement", 
		"surrogatedefinitionstatement", "surrogatebody", "functiondefinition", 
		"functionbody", "returnstatement", "functioncall", "structpropertylist", 
		"structdefinition", "messagetypename", "nodetypename", "edgetypename", 
		"messagetypelist", "messagedefinition", "edgetypedefinition", "edgetypebody", 
		"nodetypedefinition", "nodetypesignature", "nodedefinition", "nodebody", 
		"nodebodyinout", "inoutoption", "nodebodyinclude", "nodebodyproperty", 
		"nodebodyclientserver", "nodeconstructor", "metadefinition", "number", 
		"string", "boolean", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", "'message'", 
		"'edgetype'", "'nodetype'", "'node'", "'surrogate'", "'meta'", "'function'", 
		"'typedef'", "'import'", "'include'", "'property'", "'topic'", "'input'", 
		"'output'", "'client'", "'server'", "'publish'", "'subscribe'", "'request'", 
		"'response'", "'pub'", "'sub'", "'req'", "'res'", "'aux'", "'null'", "'true'", 
		"'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'while'", 
		"'return'", "'as'", "'imitates'", "'with'", "'latest'", "'name'", "'tag'", 
		"'.'", "'*'", "','", "':'", "';'", "'='", "'+'", "'-'", "'/'", "'-->'", 
		"'==>'", "'-['", "']->'", "'=['", "']=>'", "'=='", "'!='", "'>'", "'>='", 
		"'<'", "'<='", "'and'", "'or'", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"EDGETYPE", "NODETYPE", "NODE", "SURROGATE", "META", "FUNCTION", "TYPEDEF", 
		"IMPORT", "INCLUDE", "PROPERTY", "TOPIC", "INPUT", "OUTPUT", "CLIENT", 
		"SERVER", "PUBLISH", "SUBSCRIBE", "REQUEST", "RESPONSE", "PUB", "SUB", 
		"REQ", "RES", "AUX", "NULL", "TRUE", "FALSE", "IF", "ELSE", "ELSEIF", 
		"FOR", "IN", "WHILE", "RETURN", "AS", "IMITATES", "WITH", "LATEST", "NAMEDEF", 
		"TAGDEF", "DOT", "STAR", "COMMA", "COLON", "SEMI_COLON", "ASSIGN", "ADD", 
		"MINUS", "DIV", "ARROW", "HEAVYARROW", "QUERYARROW_BEGIN", "QUERYARROW_END", 
		"QUERYHARROW_BEGIN", "QUERYHARROW_END", "EQUAL", "UNEQUAL", "GREATERTHAN", 
		"GREATEREQUALTHAN", "LESSTHAN", "LESSEQUALTHAN", "AND", "OR", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"NAME", "WORD", "STRINGLITERAL", "NORMALSTRING", "CHARSTRING", "LONGSTRING", 
		"INTEGER", "FLOATINGPOINTNUMBER", "WHITESPACE", "STMEND", "COMMENT", "LINECOMMENT", 
		"SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SeidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SeidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			set();
			State = 129;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 211106232590332L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 8209L) != 0)) {
				{
				{
				State = 131;
				statement();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SurrogateDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
			return GetRuleContext<SurrogatedefinitionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public SurrogateDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogateDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetaDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EdgetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypedefinitionContext edgetypedefinition() {
			return GetRuleContext<EdgetypedefinitionContext>(0);
		}
		public EdgetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeConnectionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeconnectionstatementContext nodeconnectionstatement() {
			return GetRuleContext<NodeconnectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public NodeConnectionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeConnectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedefstatementContext namedefstatement() {
			return GetRuleContext<NamedefstatementContext>(0);
		}
		public NameDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedefStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedefstatementContext typedefstatement() {
			return GetRuleContext<TypedefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TypedefStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagdefstatementContext tagdefstatement() {
			return GetRuleContext<TagdefstatementContext>(0);
		}
		public TagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 139;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 140;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 143;
				variablelist();
				State = 144;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 146;
				variablelist();
				State = 147;
				Match(ASSIGN);
				State = 148;
				expressionlist();
				State = 149;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 153;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 151;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 152;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 155;
				variablelist();
				State = 156;
				Match(ASSIGN);
				State = 157;
				expressionlist();
				}
				break;
			case 6:
				_localctx = new StructDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 159;
				structdefinition();
				}
				break;
			case 7:
				_localctx = new MessageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 160;
				messagedefinition();
				}
				break;
			case 8:
				_localctx = new EdgetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 161;
				edgetypedefinition();
				}
				break;
			case 9:
				_localctx = new NodetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 162;
				nodetypedefinition();
				}
				break;
			case 10:
				_localctx = new NodeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 163;
				nodedefinition();
				}
				break;
			case 11:
				_localctx = new MetaDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 164;
				metadefinition();
				}
				break;
			case 12:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 165;
				importstatement();
				}
				break;
			case 13:
				_localctx = new TypedefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 166;
				typedefstatement();
				State = 167;
				terminator();
				}
				break;
			case 14:
				_localctx = new NodeConnectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 169;
				nodeconnectionstatement();
				State = 170;
				terminator();
				}
				break;
			case 15:
				_localctx = new SurrogateDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 172;
				surrogatedefinitionstatement();
				State = 173;
				terminator();
				}
				break;
			case 16:
				_localctx = new NameDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 175;
				namedefstatement();
				}
				break;
			case 17:
				_localctx = new TagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 176;
				tagdefstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 179;
				variable();
				}
			}

			State = 182;
			Match(OPEN_BRACE);
			State = 183;
			set();
			State = 184;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188;
				atomictype();
				State = 189;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 191;
				complextype();
				State = 192;
				Match(ARRAY);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 194;
				typename();
				State = 195;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SeidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SeidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SeidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SeidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeortypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public AtomictypeortypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictypeortypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictypeortypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeortypenameContext atomictypeortypename() {
		AtomictypeortypenameContext _localctx = new AtomictypeortypenameContext(Context, State);
		EnterRule(_localctx, 14, RULE_atomictypeortypename);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				atomictype();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			variable();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 214;
				Match(DOT);
				State = 215;
				variable();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			field();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 222;
				Match(COMMA);
				State = 223;
				field();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 26, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			variable();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 230;
				Match(COMMA);
				State = 231;
				variable();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 28, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			atomictype();
			State = 238;
			variable();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 239;
				Match(COMMA);
				State = 240;
				atomictype();
				State = 241;
				variable();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomtypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public CustomtypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customtypedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomtypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomtypedvariablelistContext customtypedvariablelist() {
		CustomtypedvariablelistContext _localctx = new CustomtypedvariablelistContext(Context, State);
		EnterRule(_localctx, 30, RULE_customtypedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 248;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 249;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 252;
			variable();
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 253;
				Match(COMMA);
				State = 256;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 254;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 255;
					atomictype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 258;
				variable();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext[] messageparametersignature() {
			return GetRuleContexts<MessageparametersignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext messageparametersignature(int i) {
			return GetRuleContext<MessageparametersignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessageparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparameterlistContext messageparameterlist() {
		MessageparameterlistContext _localctx = new MessageparameterlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_messageparameterlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			messageparametersignature();
			State = 266;
			variable();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 267;
				Match(COMMA);
				State = 268;
				messageparametersignature();
				State = 269;
				variable();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparametersignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(SeidlParser.TOPIC, 0); }
		public MessageparametersignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparametersignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparametersignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparametersignatureContext messageparametersignature() {
		MessageparametersignatureContext _localctx = new MessageparametersignatureContext(Context, State);
		EnterRule(_localctx, 34, RULE_messageparametersignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOPIC) {
				{
				State = 276;
				Match(TOPIC);
				}
			}

			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 279;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 280;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			expression();
			State = 288;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 284;
					Match(COMMA);
					State = 285;
					expression();
					}
					} 
				}
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SeidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		int _la;
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 293;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 294;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 295;
				variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 296;
				field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 297;
				functiondefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 298;
				functioncall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 299;
				importstatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 300;
				assignmentlist();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 301;
				Match(OPEN_BRACE);
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 302;
					assignmentlist();
					}
				}

				State = 305;
				Match(CLOSE_BRACE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 306;
				Match(OPEN_BRACKET);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 307;
					variablelist();
					}
				}

				State = 310;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public AssignmentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentlistContext assignmentlist() {
		AssignmentlistContext _localctx = new AssignmentlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			assignment();
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 314;
					Match(COMMA);
					State = 315;
					assignment();
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				variable();
				State = 322;
				Match(ASSIGN);
				State = 323;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				field();
				State = 326;
				Match(ASSIGN);
				State = 327;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 44, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			field();
			State = 332;
			comparator();
			State = 333;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SeidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(SeidlParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SeidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SeidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SeidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SeidlParser.LESSEQUALTHAN, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			type();
			State = 338;
			Match(ARRAY);
			State = 339;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayaccess);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 341;
				variable();
				State = 342;
				Match(OPEN_BRACKET);
				State = 343;
				expression();
				State = 344;
				Match(CLOSE_BRACKET);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				@string();
				State = 347;
				Match(OPEN_BRACKET);
				State = 348;
				expression();
				State = 349;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SeidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldaccess);
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353;
				variable();
				State = 354;
				Match(DOT);
				State = 355;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				arrayaccess();
				State = 358;
				Match(DOT);
				State = 359;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 54, RULE_lefthandside);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEDEF() { return GetToken(SeidlParser.NAMEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NamedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedefstatementContext namedefstatement() {
		NamedefstatementContext _localctx = new NamedefstatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_namedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(NAMEDEF);
			State = 369;
			Match(ASSIGN);
			State = 370;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGDEF() { return GetToken(SeidlParser.TAGDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public TagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagdefstatementContext tagdefstatement() {
		TagdefstatementContext _localctx = new TagdefstatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_tagdefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(TAGDEF);
			State = 373;
			Match(ASSIGN);
			State = 374;
			tag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEST() { return GetToken(SeidlParser.LATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 60, RULE_tag);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LATEST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				Match(LATEST);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SeidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_importstatement);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				Match(IMPORT);
				State = 381;
				@string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				Match(IMPORT);
				State = 383;
				field();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384;
				Match(IMPORT);
				State = 385;
				field();
				State = 386;
				Match(COLON);
				State = 387;
				tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(SeidlParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefstatementContext typedefstatement() {
		TypedefstatementContext _localctx = new TypedefstatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_typedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(TYPEDEF);
			State = 394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 392;
				atomictype();
				}
				break;
			case NAME:
				{
				State = 393;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 396;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconnectionstatementContext : ParserRuleContext {
		public FieldlistContext sources;
		public FieldlistContext sinks;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SeidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext[] fieldlist() {
			return GetRuleContexts<FieldlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist(int i) {
			return GetRuleContext<FieldlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAVYARROW() { return GetToken(SeidlParser.HEAVYARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_BEGIN() { return GetToken(SeidlParser.QUERYARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_END() { return GetToken(SeidlParser.QUERYARROW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_BEGIN() { return GetToken(SeidlParser.QUERYHARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_END() { return GetToken(SeidlParser.QUERYHARROW_END, 0); }
		public NodeconnectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconnectionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconnectionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconnectionstatementContext nodeconnectionstatement() {
		NodeconnectionstatementContext _localctx = new NodeconnectionstatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_nodeconnectionstatement);
		try {
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				_localctx.sources = fieldlist();
				State = 399;
				Match(ARROW);
				State = 400;
				_localctx.sinks = fieldlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402;
				_localctx.sources = fieldlist();
				State = 403;
				Match(HEAVYARROW);
				State = 404;
				_localctx.sinks = fieldlist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 406;
				_localctx.sources = fieldlist();
				State = 407;
				Match(QUERYARROW_BEGIN);
				State = 408;
				query();
				State = 409;
				Match(QUERYARROW_END);
				State = 410;
				_localctx.sinks = fieldlist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 412;
				_localctx.sources = fieldlist();
				State = 413;
				Match(QUERYHARROW_BEGIN);
				State = 414;
				query();
				State = 415;
				Match(QUERYHARROW_END);
				State = 416;
				_localctx.sinks = fieldlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatedefinitionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SURROGATE() { return GetToken(SeidlParser.SURROGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatebodyContext surrogatebody() {
			return GetRuleContext<SurrogatebodyContext>(0);
		}
		public SurrogatedefinitionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatedefinitionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatedefinitionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
		SurrogatedefinitionstatementContext _localctx = new SurrogatedefinitionstatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_surrogatedefinitionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(SURROGATE);
			State = 421;
			variable();
			State = 422;
			surrogatebody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SeidlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SeidlParser.WITH, i);
		}
		public SurrogatebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatebodyContext surrogatebody() {
		SurrogatebodyContext _localctx = new SurrogatebodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_surrogatebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(OPEN_BRACE);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==WITH) {
				{
				State = 429;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 425;
					Match(FOR);
					State = 426;
					field();
					}
					break;
				case WITH:
					{
					State = 427;
					Match(WITH);
					State = 428;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 434;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SeidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SeidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SeidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SeidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SeidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 72, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(FUNCTION);
			State = 437;
			variable();
			State = 438;
			Match(ASSIGN);
			State = 439;
			Match(OPEN_PAREN);
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 440;
				customtypedvariablelist();
				}
			}

			State = 443;
			Match(CLOSE_PAREN);
			State = 444;
			Match(OPEN_PAREN);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 445;
				customtypedvariablelist();
				}
			}

			State = 448;
			Match(CLOSE_PAREN);
			State = 449;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SeidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SeidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SeidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SeidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SeidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SeidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SeidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SeidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SeidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SeidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SeidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SeidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(OPEN_BRACE);
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 214714005118972L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 8209L) != 0)) {
				{
				State = 498;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 452;
					statement();
					}
					break;
				case 2:
					{
					State = 453;
					Match(IF);
					State = 454;
					expression();
					State = 455;
					scope();
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 456;
						Match(ELSEIF);
						State = 457;
						expression();
						State = 458;
						scope();
						}
						}
						State = 464;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 467;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 465;
						Match(ELSE);
						State = 466;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 469;
					Match(WHILE);
					State = 470;
					expression();
					State = 471;
					scope();
					}
					break;
				case 4:
					{
					State = 473;
					Match(FOR);
					State = 475;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						State = 474;
						type();
						}
						break;
					}
					State = 477;
					variablelist();
					State = 478;
					Match(ASSIGN);
					State = 479;
					expressionlist();
					State = 480;
					Match(COMMA);
					State = 481;
					expression();
					State = 484;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 482;
						Match(COMMA);
						State = 483;
						expression();
						}
					}

					State = 486;
					scope();
					}
					break;
				case 5:
					{
					State = 488;
					Match(FOR);
					State = 490;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						State = 489;
						type();
						}
						break;
					}
					State = 492;
					variable();
					State = 493;
					Match(IN);
					State = 494;
					variable();
					State = 495;
					scope();
					}
					break;
				case 6:
					{
					State = 497;
					returnstatement();
					}
					break;
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 503;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SeidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(RETURN);
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 506;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 78, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			variable();
			State = 510;
			Match(OPEN_PAREN);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 511;
				variablelist();
				}
			}

			State = 514;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructpropertylistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext[] atomictypeortypename() {
			return GetRuleContexts<AtomictypeortypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext atomictypeortypename(int i) {
			return GetRuleContext<AtomictypeortypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public StructpropertylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structpropertylist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructpropertylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructpropertylistContext structpropertylist() {
		StructpropertylistContext _localctx = new StructpropertylistContext(Context, State);
		EnterRule(_localctx, 80, RULE_structpropertylist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME || _la==STMEND) {
				{
				State = 540;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
				case NAME:
					{
					State = 516;
					atomictypeortypename();
					State = 517;
					variable();
					State = 536;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 521;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 518;
								terminator();
								}
								}
								State = 523;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 524;
							Match(COMMA);
							State = 528;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 525;
								terminator();
								}
								}
								State = 530;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 531;
							atomictypeortypename();
							State = 532;
							variable();
							}
							} 
						}
						State = 538;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
					}
					}
					break;
				case STMEND:
					{
					State = 539;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructpropertylistContext structpropertylist() {
			return GetRuleContext<StructpropertylistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 82, RULE_structdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(STRUCT);
			State = 546;
			variable();
			State = 547;
			Match(OPEN_BRACE);
			State = 548;
			structpropertylist();
			State = 549;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 84, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 86, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public EdgetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypenameContext edgetypename() {
		EdgetypenameContext _localctx = new EdgetypenameContext(Context, State);
		EnterRule(_localctx, 88, RULE_edgetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 90, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			messagetypename();
			State = 558;
			variable();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 559;
				Match(COMMA);
				State = 560;
				messagetypename();
				State = 561;
				variable();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageparameterlistContext messageparameterlist() {
			return GetRuleContext<MessageparameterlistContext>(0);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 92, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(MESSAGE);
			State = 569;
			messagetypename();
			State = 570;
			Match(OPEN_BRACE);
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262204L) != 0) || _la==NAME) {
				{
				State = 571;
				messageparameterlist();
				}
			}

			State = 574;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGETYPE() { return GetToken(SeidlParser.EDGETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypebodyContext edgetypebody() {
			return GetRuleContext<EdgetypebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public EdgetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypedefinitionContext edgetypedefinition() {
		EdgetypedefinitionContext _localctx = new EdgetypedefinitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_edgetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(EDGETYPE);
			State = 577;
			edgetypename();
			State = 578;
			Match(OPEN_BRACE);
			State = 579;
			edgetypebody();
			State = 580;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST() { return GetTokens(SeidlParser.REQUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST(int i) {
			return GetToken(SeidlParser.REQUEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESPONSE() { return GetTokens(SeidlParser.RESPONSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE(int i) {
			return GetToken(SeidlParser.RESPONSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public EdgetypebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypebodyContext edgetypebody() {
		EdgetypebodyContext _localctx = new EdgetypebodyContext(Context, State);
		EnterRule(_localctx, 96, RULE_edgetypebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 2305843009213693955L) != 0)) {
				{
				State = 587;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REQUEST:
					{
					State = 582;
					Match(REQUEST);
					State = 583;
					messagetypename();
					}
					break;
				case RESPONSE:
					{
					State = 584;
					Match(RESPONSE);
					State = 585;
					messagetypename();
					}
					break;
				case STMEND:
					{
					State = 586;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_nodetypedefinition);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				Match(NODETYPE);
				State = 593;
				nodetypename();
				State = 594;
				Match(OPEN_BRACE);
				State = 595;
				nodebody();
				State = 596;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				Match(NODETYPE);
				State = 599;
				nodetypename();
				State = 600;
				nodetypesignature();
				State = 601;
				Match(OPEN_BRACE);
				State = 602;
				nodebody();
				State = 603;
				Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypesignatureContext : ParserRuleContext {
		public MessagetypelistContext inputs;
		public MessagetypelistContext outputs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SeidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext[] messagetypelist() {
			return GetRuleContexts<MessagetypelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist(int i) {
			return GetRuleContext<MessagetypelistContext>(i);
		}
		public NodetypesignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypesignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypesignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypesignatureContext nodetypesignature() {
		NodetypesignatureContext _localctx = new NodetypesignatureContext(Context, State);
		EnterRule(_localctx, 100, RULE_nodetypesignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(OPEN_PAREN);
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 608;
				_localctx.inputs = messagetypelist();
				}
			}

			State = 611;
			Match(ARROW);
			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 612;
				_localctx.outputs = messagetypelist();
				}
			}

			State = 615;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeconstructorContext nodeconstructor() {
			return GetRuleContext<NodeconstructorContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_nodedefinition);
		try {
			State = 641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				Match(NODE);
				State = 618;
				variable();
				State = 619;
				Match(OPEN_BRACE);
				State = 620;
				nodebody();
				State = 621;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623;
				Match(NODE);
				State = 624;
				variable();
				State = 625;
				nodetypesignature();
				State = 630;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 626;
					Match(OPEN_BRACE);
					State = 627;
					nodebody();
					State = 628;
					Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 632;
				Match(NODE);
				State = 633;
				typename();
				State = 634;
				variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 636;
				Match(NODE);
				State = 637;
				typename();
				State = 638;
				variable();
				State = 639;
				nodeconstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		public NodebodyinoutContext inout;
		public NodebodyclientserverContext clientserver;
		public NodebodyincludeContext include;
		public NodebodypropertyContext property;
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext[] nodebodyinout() {
			return GetRuleContexts<NodebodyinoutContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext nodebodyinout(int i) {
			return GetRuleContext<NodebodyinoutContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext[] nodebodyclientserver() {
			return GetRuleContexts<NodebodyclientserverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext nodebodyclientserver(int i) {
			return GetRuleContext<NodebodyclientserverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyincludeContext[] nodebodyinclude() {
			return GetRuleContexts<NodebodyincludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyincludeContext nodebodyinclude(int i) {
			return GetRuleContext<NodebodyincludeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext[] nodebodyproperty() {
			return GetRuleContexts<NodebodypropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext nodebodyproperty(int i) {
			return GetRuleContext<NodebodypropertyContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 104, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8060928L) != 0) || _la==STMEND) {
				{
				State = 648;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
					{
					State = 643;
					_localctx.inout = nodebodyinout();
					}
					break;
				case CLIENT:
				case SERVER:
					{
					State = 644;
					_localctx.clientserver = nodebodyclientserver();
					}
					break;
				case INCLUDE:
					{
					State = 645;
					_localctx.include = nodebodyinclude();
					}
					break;
				case PROPERTY:
					{
					State = 646;
					_localctx.property = nodebodyproperty();
					}
					break;
				case STMEND:
					{
					State = 647;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyinoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SeidlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist() {
			return GetRuleContext<MessagetypelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SeidlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InoutoptionContext inoutoption() {
			return GetRuleContext<InoutoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		public NodebodyinoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinout; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinout(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyinoutContext nodebodyinout() {
		NodebodyinoutContext _localctx = new NodebodyinoutContext(Context, State);
		EnterRule(_localctx, 106, RULE_nodebodyinout);
		try {
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 653;
				Match(INPUT);
				State = 654;
				messagetypelist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655;
				Match(OUTPUT);
				State = 656;
				messagetypelist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 657;
				Match(INPUT);
				State = 658;
				Match(OPEN_BRACKET);
				State = 659;
				inoutoption();
				State = 660;
				Match(CLOSE_BRACKET);
				State = 661;
				messagetypelist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 663;
				Match(OUTPUT);
				State = 664;
				Match(OPEN_BRACKET);
				State = 665;
				inoutoption();
				State = 666;
				Match(CLOSE_BRACKET);
				State = 667;
				messagetypelist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InoutoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUX() { return GetToken(SeidlParser.AUX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQ() { return GetToken(SeidlParser.REQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES() { return GetToken(SeidlParser.RES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST() { return GetToken(SeidlParser.REQUEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE() { return GetToken(SeidlParser.RESPONSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(SeidlParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SeidlParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SeidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SeidlParser.SUBSCRIBE, 0); }
		public InoutoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inoutoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInoutoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InoutoptionContext inoutoption() {
		InoutoptionContext _localctx = new InoutoptionContext(Context, State);
		EnterRule(_localctx, 108, RULE_inoutoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4286578688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 672;
			Match(COLON);
			State = 673;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyincludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(SeidlParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public NodebodyincludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinclude; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyincludeContext nodebodyinclude() {
		NodebodyincludeContext _localctx = new NodebodyincludeContext(Context, State);
		EnterRule(_localctx, 110, RULE_nodebodyinclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(INCLUDE);
			State = 676;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodypropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SeidlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodebodypropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyproperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodypropertyContext nodebodyproperty() {
		NodebodypropertyContext _localctx = new NodebodypropertyContext(Context, State);
		EnterRule(_localctx, 112, RULE_nodebodyproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(PROPERTY);
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 679;
				type();
				}
				break;
			case 2:
				{
				State = 680;
				typename();
				}
				break;
			}
			State = 683;
			variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyclientserverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(SeidlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(SeidlParser.SERVER, 0); }
		public NodebodyclientserverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyclientserver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyclientserver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyclientserverContext nodebodyclientserver() {
		NodebodyclientserverContext _localctx = new NodebodyclientserverContext(Context, State);
		EnterRule(_localctx, 114, RULE_nodebodyclientserver);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			_la = TokenStream.LA(1);
			if ( !(_la==CLIENT || _la==SERVER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 686;
			edgetypename();
			State = 687;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		public NodeconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconstructorContext nodeconstructor() {
		NodeconstructorContext _localctx = new NodeconstructorContext(Context, State);
		EnterRule(_localctx, 116, RULE_nodeconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(OPEN_PAREN);
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 690;
				assignmentlist();
				}
			}

			State = 693;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SeidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SeidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(META);
			State = 696;
			variable();
			State = 697;
			Match(OPEN_BRACE);
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 698;
				Match(PROPERTY);
				State = 699;
				type();
				State = 700;
				variablelist();
				State = 701;
				terminator();
				}
				}
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 708;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SeidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SeidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 120, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SeidlParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 122, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SeidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SeidlParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 124, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SeidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,89,719,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		1,0,1,0,1,0,1,1,5,1,133,8,1,10,1,12,1,136,9,1,1,2,1,2,1,2,1,2,3,2,142,
		8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,154,8,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,178,8,2,1,3,3,3,181,8,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,3,4,198,8,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,206,8,7,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,5,11,217,8,11,10,11,12,11,220,
		9,11,1,12,1,12,1,12,5,12,225,8,12,10,12,12,12,228,9,12,1,13,1,13,1,13,
		5,13,233,8,13,10,13,12,13,236,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,
		244,8,14,10,14,12,14,247,9,14,1,15,1,15,3,15,251,8,15,1,15,1,15,1,15,1,
		15,3,15,257,8,15,1,15,1,15,5,15,261,8,15,10,15,12,15,264,9,15,1,16,1,16,
		1,16,1,16,1,16,1,16,5,16,272,8,16,10,16,12,16,275,9,16,1,17,3,17,278,8,
		17,1,17,1,17,3,17,282,8,17,1,18,1,18,1,18,5,18,287,8,18,10,18,12,18,290,
		9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
		304,8,19,1,19,1,19,1,19,3,19,309,8,19,1,19,3,19,312,8,19,1,20,1,20,1,20,
		5,20,317,8,20,10,20,12,20,320,9,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,3,21,330,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,352,8,25,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,3,26,362,8,26,1,27,1,27,1,27,3,27,367,8,
		27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,3,30,379,8,30,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,390,8,31,1,32,1,32,1,32,3,
		32,395,8,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,419,8,33,1,34,1,
		34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,5,35,430,8,35,10,35,12,35,433,9,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,36,442,8,36,1,36,1,36,1,36,3,36,
		447,8,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,
		37,461,8,37,10,37,12,37,464,9,37,1,37,1,37,3,37,468,8,37,1,37,1,37,1,37,
		1,37,1,37,1,37,3,37,476,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,485,
		8,37,1,37,1,37,1,37,1,37,3,37,491,8,37,1,37,1,37,1,37,1,37,1,37,1,37,5,
		37,499,8,37,10,37,12,37,502,9,37,1,37,1,37,1,38,1,38,3,38,508,8,38,1,39,
		1,39,1,39,3,39,513,8,39,1,39,1,39,1,40,1,40,1,40,5,40,520,8,40,10,40,12,
		40,523,9,40,1,40,1,40,5,40,527,8,40,10,40,12,40,530,9,40,1,40,1,40,1,40,
		5,40,535,8,40,10,40,12,40,538,9,40,1,40,5,40,541,8,40,10,40,12,40,544,
		9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
		1,45,1,45,1,45,1,45,1,45,5,45,564,8,45,10,45,12,45,567,9,45,1,46,1,46,
		1,46,1,46,3,46,573,8,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,
		48,1,48,1,48,1,48,5,48,588,8,48,10,48,12,48,591,9,48,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,606,8,49,1,50,1,50,
		3,50,610,8,50,1,50,1,50,3,50,614,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,631,8,51,1,51,1,51,1,51,
		1,51,1,51,1,51,1,51,1,51,1,51,3,51,642,8,51,1,52,1,52,1,52,1,52,1,52,5,
		52,649,8,52,10,52,12,52,652,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
		53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,670,8,53,1,54,1,54,1,54,
		1,54,1,55,1,55,1,55,1,56,1,56,1,56,3,56,682,8,56,1,56,1,56,1,57,1,57,1,
		57,1,57,1,58,1,58,3,58,692,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,5,59,704,8,59,10,59,12,59,707,9,59,1,59,1,59,1,60,1,60,1,61,
		1,61,1,62,1,62,1,63,1,63,1,63,0,0,64,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,0,7,1,0,2,5,3,0,7,7,9,10,12,12,1,0,63,68,1,0,23,
		31,1,0,21,22,1,0,83,84,1,0,33,34,761,0,128,1,0,0,0,2,134,1,0,0,0,4,177,
		1,0,0,0,6,180,1,0,0,0,8,197,1,0,0,0,10,199,1,0,0,0,12,201,1,0,0,0,14,205,
		1,0,0,0,16,207,1,0,0,0,18,209,1,0,0,0,20,211,1,0,0,0,22,213,1,0,0,0,24,
		221,1,0,0,0,26,229,1,0,0,0,28,237,1,0,0,0,30,250,1,0,0,0,32,265,1,0,0,
		0,34,277,1,0,0,0,36,283,1,0,0,0,38,311,1,0,0,0,40,313,1,0,0,0,42,329,1,
		0,0,0,44,331,1,0,0,0,46,335,1,0,0,0,48,337,1,0,0,0,50,351,1,0,0,0,52,361,
		1,0,0,0,54,366,1,0,0,0,56,368,1,0,0,0,58,372,1,0,0,0,60,378,1,0,0,0,62,
		389,1,0,0,0,64,391,1,0,0,0,66,418,1,0,0,0,68,420,1,0,0,0,70,424,1,0,0,
		0,72,436,1,0,0,0,74,451,1,0,0,0,76,505,1,0,0,0,78,509,1,0,0,0,80,542,1,
		0,0,0,82,545,1,0,0,0,84,551,1,0,0,0,86,553,1,0,0,0,88,555,1,0,0,0,90,557,
		1,0,0,0,92,568,1,0,0,0,94,576,1,0,0,0,96,589,1,0,0,0,98,605,1,0,0,0,100,
		607,1,0,0,0,102,641,1,0,0,0,104,650,1,0,0,0,106,669,1,0,0,0,108,671,1,
		0,0,0,110,675,1,0,0,0,112,678,1,0,0,0,114,685,1,0,0,0,116,689,1,0,0,0,
		118,695,1,0,0,0,120,710,1,0,0,0,122,712,1,0,0,0,124,714,1,0,0,0,126,716,
		1,0,0,0,128,129,3,2,1,0,129,130,5,0,0,1,130,1,1,0,0,0,131,133,3,4,2,0,
		132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,3,
		1,0,0,0,136,134,1,0,0,0,137,178,3,126,63,0,138,178,3,6,3,0,139,142,3,10,
		5,0,140,142,3,20,10,0,141,139,1,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,
		143,144,3,26,13,0,144,145,3,126,63,0,145,178,1,0,0,0,146,147,3,26,13,0,
		147,148,5,53,0,0,148,149,3,36,18,0,149,150,3,126,63,0,150,178,1,0,0,0,
		151,154,3,10,5,0,152,154,3,20,10,0,153,151,1,0,0,0,153,152,1,0,0,0,154,
		155,1,0,0,0,155,156,3,26,13,0,156,157,5,53,0,0,157,158,3,36,18,0,158,178,
		1,0,0,0,159,178,3,82,41,0,160,178,3,92,46,0,161,178,3,94,47,0,162,178,
		3,98,49,0,163,178,3,102,51,0,164,178,3,118,59,0,165,178,3,62,31,0,166,
		167,3,64,32,0,167,168,3,126,63,0,168,178,1,0,0,0,169,170,3,66,33,0,170,
		171,3,126,63,0,171,178,1,0,0,0,172,173,3,68,34,0,173,174,3,126,63,0,174,
		178,1,0,0,0,175,178,3,56,28,0,176,178,3,58,29,0,177,137,1,0,0,0,177,138,
		1,0,0,0,177,141,1,0,0,0,177,146,1,0,0,0,177,153,1,0,0,0,177,159,1,0,0,
		0,177,160,1,0,0,0,177,161,1,0,0,0,177,162,1,0,0,0,177,163,1,0,0,0,177,
		164,1,0,0,0,177,165,1,0,0,0,177,166,1,0,0,0,177,169,1,0,0,0,177,172,1,
		0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,5,1,0,0,0,179,181,3,18,9,0,180,
		179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,5,73,0,0,183,184,3,
		2,1,0,184,185,5,74,0,0,185,7,1,0,0,0,186,198,3,10,5,0,187,198,3,12,6,0,
		188,189,3,10,5,0,189,190,5,1,0,0,190,198,1,0,0,0,191,192,3,12,6,0,192,
		193,5,1,0,0,193,198,1,0,0,0,194,195,3,20,10,0,195,196,5,1,0,0,196,198,
		1,0,0,0,197,186,1,0,0,0,197,187,1,0,0,0,197,188,1,0,0,0,197,191,1,0,0,
		0,197,194,1,0,0,0,198,9,1,0,0,0,199,200,7,0,0,0,200,11,1,0,0,0,201,202,
		5,6,0,0,202,13,1,0,0,0,203,206,3,10,5,0,204,206,3,20,10,0,205,203,1,0,
		0,0,205,204,1,0,0,0,206,15,1,0,0,0,207,208,7,1,0,0,208,17,1,0,0,0,209,
		210,5,77,0,0,210,19,1,0,0,0,211,212,5,77,0,0,212,21,1,0,0,0,213,218,3,
		18,9,0,214,215,5,48,0,0,215,217,3,18,9,0,216,214,1,0,0,0,217,220,1,0,0,
		0,218,216,1,0,0,0,218,219,1,0,0,0,219,23,1,0,0,0,220,218,1,0,0,0,221,226,
		3,22,11,0,222,223,5,50,0,0,223,225,3,22,11,0,224,222,1,0,0,0,225,228,1,
		0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,25,1,0,0,0,228,226,1,0,0,0,229,
		234,3,18,9,0,230,231,5,50,0,0,231,233,3,18,9,0,232,230,1,0,0,0,233,236,
		1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,27,1,0,0,0,236,234,1,0,0,0,
		237,238,3,10,5,0,238,245,3,18,9,0,239,240,5,50,0,0,240,241,3,10,5,0,241,
		242,3,18,9,0,242,244,1,0,0,0,243,239,1,0,0,0,244,247,1,0,0,0,245,243,1,
		0,0,0,245,246,1,0,0,0,246,29,1,0,0,0,247,245,1,0,0,0,248,251,3,20,10,0,
		249,251,3,10,5,0,250,248,1,0,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,262,
		3,18,9,0,253,256,5,50,0,0,254,257,3,20,10,0,255,257,3,10,5,0,256,254,1,
		0,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,259,3,18,9,0,259,261,1,0,0,0,
		260,253,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,31,
		1,0,0,0,264,262,1,0,0,0,265,266,3,34,17,0,266,273,3,18,9,0,267,268,5,50,
		0,0,268,269,3,34,17,0,269,270,3,18,9,0,270,272,1,0,0,0,271,267,1,0,0,0,
		272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,33,1,0,0,0,275,273,
		1,0,0,0,276,278,5,18,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,281,1,0,0,
		0,279,282,3,20,10,0,280,282,3,10,5,0,281,279,1,0,0,0,281,280,1,0,0,0,282,
		35,1,0,0,0,283,288,3,38,19,0,284,285,5,50,0,0,285,287,3,38,19,0,286,284,
		1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,37,1,0,0,0,
		290,288,1,0,0,0,291,312,5,32,0,0,292,312,3,124,62,0,293,312,3,120,60,0,
		294,312,3,122,61,0,295,312,3,18,9,0,296,312,3,22,11,0,297,312,3,72,36,
		0,298,312,3,78,39,0,299,312,3,62,31,0,300,312,3,40,20,0,301,303,5,73,0,
		0,302,304,3,40,20,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,
		312,5,74,0,0,306,308,5,75,0,0,307,309,3,26,13,0,308,307,1,0,0,0,308,309,
		1,0,0,0,309,310,1,0,0,0,310,312,5,76,0,0,311,291,1,0,0,0,311,292,1,0,0,
		0,311,293,1,0,0,0,311,294,1,0,0,0,311,295,1,0,0,0,311,296,1,0,0,0,311,
		297,1,0,0,0,311,298,1,0,0,0,311,299,1,0,0,0,311,300,1,0,0,0,311,301,1,
		0,0,0,311,306,1,0,0,0,312,39,1,0,0,0,313,318,3,42,21,0,314,315,5,50,0,
		0,315,317,3,42,21,0,316,314,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,
		319,1,0,0,0,319,41,1,0,0,0,320,318,1,0,0,0,321,322,3,18,9,0,322,323,5,
		53,0,0,323,324,3,38,19,0,324,330,1,0,0,0,325,326,3,22,11,0,326,327,5,53,
		0,0,327,328,3,38,19,0,328,330,1,0,0,0,329,321,1,0,0,0,329,325,1,0,0,0,
		330,43,1,0,0,0,331,332,3,22,11,0,332,333,3,46,23,0,333,334,3,38,19,0,334,
		45,1,0,0,0,335,336,7,2,0,0,336,47,1,0,0,0,337,338,3,8,4,0,338,339,5,1,
		0,0,339,340,3,18,9,0,340,49,1,0,0,0,341,342,3,18,9,0,342,343,5,75,0,0,
		343,344,3,38,19,0,344,345,5,76,0,0,345,352,1,0,0,0,346,347,3,122,61,0,
		347,348,5,75,0,0,348,349,3,38,19,0,349,350,5,76,0,0,350,352,1,0,0,0,351,
		341,1,0,0,0,351,346,1,0,0,0,352,51,1,0,0,0,353,354,3,18,9,0,354,355,5,
		48,0,0,355,356,3,54,27,0,356,362,1,0,0,0,357,358,3,50,25,0,358,359,5,48,
		0,0,359,360,3,54,27,0,360,362,1,0,0,0,361,353,1,0,0,0,361,357,1,0,0,0,
		362,53,1,0,0,0,363,367,3,18,9,0,364,367,3,52,26,0,365,367,3,50,25,0,366,
		363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,55,1,0,0,0,368,369,5,46,
		0,0,369,370,5,53,0,0,370,371,3,122,61,0,371,57,1,0,0,0,372,373,5,47,0,
		0,373,374,5,53,0,0,374,375,3,60,30,0,375,59,1,0,0,0,376,379,5,45,0,0,377,
		379,3,122,61,0,378,376,1,0,0,0,378,377,1,0,0,0,379,61,1,0,0,0,380,381,
		5,15,0,0,381,390,3,122,61,0,382,383,5,15,0,0,383,390,3,22,11,0,384,385,
		5,15,0,0,385,386,3,22,11,0,386,387,5,51,0,0,387,388,3,60,30,0,388,390,
		1,0,0,0,389,380,1,0,0,0,389,382,1,0,0,0,389,384,1,0,0,0,390,63,1,0,0,0,
		391,394,5,14,0,0,392,395,3,10,5,0,393,395,3,20,10,0,394,392,1,0,0,0,394,
		393,1,0,0,0,395,396,1,0,0,0,396,397,3,18,9,0,397,65,1,0,0,0,398,399,3,
		24,12,0,399,400,5,57,0,0,400,401,3,24,12,0,401,419,1,0,0,0,402,403,3,24,
		12,0,403,404,5,58,0,0,404,405,3,24,12,0,405,419,1,0,0,0,406,407,3,24,12,
		0,407,408,5,59,0,0,408,409,3,44,22,0,409,410,5,60,0,0,410,411,3,24,12,
		0,411,419,1,0,0,0,412,413,3,24,12,0,413,414,5,61,0,0,414,415,3,44,22,0,
		415,416,5,62,0,0,416,417,3,24,12,0,417,419,1,0,0,0,418,398,1,0,0,0,418,
		402,1,0,0,0,418,406,1,0,0,0,418,412,1,0,0,0,419,67,1,0,0,0,420,421,5,11,
		0,0,421,422,3,18,9,0,422,423,3,70,35,0,423,69,1,0,0,0,424,431,5,73,0,0,
		425,426,5,38,0,0,426,430,3,22,11,0,427,428,5,44,0,0,428,430,3,22,11,0,
		429,425,1,0,0,0,429,427,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,
		1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,0,434,435,5,74,0,0,435,71,1,0,0,
		0,436,437,5,13,0,0,437,438,3,18,9,0,438,439,5,53,0,0,439,441,5,71,0,0,
		440,442,3,30,15,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,
		444,5,72,0,0,444,446,5,71,0,0,445,447,3,30,15,0,446,445,1,0,0,0,446,447,
		1,0,0,0,447,448,1,0,0,0,448,449,5,72,0,0,449,450,3,74,37,0,450,73,1,0,
		0,0,451,500,5,73,0,0,452,499,3,4,2,0,453,454,5,35,0,0,454,455,3,38,19,
		0,455,462,3,6,3,0,456,457,5,37,0,0,457,458,3,38,19,0,458,459,3,6,3,0,459,
		461,1,0,0,0,460,456,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,
		0,0,0,463,467,1,0,0,0,464,462,1,0,0,0,465,466,5,36,0,0,466,468,3,6,3,0,
		467,465,1,0,0,0,467,468,1,0,0,0,468,499,1,0,0,0,469,470,5,40,0,0,470,471,
		3,38,19,0,471,472,3,6,3,0,472,499,1,0,0,0,473,475,5,38,0,0,474,476,3,8,
		4,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,478,3,26,13,0,
		478,479,5,53,0,0,479,480,3,36,18,0,480,481,5,50,0,0,481,484,3,38,19,0,
		482,483,5,50,0,0,483,485,3,38,19,0,484,482,1,0,0,0,484,485,1,0,0,0,485,
		486,1,0,0,0,486,487,3,6,3,0,487,499,1,0,0,0,488,490,5,38,0,0,489,491,3,
		8,4,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,3,18,9,0,
		493,494,5,39,0,0,494,495,3,18,9,0,495,496,3,6,3,0,496,499,1,0,0,0,497,
		499,3,76,38,0,498,452,1,0,0,0,498,453,1,0,0,0,498,469,1,0,0,0,498,473,
		1,0,0,0,498,488,1,0,0,0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,
		0,500,501,1,0,0,0,501,503,1,0,0,0,502,500,1,0,0,0,503,504,5,74,0,0,504,
		75,1,0,0,0,505,507,5,41,0,0,506,508,3,26,13,0,507,506,1,0,0,0,507,508,
		1,0,0,0,508,77,1,0,0,0,509,510,3,18,9,0,510,512,5,71,0,0,511,513,3,26,
		13,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,5,72,0,0,
		515,79,1,0,0,0,516,517,3,14,7,0,517,536,3,18,9,0,518,520,3,126,63,0,519,
		518,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,
		0,0,0,523,521,1,0,0,0,524,528,5,50,0,0,525,527,3,126,63,0,526,525,1,0,
		0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,
		528,1,0,0,0,531,532,3,14,7,0,532,533,3,18,9,0,533,535,1,0,0,0,534,521,
		1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,541,1,0,0,
		0,538,536,1,0,0,0,539,541,3,126,63,0,540,516,1,0,0,0,540,539,1,0,0,0,541,
		544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,81,1,0,0,0,544,542,1,0,
		0,0,545,546,5,6,0,0,546,547,3,18,9,0,547,548,5,73,0,0,548,549,3,80,40,
		0,549,550,5,74,0,0,550,83,1,0,0,0,551,552,5,77,0,0,552,85,1,0,0,0,553,
		554,5,77,0,0,554,87,1,0,0,0,555,556,5,77,0,0,556,89,1,0,0,0,557,558,3,
		84,42,0,558,565,3,18,9,0,559,560,5,50,0,0,560,561,3,84,42,0,561,562,3,
		18,9,0,562,564,1,0,0,0,563,559,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,
		565,566,1,0,0,0,566,91,1,0,0,0,567,565,1,0,0,0,568,569,5,7,0,0,569,570,
		3,84,42,0,570,572,5,73,0,0,571,573,3,32,16,0,572,571,1,0,0,0,572,573,1,
		0,0,0,573,574,1,0,0,0,574,575,5,74,0,0,575,93,1,0,0,0,576,577,5,8,0,0,
		577,578,3,88,44,0,578,579,5,73,0,0,579,580,3,96,48,0,580,581,5,74,0,0,
		581,95,1,0,0,0,582,583,5,25,0,0,583,588,3,84,42,0,584,585,5,26,0,0,585,
		588,3,84,42,0,586,588,3,126,63,0,587,582,1,0,0,0,587,584,1,0,0,0,587,586,
		1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,97,1,0,0,0,
		591,589,1,0,0,0,592,593,5,9,0,0,593,594,3,86,43,0,594,595,5,73,0,0,595,
		596,3,104,52,0,596,597,5,74,0,0,597,606,1,0,0,0,598,599,5,9,0,0,599,600,
		3,86,43,0,600,601,3,100,50,0,601,602,5,73,0,0,602,603,3,104,52,0,603,604,
		5,74,0,0,604,606,1,0,0,0,605,592,1,0,0,0,605,598,1,0,0,0,606,99,1,0,0,
		0,607,609,5,71,0,0,608,610,3,90,45,0,609,608,1,0,0,0,609,610,1,0,0,0,610,
		611,1,0,0,0,611,613,5,57,0,0,612,614,3,90,45,0,613,612,1,0,0,0,613,614,
		1,0,0,0,614,615,1,0,0,0,615,616,5,72,0,0,616,101,1,0,0,0,617,618,5,10,
		0,0,618,619,3,18,9,0,619,620,5,73,0,0,620,621,3,104,52,0,621,622,5,74,
		0,0,622,642,1,0,0,0,623,624,5,10,0,0,624,625,3,18,9,0,625,630,3,100,50,
		0,626,627,5,73,0,0,627,628,3,104,52,0,628,629,5,74,0,0,629,631,1,0,0,0,
		630,626,1,0,0,0,630,631,1,0,0,0,631,642,1,0,0,0,632,633,5,10,0,0,633,634,
		3,20,10,0,634,635,3,18,9,0,635,642,1,0,0,0,636,637,5,10,0,0,637,638,3,
		20,10,0,638,639,3,18,9,0,639,640,3,116,58,0,640,642,1,0,0,0,641,617,1,
		0,0,0,641,623,1,0,0,0,641,632,1,0,0,0,641,636,1,0,0,0,642,103,1,0,0,0,
		643,649,3,106,53,0,644,649,3,114,57,0,645,649,3,110,55,0,646,649,3,112,
		56,0,647,649,3,126,63,0,648,643,1,0,0,0,648,644,1,0,0,0,648,645,1,0,0,
		0,648,646,1,0,0,0,648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,
		651,1,0,0,0,651,105,1,0,0,0,652,650,1,0,0,0,653,654,5,19,0,0,654,670,3,
		90,45,0,655,656,5,20,0,0,656,670,3,90,45,0,657,658,5,19,0,0,658,659,5,
		75,0,0,659,660,3,108,54,0,660,661,5,76,0,0,661,662,3,90,45,0,662,670,1,
		0,0,0,663,664,5,20,0,0,664,665,5,75,0,0,665,666,3,108,54,0,666,667,5,76,
		0,0,667,668,3,90,45,0,668,670,1,0,0,0,669,653,1,0,0,0,669,655,1,0,0,0,
		669,657,1,0,0,0,669,663,1,0,0,0,670,107,1,0,0,0,671,672,7,3,0,0,672,673,
		5,51,0,0,673,674,5,77,0,0,674,109,1,0,0,0,675,676,5,16,0,0,676,677,3,18,
		9,0,677,111,1,0,0,0,678,681,5,17,0,0,679,682,3,8,4,0,680,682,3,20,10,0,
		681,679,1,0,0,0,681,680,1,0,0,0,682,683,1,0,0,0,683,684,3,26,13,0,684,
		113,1,0,0,0,685,686,7,4,0,0,686,687,3,88,44,0,687,688,5,77,0,0,688,115,
		1,0,0,0,689,691,5,71,0,0,690,692,3,40,20,0,691,690,1,0,0,0,691,692,1,0,
		0,0,692,693,1,0,0,0,693,694,5,72,0,0,694,117,1,0,0,0,695,696,5,12,0,0,
		696,697,3,18,9,0,697,705,5,73,0,0,698,699,5,17,0,0,699,700,3,8,4,0,700,
		701,3,26,13,0,701,702,3,126,63,0,702,704,1,0,0,0,703,698,1,0,0,0,704,707,
		1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,708,1,0,0,0,707,705,1,0,0,
		0,708,709,5,74,0,0,709,119,1,0,0,0,710,711,7,5,0,0,711,121,1,0,0,0,712,
		713,5,79,0,0,713,123,1,0,0,0,714,715,7,6,0,0,715,125,1,0,0,0,716,717,5,
		86,0,0,717,127,1,0,0,0,63,134,141,153,177,180,197,205,218,226,234,245,
		250,256,262,273,277,281,288,303,308,311,318,329,351,361,366,378,389,394,
		418,429,431,441,446,462,467,475,484,490,498,500,507,512,521,528,536,540,
		542,565,572,587,589,605,609,613,630,641,648,650,669,681,691,705
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ai.Hgb.Seidl.Processor
