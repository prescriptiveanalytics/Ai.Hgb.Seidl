//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/workspaces/spa/Ai.Hgb.Seidl/src/Grammar/SeidlParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ai.Hgb.Seidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SeidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARRAY=1, STRING=2, INT=3, FLOAT=4, BOOL=5, STRUCT=6, MESSAGE=7, EDGETYPE=8, 
		NODETYPE=9, NODE=10, SURROGATE=11, META=12, FUNCTION=13, TYPEDEF=14, IMPORT=15, 
		INCLUDE=16, PROPERTY=17, TOPIC=18, INPUT=19, OUTPUT=20, CLIENT=21, SERVER=22, 
		PUBLISH=23, SUBSCRIBE=24, REQUEST=25, RESPONSE=26, PUB=27, SUB=28, REQ=29, 
		RES=30, AUX=31, NULL=32, TRUE=33, FALSE=34, IF=35, ELSE=36, ELSEIF=37, 
		FOR=38, IN=39, TO=40, WHILE=41, RETURN=42, AS=43, IMITATES=44, WITH=45, 
		LATEST=46, NAMEDEF=47, TAGDEF=48, PACKAGE=49, IMAGE=50, QUEUE=51, VAR=52, 
		COMMAND=53, DOT=54, STAR=55, COMMA=56, COLON=57, SEMI_COLON=58, ASSIGN=59, 
		ADD=60, MINUS=61, DIV=62, INTERPOLATION=63, ARROW=64, HEAVYARROW=65, QUERYARROW_BEGIN=66, 
		QUERYHARROW_BEGIN=67, QUERYARROW_END=68, QUERYHARROW_END=69, EQUAL=70, 
		UNEQUAL=71, GREATERTHAN=72, GREATEREQUALTHAN=73, LESSTHAN=74, LESSEQUALTHAN=75, 
		AND=76, OR=77, NOT=78, OPEN_PAREN=79, CLOSE_PAREN=80, OPEN_BRACE=81, CLOSE_BRACE=82, 
		OPEN_BRACKET=83, CLOSE_BRACKET=84, NAME=85, WORD=86, STRINGLITERAL=87, 
		NORMALSTRING=88, CHARSTRING=89, LONGSTRING=90, INTEGER=91, FLOATINGPOINTNUMBER=92, 
		WHITESPACE=93, STMEND=94, COMMENT=95, LINECOMMENT=96, SHEBANG=97;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_atomictypeortypename = 7, 
		RULE_graphtype = 8, RULE_variable = 9, RULE_typename = 10, RULE_field = 11, 
		RULE_fieldlist = 12, RULE_variablelist = 13, RULE_typedvariablelist = 14, 
		RULE_customtypedvariablelist = 15, RULE_messageparameterlist = 16, RULE_messageparametersignature = 17, 
		RULE_expressionlist = 18, RULE_expression = 19, RULE_binop = 20, RULE_unop = 21, 
		RULE_assignmentlist = 22, RULE_assignment = 23, RULE_query = 24, RULE_comparator = 25, 
		RULE_arraydeclaration = 26, RULE_arraydefinition = 27, RULE_arrayaccess = 28, 
		RULE_fieldaccess = 29, RULE_lefthandside = 30, RULE_nametagdefstatement = 31, 
		RULE_nametaglistdefstatement = 32, RULE_namedefstatement = 33, RULE_tagdefstatement = 34, 
		RULE_tag = 35, RULE_versionnumber = 36, RULE_packagedefstatement = 37, 
		RULE_importstatement = 38, RULE_typedefstatement = 39, RULE_nodeconnectionstatement = 40, 
		RULE_surrogatedefinitionstatement = 41, RULE_surrogatebody = 42, RULE_functiondefinition = 43, 
		RULE_functionbody = 44, RULE_returnstatement = 45, RULE_functioncall = 46, 
		RULE_structpropertylist = 47, RULE_structdefinition = 48, RULE_messagetypename = 49, 
		RULE_nodetypename = 50, RULE_edgetypename = 51, RULE_messagetypelist = 52, 
		RULE_messagedefinition = 53, RULE_edgetypedefinition = 54, RULE_edgetypebody = 55, 
		RULE_nodetypedefinition = 56, RULE_nodedefinition = 57, RULE_nodebody = 58, 
		RULE_nodebodyinout = 59, RULE_inoutoption = 60, RULE_nodebodyproperty = 61, 
		RULE_nodebodyimage = 62, RULE_nodebodycommand = 63, RULE_nodebodyclientserver = 64, 
		RULE_nodeconstructor = 65, RULE_metadefinition = 66, RULE_loopstatement = 67, 
		RULE_loopsignature = 68, RULE_loopbody = 69, RULE_conditionalstatement = 70, 
		RULE_conditionalelseif = 71, RULE_conditionalelse = 72, RULE_integerrange = 73, 
		RULE_generatename = 74, RULE_interpolationlist = 75, RULE_concatelement = 76, 
		RULE_number = 77, RULE_string = 78, RULE_boolean = 79, RULE_terminator = 80;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"atomictypeortypename", "graphtype", "variable", "typename", "field", 
		"fieldlist", "variablelist", "typedvariablelist", "customtypedvariablelist", 
		"messageparameterlist", "messageparametersignature", "expressionlist", 
		"expression", "binop", "unop", "assignmentlist", "assignment", "query", 
		"comparator", "arraydeclaration", "arraydefinition", "arrayaccess", "fieldaccess", 
		"lefthandside", "nametagdefstatement", "nametaglistdefstatement", "namedefstatement", 
		"tagdefstatement", "tag", "versionnumber", "packagedefstatement", "importstatement", 
		"typedefstatement", "nodeconnectionstatement", "surrogatedefinitionstatement", 
		"surrogatebody", "functiondefinition", "functionbody", "returnstatement", 
		"functioncall", "structpropertylist", "structdefinition", "messagetypename", 
		"nodetypename", "edgetypename", "messagetypelist", "messagedefinition", 
		"edgetypedefinition", "edgetypebody", "nodetypedefinition", "nodedefinition", 
		"nodebody", "nodebodyinout", "inoutoption", "nodebodyproperty", "nodebodyimage", 
		"nodebodycommand", "nodebodyclientserver", "nodeconstructor", "metadefinition", 
		"loopstatement", "loopsignature", "loopbody", "conditionalstatement", 
		"conditionalelseif", "conditionalelse", "integerrange", "generatename", 
		"interpolationlist", "concatelement", "number", "string", "boolean", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", "'message'", 
		"'edgetype'", "'nodetype'", "'node'", "'surrogate'", "'meta'", "'function'", 
		"'typedef'", "'import'", "'include'", "'property'", "'topic'", "'input'", 
		"'output'", "'client'", "'server'", "'publish'", "'subscribe'", "'request'", 
		"'response'", "'pub'", "'sub'", "'req'", "'res'", "'aux'", "'null'", "'true'", 
		"'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'to'", "'while'", 
		"'return'", "'as'", "'imitates'", "'with'", "'latest'", "'name'", "'tag'", 
		"'package'", "'image'", "'queue'", "'var'", "'command'", "'.'", "'*'", 
		"','", "':'", "';'", "'='", "'+'", "'-'", "'/'", "'$'", "'-->'", "'==>'", 
		"'-:'", "'=:'", "'->'", "'=>'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'and'", "'or'", "'not'", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"EDGETYPE", "NODETYPE", "NODE", "SURROGATE", "META", "FUNCTION", "TYPEDEF", 
		"IMPORT", "INCLUDE", "PROPERTY", "TOPIC", "INPUT", "OUTPUT", "CLIENT", 
		"SERVER", "PUBLISH", "SUBSCRIBE", "REQUEST", "RESPONSE", "PUB", "SUB", 
		"REQ", "RES", "AUX", "NULL", "TRUE", "FALSE", "IF", "ELSE", "ELSEIF", 
		"FOR", "IN", "TO", "WHILE", "RETURN", "AS", "IMITATES", "WITH", "LATEST", 
		"NAMEDEF", "TAGDEF", "PACKAGE", "IMAGE", "QUEUE", "VAR", "COMMAND", "DOT", 
		"STAR", "COMMA", "COLON", "SEMI_COLON", "ASSIGN", "ADD", "MINUS", "DIV", 
		"INTERPOLATION", "ARROW", "HEAVYARROW", "QUERYARROW_BEGIN", "QUERYHARROW_BEGIN", 
		"QUERYARROW_END", "QUERYHARROW_END", "EQUAL", "UNEQUAL", "GREATERTHAN", 
		"GREATEREQUALTHAN", "LESSTHAN", "LESSEQUALTHAN", "AND", "OR", "NOT", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"NAME", "WORD", "STRINGLITERAL", "NORMALSTRING", "CHARSTRING", "LONGSTRING", 
		"INTEGER", "FLOATINGPOINTNUMBER", "WHITESPACE", "STMEND", "COMMENT", "LINECOMMENT", 
		"SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SeidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SeidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			set();
			State = 163;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 165;
				statement();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PackageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackagedefstatementContext packagedefstatement() {
			return GetRuleContext<PackagedefstatementContext>(0);
		}
		public PackageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalstatementContext conditionalstatement() {
			return GetRuleContext<ConditionalstatementContext>(0);
		}
		public ConditionalStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SurrogateDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
			return GetRuleContext<SurrogatedefinitionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public SurrogateDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogateDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetaDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NametagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		public NametagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EdgetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypedefinitionContext edgetypedefinition() {
			return GetRuleContext<EdgetypedefinitionContext>(0);
		}
		public EdgetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopstatementContext loopstatement() {
			return GetRuleContext<LoopstatementContext>(0);
		}
		public LoopStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeConnectionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeconnectionstatementContext nodeconnectionstatement() {
			return GetRuleContext<NodeconnectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public NodeConnectionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeConnectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedefstatementContext namedefstatement() {
			return GetRuleContext<NamedefstatementContext>(0);
		}
		public NameDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedefStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedefstatementContext typedefstatement() {
			return GetRuleContext<TypedefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TypedefStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagdefstatementContext tagdefstatement() {
			return GetRuleContext<TagdefstatementContext>(0);
		}
		public TagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraydefinitionContext arraydefinition() {
			return GetRuleContext<ArraydefinitionContext>(0);
		}
		public ArrayDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 173;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 174;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 177;
				variablelist();
				State = 178;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 180;
				variablelist();
				State = 181;
				Match(ASSIGN);
				State = 182;
				expressionlist();
				State = 183;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 185;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 186;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 189;
				variablelist();
				State = 190;
				Match(ASSIGN);
				State = 191;
				expressionlist();
				}
				break;
			case 6:
				_localctx = new ArrayDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 193;
				arraydefinition();
				}
				break;
			case 7:
				_localctx = new StructDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 194;
				structdefinition();
				}
				break;
			case 8:
				_localctx = new MessageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 195;
				messagedefinition();
				}
				break;
			case 9:
				_localctx = new EdgetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 196;
				edgetypedefinition();
				}
				break;
			case 10:
				_localctx = new NodetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 197;
				nodetypedefinition();
				}
				break;
			case 11:
				_localctx = new NodeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 198;
				nodedefinition();
				}
				break;
			case 12:
				_localctx = new MetaDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 199;
				metadefinition();
				}
				break;
			case 13:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 200;
				importstatement();
				}
				break;
			case 14:
				_localctx = new TypedefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 201;
				typedefstatement();
				State = 202;
				terminator();
				}
				break;
			case 15:
				_localctx = new NodeConnectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 204;
				nodeconnectionstatement();
				State = 205;
				terminator();
				}
				break;
			case 16:
				_localctx = new SurrogateDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 207;
				surrogatedefinitionstatement();
				State = 208;
				terminator();
				}
				break;
			case 17:
				_localctx = new NameDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 210;
				namedefstatement();
				}
				break;
			case 18:
				_localctx = new TagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 211;
				tagdefstatement();
				}
				break;
			case 19:
				_localctx = new NametagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 212;
				nametagdefstatement();
				}
				break;
			case 20:
				_localctx = new PackageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 213;
				packagedefstatement();
				}
				break;
			case 21:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 214;
				loopstatement();
				}
				break;
			case 22:
				_localctx = new ConditionalStatementContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 215;
				conditionalstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
				{
				State = 218;
				variable();
				}
			}

			State = 221;
			Match(OPEN_BRACE);
			State = 222;
			set();
			State = 223;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				typename();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 228;
				atomictype();
				State = 229;
				Match(ARRAY);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231;
				complextype();
				State = 232;
				Match(ARRAY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 234;
				typename();
				State = 235;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SeidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SeidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SeidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SeidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeortypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public AtomictypeortypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictypeortypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictypeortypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeortypenameContext atomictypeortypename() {
		AtomictypeortypenameContext _localctx = new AtomictypeortypenameContext(Context, State);
		EnterRule(_localctx, 14, RULE_atomictypeortypename);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				atomictype();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratenameContext generatename() {
			return GetRuleContext<GeneratenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				generatename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			variable();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 256;
				Match(DOT);
				State = 257;
				variable();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			field();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 264;
				Match(COMMA);
				State = 265;
				field();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 26, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			variable();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 272;
				Match(COMMA);
				State = 273;
				variable();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 28, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			atomictype();
			State = 280;
			variable();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 281;
				Match(COMMA);
				State = 282;
				atomictype();
				State = 283;
				variable();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomtypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public CustomtypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customtypedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomtypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomtypedvariablelistContext customtypedvariablelist() {
		CustomtypedvariablelistContext _localctx = new CustomtypedvariablelistContext(Context, State);
		EnterRule(_localctx, 30, RULE_customtypedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 290;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 291;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 294;
			variable();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 295;
				Match(COMMA);
				State = 298;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 296;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 297;
					atomictype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 300;
				variable();
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext[] messageparametersignature() {
			return GetRuleContexts<MessageparametersignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext messageparametersignature(int i) {
			return GetRuleContext<MessageparametersignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessageparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparameterlistContext messageparameterlist() {
		MessageparameterlistContext _localctx = new MessageparameterlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_messageparameterlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			messageparametersignature();
			State = 308;
			variable();
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 309;
				Match(COMMA);
				State = 310;
				messageparametersignature();
				State = 311;
				variable();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparametersignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(SeidlParser.TOPIC, 0); }
		public MessageparametersignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparametersignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparametersignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparametersignatureContext messageparametersignature() {
		MessageparametersignatureContext _localctx = new MessageparametersignatureContext(Context, State);
		EnterRule(_localctx, 34, RULE_messageparametersignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOPIC) {
				{
				State = 318;
				Match(TOPIC);
				}
			}

			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 321;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 322;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			expression();
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 326;
					Match(COMMA);
					State = 327;
					expression();
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SeidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		int _la;
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 336;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 337;
				variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 338;
				field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 339;
				functiondefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 340;
				functioncall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 341;
				importstatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 342;
				assignmentlist();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 343;
				Match(OPEN_BRACE);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
					{
					State = 344;
					assignmentlist();
					}
				}

				State = 347;
				Match(CLOSE_BRACE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 348;
				Match(OPEN_BRACKET);
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
					{
					State = 349;
					variablelist();
					}
				}

				State = 352;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SeidlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SeidlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SeidlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SeidlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SeidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SeidlParser.LESSEQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SeidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SeidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SeidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SeidlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SeidlParser.OR, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 40, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 8290529L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SeidlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SeidlParser.NOT, 0); }
		public UnopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnopContext unop() {
		UnopContext _localctx = new UnopContext(Context, State);
		EnterRule(_localctx, 42, RULE_unop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public AssignmentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentlistContext assignmentlist() {
		AssignmentlistContext _localctx = new AssignmentlistContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignmentlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			assignment();
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 360;
					Match(COMMA);
					State = 361;
					assignment();
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignment);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				variable();
				State = 368;
				Match(ASSIGN);
				State = 369;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				field();
				State = 372;
				Match(ASSIGN);
				State = 373;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(SeidlParser.QUEUE, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 48, RULE_query);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
			case INTERPOLATION:
			case NAME:
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377;
				field();
				State = 378;
				comparator();
				State = 379;
				expression();
				}
				break;
			case QUEUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				Match(QUEUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SeidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(SeidlParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SeidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SeidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SeidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SeidlParser.LESSEQUALTHAN, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			type();
			State = 387;
			Match(ARRAY);
			State = 388;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public ArraydefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydefinitionContext arraydefinition() {
		ArraydefinitionContext _localctx = new ArraydefinitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_arraydefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			atomictype();
			State = 391;
			Match(ARRAY);
			State = 392;
			variablelist();
			State = 393;
			Match(ASSIGN);
			State = 394;
			expressionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayaccess);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396;
				variable();
				State = 397;
				Match(OPEN_BRACKET);
				State = 398;
				expression();
				State = 399;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				@string();
				State = 402;
				Match(OPEN_BRACKET);
				State = 403;
				expression();
				State = 404;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SeidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 58, RULE_fieldaccess);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				variable();
				State = 409;
				Match(DOT);
				State = 410;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				arrayaccess();
				State = 413;
				Match(DOT);
				State = 414;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 60, RULE_lefthandside);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 420;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NametagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public NametagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nametagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NametagdefstatementContext nametagdefstatement() {
		NametagdefstatementContext _localctx = new NametagdefstatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_nametagdefstatement);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				field();
				State = 424;
				Match(COLON);
				State = 425;
				tag();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427;
				field();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NametaglistdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext[] nametagdefstatement() {
			return GetRuleContexts<NametagdefstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement(int i) {
			return GetRuleContext<NametagdefstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public NametaglistdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nametaglistdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametaglistdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NametaglistdefstatementContext nametaglistdefstatement() {
		NametaglistdefstatementContext _localctx = new NametaglistdefstatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_nametaglistdefstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 4440996186113L) != 0)) {
				{
				State = 432;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR:
				case INTERPOLATION:
				case NAME:
				case STRINGLITERAL:
					{
					State = 430;
					nametagdefstatement();
					}
					break;
				case STMEND:
					{
					State = 431;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEDEF() { return GetToken(SeidlParser.NAMEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public NamedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedefstatementContext namedefstatement() {
		NamedefstatementContext _localctx = new NamedefstatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_namedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(NAMEDEF);
			State = 438;
			Match(ASSIGN);
			State = 439;
			field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGDEF() { return GetToken(SeidlParser.TAGDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public TagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagdefstatementContext tagdefstatement() {
		TagdefstatementContext _localctx = new TagdefstatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_tagdefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(TAGDEF);
			State = 442;
			Match(ASSIGN);
			State = 443;
			tag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEST() { return GetToken(SeidlParser.LATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionnumberContext versionnumber() {
			return GetRuleContext<VersionnumberContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 70, RULE_tag);
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LATEST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				Match(LATEST);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446;
				@string();
				}
				break;
			case INTEGER:
			case FLOATINGPOINTNUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				versionnumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionnumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public VersionnumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionnumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionnumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionnumberContext versionnumber() {
		VersionnumberContext _localctx = new VersionnumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_versionnumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			number();
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 451;
				Match(DOT);
				State = 452;
				number();
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagedefstatementContext : ParserRuleContext {
		public NametagdefstatementContext packageidentifier;
		public NametaglistdefstatementContext packagecontent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SeidlParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NametaglistdefstatementContext nametaglistdefstatement() {
			return GetRuleContext<NametaglistdefstatementContext>(0);
		}
		public PackagedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagedefstatementContext packagedefstatement() {
		PackagedefstatementContext _localctx = new PackagedefstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_packagedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(PACKAGE);
			State = 459;
			_localctx.packageidentifier = nametagdefstatement();
			State = 460;
			Match(OPEN_BRACE);
			State = 461;
			_localctx.packagecontent = nametaglistdefstatement();
			State = 462;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SeidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_importstatement);
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 464;
				Match(IMPORT);
				State = 465;
				@string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466;
				Match(IMPORT);
				State = 467;
				field();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 468;
				Match(IMPORT);
				State = 469;
				field();
				State = 470;
				Match(COLON);
				State = 471;
				tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(SeidlParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefstatementContext typedefstatement() {
		TypedefstatementContext _localctx = new TypedefstatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_typedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(TYPEDEF);
			State = 478;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 476;
				atomictype();
				}
				break;
			case NAME:
				{
				State = 477;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 480;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconnectionstatementContext : ParserRuleContext {
		public FieldlistContext sources;
		public FieldlistContext sinks;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SeidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext[] fieldlist() {
			return GetRuleContexts<FieldlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist(int i) {
			return GetRuleContext<FieldlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAVYARROW() { return GetToken(SeidlParser.HEAVYARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_BEGIN() { return GetToken(SeidlParser.QUERYARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_END() { return GetToken(SeidlParser.QUERYARROW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_BEGIN() { return GetToken(SeidlParser.QUERYHARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_END() { return GetToken(SeidlParser.QUERYHARROW_END, 0); }
		public NodeconnectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconnectionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconnectionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconnectionstatementContext nodeconnectionstatement() {
		NodeconnectionstatementContext _localctx = new NodeconnectionstatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_nodeconnectionstatement);
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				_localctx.sources = fieldlist();
				State = 483;
				Match(ARROW);
				State = 484;
				_localctx.sinks = fieldlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				_localctx.sources = fieldlist();
				State = 487;
				Match(HEAVYARROW);
				State = 488;
				_localctx.sinks = fieldlist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490;
				_localctx.sources = fieldlist();
				State = 491;
				Match(QUERYARROW_BEGIN);
				State = 492;
				query();
				State = 493;
				Match(QUERYARROW_END);
				State = 494;
				_localctx.sinks = fieldlist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496;
				_localctx.sources = fieldlist();
				State = 497;
				Match(QUERYHARROW_BEGIN);
				State = 498;
				query();
				State = 499;
				Match(QUERYHARROW_END);
				State = 500;
				_localctx.sinks = fieldlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatedefinitionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SURROGATE() { return GetToken(SeidlParser.SURROGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatebodyContext surrogatebody() {
			return GetRuleContext<SurrogatebodyContext>(0);
		}
		public SurrogatedefinitionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatedefinitionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatedefinitionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
		SurrogatedefinitionstatementContext _localctx = new SurrogatedefinitionstatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_surrogatedefinitionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(SURROGATE);
			State = 505;
			variable();
			State = 506;
			surrogatebody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SeidlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SeidlParser.WITH, i);
		}
		public SurrogatebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatebodyContext surrogatebody() {
		SurrogatebodyContext _localctx = new SurrogatebodyContext(Context, State);
		EnterRule(_localctx, 84, RULE_surrogatebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(OPEN_BRACE);
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==WITH) {
				{
				State = 513;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 509;
					Match(FOR);
					State = 510;
					field();
					}
					break;
				case WITH:
					{
					State = 511;
					Match(WITH);
					State = 512;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 518;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SeidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SeidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SeidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SeidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SeidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			Match(FUNCTION);
			State = 521;
			variable();
			State = 522;
			Match(ASSIGN);
			State = 523;
			Match(OPEN_PAREN);
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 524;
				customtypedvariablelist();
				}
			}

			State = 527;
			Match(CLOSE_PAREN);
			State = 528;
			Match(OPEN_PAREN);
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 529;
				customtypedvariablelist();
				}
			}

			State = 532;
			Match(CLOSE_PAREN);
			State = 533;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SeidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SeidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SeidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SeidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SeidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SeidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SeidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SeidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SeidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SeidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SeidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SeidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(OPEN_BRACE);
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217876368501448708L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				State = 582;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 536;
					statement();
					}
					break;
				case 2:
					{
					State = 537;
					Match(IF);
					State = 538;
					expression();
					State = 539;
					scope();
					State = 546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 540;
						Match(ELSEIF);
						State = 541;
						expression();
						State = 542;
						scope();
						}
						}
						State = 548;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 549;
						Match(ELSE);
						State = 550;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 553;
					Match(WHILE);
					State = 554;
					expression();
					State = 555;
					scope();
					}
					break;
				case 4:
					{
					State = 557;
					Match(FOR);
					State = 559;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						State = 558;
						type();
						}
						break;
					}
					State = 561;
					variablelist();
					State = 562;
					Match(ASSIGN);
					State = 563;
					expressionlist();
					State = 564;
					Match(COMMA);
					State = 565;
					expression();
					State = 568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 566;
						Match(COMMA);
						State = 567;
						expression();
						}
					}

					State = 570;
					scope();
					}
					break;
				case 5:
					{
					State = 572;
					Match(FOR);
					State = 574;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
					case 1:
						{
						State = 573;
						type();
						}
						break;
					}
					State = 576;
					variable();
					State = 577;
					Match(IN);
					State = 578;
					variable();
					State = 579;
					scope();
					}
					break;
				case 6:
					{
					State = 581;
					returnstatement();
					}
					break;
				}
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 587;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SeidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(RETURN);
			State = 591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 590;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 92, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			variable();
			State = 594;
			Match(OPEN_PAREN);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
				{
				State = 595;
				variablelist();
				}
			}

			State = 598;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructpropertylistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext[] atomictypeortypename() {
			return GetRuleContexts<AtomictypeortypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext atomictypeortypename(int i) {
			return GetRuleContext<AtomictypeortypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public StructpropertylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structpropertylist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructpropertylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructpropertylistContext structpropertylist() {
		StructpropertylistContext _localctx = new StructpropertylistContext(Context, State);
		EnterRule(_localctx, 94, RULE_structpropertylist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME || _la==STMEND) {
				{
				State = 624;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
				case NAME:
					{
					State = 600;
					atomictypeortypename();
					State = 601;
					variable();
					State = 620;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 605;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 602;
								terminator();
								}
								}
								State = 607;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 608;
							Match(COMMA);
							State = 612;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 609;
								terminator();
								}
								}
								State = 614;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 615;
							atomictypeortypename();
							State = 616;
							variable();
							}
							} 
						}
						State = 622;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
					}
					}
					break;
				case STMEND:
					{
					State = 623;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructpropertylistContext structpropertylist() {
			return GetRuleContext<StructpropertylistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_structdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(STRUCT);
			State = 630;
			variable();
			State = 631;
			Match(OPEN_BRACE);
			State = 632;
			structpropertylist();
			State = 633;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 98, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 100, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public EdgetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypenameContext edgetypename() {
		EdgetypenameContext _localctx = new EdgetypenameContext(Context, State);
		EnterRule(_localctx, 102, RULE_edgetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 104, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			messagetypename();
			State = 642;
			variable();
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 643;
				Match(COMMA);
				State = 644;
				messagetypename();
				State = 645;
				variable();
				}
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageparameterlistContext messageparameterlist() {
			return GetRuleContext<MessageparameterlistContext>(0);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 106, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(MESSAGE);
			State = 653;
			messagetypename();
			State = 654;
			Match(OPEN_BRACE);
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262204L) != 0) || _la==NAME) {
				{
				State = 655;
				messageparameterlist();
				}
			}

			State = 658;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGETYPE() { return GetToken(SeidlParser.EDGETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypebodyContext edgetypebody() {
			return GetRuleContext<EdgetypebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public EdgetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypedefinitionContext edgetypedefinition() {
		EdgetypedefinitionContext _localctx = new EdgetypedefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_edgetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(EDGETYPE);
			State = 661;
			edgetypename();
			State = 662;
			Match(OPEN_BRACE);
			State = 663;
			edgetypebody();
			State = 664;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST() { return GetTokens(SeidlParser.REQUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST(int i) {
			return GetToken(SeidlParser.REQUEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESPONSE() { return GetTokens(SeidlParser.RESPONSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE(int i) {
			return GetToken(SeidlParser.RESPONSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public EdgetypebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypebodyContext edgetypebody() {
		EdgetypebodyContext _localctx = new EdgetypebodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_edgetypebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REQUEST || _la==RESPONSE || _la==STMEND) {
				{
				State = 671;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REQUEST:
					{
					State = 666;
					Match(REQUEST);
					State = 667;
					messagetypename();
					}
					break;
				case RESPONSE:
					{
					State = 668;
					Match(RESPONSE);
					State = 669;
					messagetypename();
					}
					break;
				case STMEND:
					{
					State = 670;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_nodetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(NODETYPE);
			State = 677;
			nodetypename();
			State = 678;
			Match(OPEN_BRACE);
			State = 679;
			nodebody();
			State = 680;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeconstructorContext nodeconstructor() {
			return GetRuleContext<NodeconstructorContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_nodedefinition);
		try {
			State = 691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 682;
				Match(NODE);
				State = 683;
				typename();
				State = 684;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				Match(NODE);
				State = 687;
				typename();
				State = 688;
				variable();
				State = 689;
				nodeconstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		public NodebodyinoutContext inout;
		public NodebodyclientserverContext clientserver;
		public NodebodypropertyContext property;
		public NodebodyimageContext image;
		public NodebodycommandContext command;
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext[] nodebodyinout() {
			return GetRuleContexts<NodebodyinoutContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext nodebodyinout(int i) {
			return GetRuleContext<NodebodyinoutContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext[] nodebodyclientserver() {
			return GetRuleContexts<NodebodyclientserverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext nodebodyclientserver(int i) {
			return GetRuleContext<NodebodyclientserverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext[] nodebodyproperty() {
			return GetRuleContexts<NodebodypropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext nodebodyproperty(int i) {
			return GetRuleContext<NodebodypropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyimageContext[] nodebodyimage() {
			return GetRuleContexts<NodebodyimageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyimageContext nodebodyimage(int i) {
			return GetRuleContext<NodebodyimageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodycommandContext[] nodebodycommand() {
			return GetRuleContexts<NodebodycommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodycommandContext nodebodycommand(int i) {
			return GetRuleContext<NodebodycommandContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 116, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10133099194744832L) != 0) || _la==STMEND) {
				{
				State = 699;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
				case PUBLISH:
				case SUBSCRIBE:
					{
					State = 693;
					_localctx.inout = nodebodyinout();
					}
					break;
				case CLIENT:
				case SERVER:
					{
					State = 694;
					_localctx.clientserver = nodebodyclientserver();
					}
					break;
				case PROPERTY:
					{
					State = 695;
					_localctx.property = nodebodyproperty();
					}
					break;
				case IMAGE:
					{
					State = 696;
					_localctx.image = nodebodyimage();
					}
					break;
				case COMMAND:
					{
					State = 697;
					_localctx.command = nodebodycommand();
					}
					break;
				case STMEND:
					{
					State = 698;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyinoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SeidlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist() {
			return GetRuleContext<MessagetypelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SeidlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SeidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SeidlParser.SUBSCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InoutoptionContext inoutoption() {
			return GetRuleContext<InoutoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		public NodebodyinoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinout; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinout(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyinoutContext nodebodyinout() {
		NodebodyinoutContext _localctx = new NodebodyinoutContext(Context, State);
		EnterRule(_localctx, 118, RULE_nodebodyinout);
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				Match(INPUT);
				State = 705;
				messagetypelist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706;
				Match(OUTPUT);
				State = 707;
				messagetypelist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 708;
				Match(PUBLISH);
				State = 709;
				messagetypelist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 710;
				Match(SUBSCRIBE);
				State = 711;
				messagetypelist();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 712;
				Match(INPUT);
				State = 713;
				Match(OPEN_BRACKET);
				State = 714;
				inoutoption();
				State = 715;
				Match(CLOSE_BRACKET);
				State = 716;
				messagetypelist();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 718;
				Match(OUTPUT);
				State = 719;
				Match(OPEN_BRACKET);
				State = 720;
				inoutoption();
				State = 721;
				Match(CLOSE_BRACKET);
				State = 722;
				messagetypelist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InoutoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUX() { return GetToken(SeidlParser.AUX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQ() { return GetToken(SeidlParser.REQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES() { return GetToken(SeidlParser.RES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST() { return GetToken(SeidlParser.REQUEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE() { return GetToken(SeidlParser.RESPONSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(SeidlParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SeidlParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SeidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SeidlParser.SUBSCRIBE, 0); }
		public InoutoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inoutoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInoutoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InoutoptionContext inoutoption() {
		InoutoptionContext _localctx = new InoutoptionContext(Context, State);
		EnterRule(_localctx, 120, RULE_inoutoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4286578688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 727;
			Match(COLON);
			State = 728;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodypropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SeidlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodebodypropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyproperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodypropertyContext nodebodyproperty() {
		NodebodypropertyContext _localctx = new NodebodypropertyContext(Context, State);
		EnterRule(_localctx, 122, RULE_nodebodyproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(PROPERTY);
			State = 733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 731;
				type();
				}
				break;
			case 2:
				{
				State = 732;
				typename();
				}
				break;
			}
			State = 735;
			variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyimageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(SeidlParser.IMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		public NodebodyimageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyimage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyimage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyimageContext nodebodyimage() {
		NodebodyimageContext _localctx = new NodebodyimageContext(Context, State);
		EnterRule(_localctx, 124, RULE_nodebodyimage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(IMAGE);
			State = 738;
			nametagdefstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodycommandContext : ParserRuleContext {
		public IToken command;
		public IToken workingdirectory;
		public IToken arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND() { return GetToken(SeidlParser.COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRINGLITERAL() { return GetTokens(SeidlParser.STRINGLITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(SeidlParser.STRINGLITERAL, i);
		}
		public NodebodycommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodycommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodycommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodycommandContext nodebodycommand() {
		NodebodycommandContext _localctx = new NodebodycommandContext(Context, State);
		EnterRule(_localctx, 126, RULE_nodebodycommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(COMMAND);
			State = 741;
			_localctx.command = Match(NAME);
			State = 742;
			_localctx.workingdirectory = Match(STRINGLITERAL);
			State = 743;
			_localctx.arguments = Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyclientserverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(SeidlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(SeidlParser.SERVER, 0); }
		public NodebodyclientserverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyclientserver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyclientserver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyclientserverContext nodebodyclientserver() {
		NodebodyclientserverContext _localctx = new NodebodyclientserverContext(Context, State);
		EnterRule(_localctx, 128, RULE_nodebodyclientserver);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			_la = TokenStream.LA(1);
			if ( !(_la==CLIENT || _la==SERVER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 746;
			edgetypename();
			State = 747;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		public NodeconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconstructorContext nodeconstructor() {
		NodeconstructorContext _localctx = new NodeconstructorContext(Context, State);
		EnterRule(_localctx, 130, RULE_nodeconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(OPEN_PAREN);
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
				{
				State = 750;
				assignmentlist();
				}
			}

			State = 753;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SeidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SeidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 132, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			Match(META);
			State = 756;
			variable();
			State = 757;
			Match(OPEN_BRACE);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 758;
				Match(PROPERTY);
				State = 759;
				type();
				State = 760;
				variablelist();
				State = 761;
				terminator();
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 768;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopsignatureContext loopsignature() {
			return GetRuleContext<LoopsignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopbodyContext loopbody() {
			return GetRuleContext<LoopbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public LoopstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopstatementContext loopstatement() {
		LoopstatementContext _localctx = new LoopstatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_loopstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			loopsignature();
			State = 771;
			Match(OPEN_BRACE);
			State = 772;
			loopbody();
			State = 773;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsignatureContext : ParserRuleContext {
		public VariableContext iterator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SeidlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SeidlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerrangeContext integerrange() {
			return GetRuleContext<IntegerrangeContext>(0);
		}
		public LoopsignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopsignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopsignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopsignatureContext loopsignature() {
		LoopsignatureContext _localctx = new LoopsignatureContext(Context, State);
		EnterRule(_localctx, 136, RULE_loopsignature);
		try {
			State = 785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775;
				Match(FOR);
				State = 776;
				_localctx.iterator = variable();
				State = 777;
				Match(IN);
				State = 778;
				field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 780;
				Match(FOR);
				State = 781;
				_localctx.iterator = variable();
				State = 782;
				Match(IN);
				State = 783;
				integerrange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LoopbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopbodyContext loopbody() {
		LoopbodyContext _localctx = new LoopbodyContext(Context, State);
		EnterRule(_localctx, 138, RULE_loopbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 787;
				statement();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SeidlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalelseifContext[] conditionalelseif() {
			return GetRuleContexts<ConditionalelseifContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalelseifContext conditionalelseif(int i) {
			return GetRuleContext<ConditionalelseifContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalelseContext conditionalelse() {
			return GetRuleContext<ConditionalelseContext>(0);
		}
		public ConditionalstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalstatementContext conditionalstatement() {
		ConditionalstatementContext _localctx = new ConditionalstatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_conditionalstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			Match(IF);
			State = 794;
			expression();
			State = 795;
			Match(OPEN_BRACE);
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 796;
				statement();
				}
				}
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 802;
			Match(CLOSE_BRACE);
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 803;
				conditionalelseif();
				}
				}
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 809;
				conditionalelse();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalelseifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(SeidlParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionalelseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalelseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalelseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalelseifContext conditionalelseif() {
		ConditionalelseifContext _localctx = new ConditionalelseifContext(Context, State);
		EnterRule(_localctx, 142, RULE_conditionalelseif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			Match(ELSEIF);
			State = 813;
			expression();
			State = 814;
			Match(OPEN_BRACE);
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 815;
				statement();
				}
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 821;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalelseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SeidlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionalelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalelse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalelseContext conditionalelse() {
		ConditionalelseContext _localctx = new ConditionalelseContext(Context, State);
		EnterRule(_localctx, 144, RULE_conditionalelse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(ELSE);
			State = 824;
			Match(OPEN_BRACE);
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 825;
				statement();
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 831;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerrangeContext : ParserRuleContext {
		public IToken from;
		public IToken to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SeidlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(SeidlParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(SeidlParser.INTEGER, i);
		}
		public IntegerrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerrangeContext integerrange() {
		IntegerrangeContext _localctx = new IntegerrangeContext(Context, State);
		EnterRule(_localctx, 146, RULE_integerrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			_localctx.from = Match(INTEGER);
			State = 834;
			Match(TO);
			State = 835;
			_localctx.to = Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratenameContext : ParserRuleContext {
		public IToken baseinterpolation;
		public ConcatelementContext baseelement;
		public InterpolationlistContext interpolationelements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SeidlParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext[] concatelement() {
			return GetRuleContexts<ConcatelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext concatelement(int i) {
			return GetRuleContext<ConcatelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationlistContext interpolationlist() {
			return GetRuleContext<InterpolationlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION() { return GetToken(SeidlParser.INTERPOLATION, 0); }
		public GeneratenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratenameContext generatename() {
		GeneratenameContext _localctx = new GeneratenameContext(Context, State);
		EnterRule(_localctx, 148, RULE_generatename);
		int _la;
		try {
			State = 855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 837;
				Match(VAR);
				State = 838;
				Match(OPEN_PAREN);
				State = 839;
				concatelement();
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 840;
					Match(COMMA);
					State = 841;
					concatelement();
					}
					}
					State = 846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 847;
				Match(CLOSE_PAREN);
				}
				break;
			case INTERPOLATION:
			case NAME:
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERPOLATION) {
					{
					State = 849;
					_localctx.baseinterpolation = Match(INTERPOLATION);
					}
				}

				State = 852;
				_localctx.baseelement = concatelement();
				State = 853;
				_localctx.interpolationelements = interpolationlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolationlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERPOLATION() { return GetTokens(SeidlParser.INTERPOLATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION(int i) {
			return GetToken(SeidlParser.INTERPOLATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext[] concatelement() {
			return GetRuleContexts<ConcatelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext concatelement(int i) {
			return GetRuleContext<ConcatelementContext>(i);
		}
		public InterpolationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolationlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolationlistContext interpolationlist() {
		InterpolationlistContext _localctx = new InterpolationlistContext(Context, State);
		EnterRule(_localctx, 150, RULE_interpolationlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 857;
					Match(INTERPOLATION);
					State = 858;
					concatelement();
					}
					} 
				}
				State = 863;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SeidlParser.STRINGLITERAL, 0); }
		public ConcatelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatelement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatelementContext concatelement() {
		ConcatelementContext _localctx = new ConcatelementContext(Context, State);
		EnterRule(_localctx, 152, RULE_concatelement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==STRINGLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SeidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SeidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 154, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SeidlParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 156, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SeidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SeidlParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 158, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SeidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 160, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,97,875,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,1,5,1,167,8,1,10,1,12,1,170,
		9,1,1,2,1,2,1,2,1,2,3,2,176,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,188,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,217,8,2,1,3,3,
		3,220,8,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,3,4,238,8,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,246,8,7,1,8,1,8,1,9,1,9,3,
		9,252,8,9,1,10,1,10,1,11,1,11,1,11,5,11,259,8,11,10,11,12,11,262,9,11,
		1,12,1,12,1,12,5,12,267,8,12,10,12,12,12,270,9,12,1,13,1,13,1,13,5,13,
		275,8,13,10,13,12,13,278,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,286,8,
		14,10,14,12,14,289,9,14,1,15,1,15,3,15,293,8,15,1,15,1,15,1,15,1,15,3,
		15,299,8,15,1,15,1,15,5,15,303,8,15,10,15,12,15,306,9,15,1,16,1,16,1,16,
		1,16,1,16,1,16,5,16,314,8,16,10,16,12,16,317,9,16,1,17,3,17,320,8,17,1,
		17,1,17,3,17,324,8,17,1,18,1,18,1,18,5,18,329,8,18,10,18,12,18,332,9,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,346,8,
		19,1,19,1,19,1,19,3,19,351,8,19,1,19,3,19,354,8,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,22,5,22,363,8,22,10,22,12,22,366,9,22,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,3,23,376,8,23,1,24,1,24,1,24,1,24,1,24,3,24,383,8,
		24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,407,8,28,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,3,29,417,8,29,1,30,1,30,1,30,3,30,422,8,30,1,
		31,1,31,1,31,1,31,1,31,3,31,429,8,31,1,32,1,32,5,32,433,8,32,10,32,12,
		32,436,9,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,3,35,
		449,8,35,1,36,1,36,1,36,5,36,454,8,36,10,36,12,36,457,9,36,1,37,1,37,1,
		37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,474,
		8,38,1,39,1,39,1,39,3,39,479,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
		40,3,40,503,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,5,42,514,
		8,42,10,42,12,42,517,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,526,
		8,43,1,43,1,43,1,43,3,43,531,8,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,5,44,545,8,44,10,44,12,44,548,9,44,1,44,1,44,3,
		44,552,8,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,560,8,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,3,44,569,8,44,1,44,1,44,1,44,1,44,3,44,575,8,44,1,
		44,1,44,1,44,1,44,1,44,1,44,5,44,583,8,44,10,44,12,44,586,9,44,1,44,1,
		44,1,45,1,45,3,45,592,8,45,1,46,1,46,1,46,3,46,597,8,46,1,46,1,46,1,47,
		1,47,1,47,5,47,604,8,47,10,47,12,47,607,9,47,1,47,1,47,5,47,611,8,47,10,
		47,12,47,614,9,47,1,47,1,47,1,47,5,47,619,8,47,10,47,12,47,622,9,47,1,
		47,5,47,625,8,47,10,47,12,47,628,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
		49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,648,8,52,
		10,52,12,52,651,9,52,1,53,1,53,1,53,1,53,3,53,657,8,53,1,53,1,53,1,54,
		1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,5,55,672,8,55,10,55,
		12,55,675,9,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,3,57,692,8,57,1,58,1,58,1,58,1,58,1,58,1,58,5,58,700,
		8,58,10,58,12,58,703,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,725,8,59,1,
		60,1,60,1,60,1,60,1,61,1,61,1,61,3,61,734,8,61,1,61,1,61,1,62,1,62,1,62,
		1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,3,65,752,8,65,1,
		65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,764,8,66,10,66,12,
		66,767,9,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,
		1,68,1,68,1,68,1,68,1,68,3,68,786,8,68,1,69,5,69,789,8,69,10,69,12,69,
		792,9,69,1,70,1,70,1,70,1,70,5,70,798,8,70,10,70,12,70,801,9,70,1,70,1,
		70,5,70,805,8,70,10,70,12,70,808,9,70,1,70,3,70,811,8,70,1,71,1,71,1,71,
		1,71,5,71,817,8,71,10,71,12,71,820,9,71,1,71,1,71,1,72,1,72,1,72,5,72,
		827,8,72,10,72,12,72,830,9,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,
		1,74,1,74,1,74,5,74,843,8,74,10,74,12,74,846,9,74,1,74,1,74,1,74,3,74,
		851,8,74,1,74,1,74,1,74,3,74,856,8,74,1,75,1,75,5,75,860,8,75,10,75,12,
		75,863,9,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,80,0,0,
		81,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,0,10,1,0,2,
		5,3,0,7,7,9,10,12,12,4,0,55,55,60,62,70,70,72,77,2,0,61,61,78,78,1,0,70,
		75,1,0,23,31,1,0,21,22,2,0,85,85,87,87,1,0,91,92,1,0,33,34,921,0,162,1,
		0,0,0,2,168,1,0,0,0,4,216,1,0,0,0,6,219,1,0,0,0,8,237,1,0,0,0,10,239,1,
		0,0,0,12,241,1,0,0,0,14,245,1,0,0,0,16,247,1,0,0,0,18,251,1,0,0,0,20,253,
		1,0,0,0,22,255,1,0,0,0,24,263,1,0,0,0,26,271,1,0,0,0,28,279,1,0,0,0,30,
		292,1,0,0,0,32,307,1,0,0,0,34,319,1,0,0,0,36,325,1,0,0,0,38,353,1,0,0,
		0,40,355,1,0,0,0,42,357,1,0,0,0,44,359,1,0,0,0,46,375,1,0,0,0,48,382,1,
		0,0,0,50,384,1,0,0,0,52,386,1,0,0,0,54,390,1,0,0,0,56,406,1,0,0,0,58,416,
		1,0,0,0,60,421,1,0,0,0,62,428,1,0,0,0,64,434,1,0,0,0,66,437,1,0,0,0,68,
		441,1,0,0,0,70,448,1,0,0,0,72,450,1,0,0,0,74,458,1,0,0,0,76,473,1,0,0,
		0,78,475,1,0,0,0,80,502,1,0,0,0,82,504,1,0,0,0,84,508,1,0,0,0,86,520,1,
		0,0,0,88,535,1,0,0,0,90,589,1,0,0,0,92,593,1,0,0,0,94,626,1,0,0,0,96,629,
		1,0,0,0,98,635,1,0,0,0,100,637,1,0,0,0,102,639,1,0,0,0,104,641,1,0,0,0,
		106,652,1,0,0,0,108,660,1,0,0,0,110,673,1,0,0,0,112,676,1,0,0,0,114,691,
		1,0,0,0,116,701,1,0,0,0,118,724,1,0,0,0,120,726,1,0,0,0,122,730,1,0,0,
		0,124,737,1,0,0,0,126,740,1,0,0,0,128,745,1,0,0,0,130,749,1,0,0,0,132,
		755,1,0,0,0,134,770,1,0,0,0,136,785,1,0,0,0,138,790,1,0,0,0,140,793,1,
		0,0,0,142,812,1,0,0,0,144,823,1,0,0,0,146,833,1,0,0,0,148,855,1,0,0,0,
		150,861,1,0,0,0,152,864,1,0,0,0,154,866,1,0,0,0,156,868,1,0,0,0,158,870,
		1,0,0,0,160,872,1,0,0,0,162,163,3,2,1,0,163,164,5,0,0,1,164,1,1,0,0,0,
		165,167,3,4,2,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,
		1,0,0,0,169,3,1,0,0,0,170,168,1,0,0,0,171,217,3,160,80,0,172,217,3,6,3,
		0,173,176,3,10,5,0,174,176,3,20,10,0,175,173,1,0,0,0,175,174,1,0,0,0,176,
		177,1,0,0,0,177,178,3,26,13,0,178,179,3,160,80,0,179,217,1,0,0,0,180,181,
		3,26,13,0,181,182,5,59,0,0,182,183,3,36,18,0,183,184,3,160,80,0,184,217,
		1,0,0,0,185,188,3,10,5,0,186,188,3,20,10,0,187,185,1,0,0,0,187,186,1,0,
		0,0,188,189,1,0,0,0,189,190,3,26,13,0,190,191,5,59,0,0,191,192,3,36,18,
		0,192,217,1,0,0,0,193,217,3,54,27,0,194,217,3,96,48,0,195,217,3,106,53,
		0,196,217,3,108,54,0,197,217,3,112,56,0,198,217,3,114,57,0,199,217,3,132,
		66,0,200,217,3,76,38,0,201,202,3,78,39,0,202,203,3,160,80,0,203,217,1,
		0,0,0,204,205,3,80,40,0,205,206,3,160,80,0,206,217,1,0,0,0,207,208,3,82,
		41,0,208,209,3,160,80,0,209,217,1,0,0,0,210,217,3,66,33,0,211,217,3,68,
		34,0,212,217,3,62,31,0,213,217,3,74,37,0,214,217,3,134,67,0,215,217,3,
		140,70,0,216,171,1,0,0,0,216,172,1,0,0,0,216,175,1,0,0,0,216,180,1,0,0,
		0,216,187,1,0,0,0,216,193,1,0,0,0,216,194,1,0,0,0,216,195,1,0,0,0,216,
		196,1,0,0,0,216,197,1,0,0,0,216,198,1,0,0,0,216,199,1,0,0,0,216,200,1,
		0,0,0,216,201,1,0,0,0,216,204,1,0,0,0,216,207,1,0,0,0,216,210,1,0,0,0,
		216,211,1,0,0,0,216,212,1,0,0,0,216,213,1,0,0,0,216,214,1,0,0,0,216,215,
		1,0,0,0,217,5,1,0,0,0,218,220,3,18,9,0,219,218,1,0,0,0,219,220,1,0,0,0,
		220,221,1,0,0,0,221,222,5,81,0,0,222,223,3,2,1,0,223,224,5,82,0,0,224,
		7,1,0,0,0,225,238,3,10,5,0,226,238,3,12,6,0,227,238,3,20,10,0,228,229,
		3,10,5,0,229,230,5,1,0,0,230,238,1,0,0,0,231,232,3,12,6,0,232,233,5,1,
		0,0,233,238,1,0,0,0,234,235,3,20,10,0,235,236,5,1,0,0,236,238,1,0,0,0,
		237,225,1,0,0,0,237,226,1,0,0,0,237,227,1,0,0,0,237,228,1,0,0,0,237,231,
		1,0,0,0,237,234,1,0,0,0,238,9,1,0,0,0,239,240,7,0,0,0,240,11,1,0,0,0,241,
		242,5,6,0,0,242,13,1,0,0,0,243,246,3,10,5,0,244,246,3,20,10,0,245,243,
		1,0,0,0,245,244,1,0,0,0,246,15,1,0,0,0,247,248,7,1,0,0,248,17,1,0,0,0,
		249,252,3,148,74,0,250,252,5,85,0,0,251,249,1,0,0,0,251,250,1,0,0,0,252,
		19,1,0,0,0,253,254,5,85,0,0,254,21,1,0,0,0,255,260,3,18,9,0,256,257,5,
		54,0,0,257,259,3,18,9,0,258,256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,
		0,260,261,1,0,0,0,261,23,1,0,0,0,262,260,1,0,0,0,263,268,3,22,11,0,264,
		265,5,56,0,0,265,267,3,22,11,0,266,264,1,0,0,0,267,270,1,0,0,0,268,266,
		1,0,0,0,268,269,1,0,0,0,269,25,1,0,0,0,270,268,1,0,0,0,271,276,3,18,9,
		0,272,273,5,56,0,0,273,275,3,18,9,0,274,272,1,0,0,0,275,278,1,0,0,0,276,
		274,1,0,0,0,276,277,1,0,0,0,277,27,1,0,0,0,278,276,1,0,0,0,279,280,3,10,
		5,0,280,287,3,18,9,0,281,282,5,56,0,0,282,283,3,10,5,0,283,284,3,18,9,
		0,284,286,1,0,0,0,285,281,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,
		288,1,0,0,0,288,29,1,0,0,0,289,287,1,0,0,0,290,293,3,20,10,0,291,293,3,
		10,5,0,292,290,1,0,0,0,292,291,1,0,0,0,293,294,1,0,0,0,294,304,3,18,9,
		0,295,298,5,56,0,0,296,299,3,20,10,0,297,299,3,10,5,0,298,296,1,0,0,0,
		298,297,1,0,0,0,299,300,1,0,0,0,300,301,3,18,9,0,301,303,1,0,0,0,302,295,
		1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,31,1,0,0,0,
		306,304,1,0,0,0,307,308,3,34,17,0,308,315,3,18,9,0,309,310,5,56,0,0,310,
		311,3,34,17,0,311,312,3,18,9,0,312,314,1,0,0,0,313,309,1,0,0,0,314,317,
		1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,33,1,0,0,0,317,315,1,0,0,0,
		318,320,5,18,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,323,1,0,0,0,321,324,
		3,20,10,0,322,324,3,10,5,0,323,321,1,0,0,0,323,322,1,0,0,0,324,35,1,0,
		0,0,325,330,3,38,19,0,326,327,5,56,0,0,327,329,3,38,19,0,328,326,1,0,0,
		0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,37,1,0,0,0,332,330,
		1,0,0,0,333,354,5,32,0,0,334,354,3,158,79,0,335,354,3,154,77,0,336,354,
		3,156,78,0,337,354,3,18,9,0,338,354,3,22,11,0,339,354,3,86,43,0,340,354,
		3,92,46,0,341,354,3,76,38,0,342,354,3,44,22,0,343,345,5,81,0,0,344,346,
		3,44,22,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,354,5,82,
		0,0,348,350,5,83,0,0,349,351,3,26,13,0,350,349,1,0,0,0,350,351,1,0,0,0,
		351,352,1,0,0,0,352,354,5,84,0,0,353,333,1,0,0,0,353,334,1,0,0,0,353,335,
		1,0,0,0,353,336,1,0,0,0,353,337,1,0,0,0,353,338,1,0,0,0,353,339,1,0,0,
		0,353,340,1,0,0,0,353,341,1,0,0,0,353,342,1,0,0,0,353,343,1,0,0,0,353,
		348,1,0,0,0,354,39,1,0,0,0,355,356,7,2,0,0,356,41,1,0,0,0,357,358,7,3,
		0,0,358,43,1,0,0,0,359,364,3,46,23,0,360,361,5,56,0,0,361,363,3,46,23,
		0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,
		45,1,0,0,0,366,364,1,0,0,0,367,368,3,18,9,0,368,369,5,59,0,0,369,370,3,
		38,19,0,370,376,1,0,0,0,371,372,3,22,11,0,372,373,5,59,0,0,373,374,3,38,
		19,0,374,376,1,0,0,0,375,367,1,0,0,0,375,371,1,0,0,0,376,47,1,0,0,0,377,
		378,3,22,11,0,378,379,3,50,25,0,379,380,3,38,19,0,380,383,1,0,0,0,381,
		383,5,51,0,0,382,377,1,0,0,0,382,381,1,0,0,0,383,49,1,0,0,0,384,385,7,
		4,0,0,385,51,1,0,0,0,386,387,3,8,4,0,387,388,5,1,0,0,388,389,3,18,9,0,
		389,53,1,0,0,0,390,391,3,10,5,0,391,392,5,1,0,0,392,393,3,26,13,0,393,
		394,5,59,0,0,394,395,3,36,18,0,395,55,1,0,0,0,396,397,3,18,9,0,397,398,
		5,83,0,0,398,399,3,38,19,0,399,400,5,84,0,0,400,407,1,0,0,0,401,402,3,
		156,78,0,402,403,5,83,0,0,403,404,3,38,19,0,404,405,5,84,0,0,405,407,1,
		0,0,0,406,396,1,0,0,0,406,401,1,0,0,0,407,57,1,0,0,0,408,409,3,18,9,0,
		409,410,5,54,0,0,410,411,3,60,30,0,411,417,1,0,0,0,412,413,3,56,28,0,413,
		414,5,54,0,0,414,415,3,60,30,0,415,417,1,0,0,0,416,408,1,0,0,0,416,412,
		1,0,0,0,417,59,1,0,0,0,418,422,3,18,9,0,419,422,3,58,29,0,420,422,3,56,
		28,0,421,418,1,0,0,0,421,419,1,0,0,0,421,420,1,0,0,0,422,61,1,0,0,0,423,
		424,3,22,11,0,424,425,5,57,0,0,425,426,3,70,35,0,426,429,1,0,0,0,427,429,
		3,22,11,0,428,423,1,0,0,0,428,427,1,0,0,0,429,63,1,0,0,0,430,433,3,62,
		31,0,431,433,3,160,80,0,432,430,1,0,0,0,432,431,1,0,0,0,433,436,1,0,0,
		0,434,432,1,0,0,0,434,435,1,0,0,0,435,65,1,0,0,0,436,434,1,0,0,0,437,438,
		5,47,0,0,438,439,5,59,0,0,439,440,3,22,11,0,440,67,1,0,0,0,441,442,5,48,
		0,0,442,443,5,59,0,0,443,444,3,70,35,0,444,69,1,0,0,0,445,449,5,46,0,0,
		446,449,3,156,78,0,447,449,3,72,36,0,448,445,1,0,0,0,448,446,1,0,0,0,448,
		447,1,0,0,0,449,71,1,0,0,0,450,455,3,154,77,0,451,452,5,54,0,0,452,454,
		3,154,77,0,453,451,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,
		0,0,456,73,1,0,0,0,457,455,1,0,0,0,458,459,5,49,0,0,459,460,3,62,31,0,
		460,461,5,81,0,0,461,462,3,64,32,0,462,463,5,82,0,0,463,75,1,0,0,0,464,
		465,5,15,0,0,465,474,3,156,78,0,466,467,5,15,0,0,467,474,3,22,11,0,468,
		469,5,15,0,0,469,470,3,22,11,0,470,471,5,57,0,0,471,472,3,70,35,0,472,
		474,1,0,0,0,473,464,1,0,0,0,473,466,1,0,0,0,473,468,1,0,0,0,474,77,1,0,
		0,0,475,478,5,14,0,0,476,479,3,10,5,0,477,479,3,20,10,0,478,476,1,0,0,
		0,478,477,1,0,0,0,479,480,1,0,0,0,480,481,3,18,9,0,481,79,1,0,0,0,482,
		483,3,24,12,0,483,484,5,64,0,0,484,485,3,24,12,0,485,503,1,0,0,0,486,487,
		3,24,12,0,487,488,5,65,0,0,488,489,3,24,12,0,489,503,1,0,0,0,490,491,3,
		24,12,0,491,492,5,66,0,0,492,493,3,48,24,0,493,494,5,68,0,0,494,495,3,
		24,12,0,495,503,1,0,0,0,496,497,3,24,12,0,497,498,5,67,0,0,498,499,3,48,
		24,0,499,500,5,69,0,0,500,501,3,24,12,0,501,503,1,0,0,0,502,482,1,0,0,
		0,502,486,1,0,0,0,502,490,1,0,0,0,502,496,1,0,0,0,503,81,1,0,0,0,504,505,
		5,11,0,0,505,506,3,18,9,0,506,507,3,84,42,0,507,83,1,0,0,0,508,515,5,81,
		0,0,509,510,5,38,0,0,510,514,3,22,11,0,511,512,5,45,0,0,512,514,3,22,11,
		0,513,509,1,0,0,0,513,511,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,
		516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,519,5,82,0,0,519,85,1,
		0,0,0,520,521,5,13,0,0,521,522,3,18,9,0,522,523,5,59,0,0,523,525,5,79,
		0,0,524,526,3,30,15,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,
		527,528,5,80,0,0,528,530,5,79,0,0,529,531,3,30,15,0,530,529,1,0,0,0,530,
		531,1,0,0,0,531,532,1,0,0,0,532,533,5,80,0,0,533,534,3,88,44,0,534,87,
		1,0,0,0,535,584,5,81,0,0,536,583,3,4,2,0,537,538,5,35,0,0,538,539,3,38,
		19,0,539,546,3,6,3,0,540,541,5,37,0,0,541,542,3,38,19,0,542,543,3,6,3,
		0,543,545,1,0,0,0,544,540,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,
		547,1,0,0,0,547,551,1,0,0,0,548,546,1,0,0,0,549,550,5,36,0,0,550,552,3,
		6,3,0,551,549,1,0,0,0,551,552,1,0,0,0,552,583,1,0,0,0,553,554,5,41,0,0,
		554,555,3,38,19,0,555,556,3,6,3,0,556,583,1,0,0,0,557,559,5,38,0,0,558,
		560,3,8,4,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,3,
		26,13,0,562,563,5,59,0,0,563,564,3,36,18,0,564,565,5,56,0,0,565,568,3,
		38,19,0,566,567,5,56,0,0,567,569,3,38,19,0,568,566,1,0,0,0,568,569,1,0,
		0,0,569,570,1,0,0,0,570,571,3,6,3,0,571,583,1,0,0,0,572,574,5,38,0,0,573,
		575,3,8,4,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,577,3,
		18,9,0,577,578,5,39,0,0,578,579,3,18,9,0,579,580,3,6,3,0,580,583,1,0,0,
		0,581,583,3,90,45,0,582,536,1,0,0,0,582,537,1,0,0,0,582,553,1,0,0,0,582,
		557,1,0,0,0,582,572,1,0,0,0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,
		0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,584,1,0,0,0,587,588,5,82,0,0,
		588,89,1,0,0,0,589,591,5,42,0,0,590,592,3,26,13,0,591,590,1,0,0,0,591,
		592,1,0,0,0,592,91,1,0,0,0,593,594,3,18,9,0,594,596,5,79,0,0,595,597,3,
		26,13,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,599,5,80,0,
		0,599,93,1,0,0,0,600,601,3,14,7,0,601,620,3,18,9,0,602,604,3,160,80,0,
		603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,608,
		1,0,0,0,607,605,1,0,0,0,608,612,5,56,0,0,609,611,3,160,80,0,610,609,1,
		0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,
		614,612,1,0,0,0,615,616,3,14,7,0,616,617,3,18,9,0,617,619,1,0,0,0,618,
		605,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,625,1,
		0,0,0,622,620,1,0,0,0,623,625,3,160,80,0,624,600,1,0,0,0,624,623,1,0,0,
		0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,95,1,0,0,0,628,626,
		1,0,0,0,629,630,5,6,0,0,630,631,3,18,9,0,631,632,5,81,0,0,632,633,3,94,
		47,0,633,634,5,82,0,0,634,97,1,0,0,0,635,636,5,85,0,0,636,99,1,0,0,0,637,
		638,5,85,0,0,638,101,1,0,0,0,639,640,5,85,0,0,640,103,1,0,0,0,641,642,
		3,98,49,0,642,649,3,18,9,0,643,644,5,56,0,0,644,645,3,98,49,0,645,646,
		3,18,9,0,646,648,1,0,0,0,647,643,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,
		0,649,650,1,0,0,0,650,105,1,0,0,0,651,649,1,0,0,0,652,653,5,7,0,0,653,
		654,3,98,49,0,654,656,5,81,0,0,655,657,3,32,16,0,656,655,1,0,0,0,656,657,
		1,0,0,0,657,658,1,0,0,0,658,659,5,82,0,0,659,107,1,0,0,0,660,661,5,8,0,
		0,661,662,3,102,51,0,662,663,5,81,0,0,663,664,3,110,55,0,664,665,5,82,
		0,0,665,109,1,0,0,0,666,667,5,25,0,0,667,672,3,98,49,0,668,669,5,26,0,
		0,669,672,3,98,49,0,670,672,3,160,80,0,671,666,1,0,0,0,671,668,1,0,0,0,
		671,670,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,111,
		1,0,0,0,675,673,1,0,0,0,676,677,5,9,0,0,677,678,3,100,50,0,678,679,5,81,
		0,0,679,680,3,116,58,0,680,681,5,82,0,0,681,113,1,0,0,0,682,683,5,10,0,
		0,683,684,3,20,10,0,684,685,3,18,9,0,685,692,1,0,0,0,686,687,5,10,0,0,
		687,688,3,20,10,0,688,689,3,18,9,0,689,690,3,130,65,0,690,692,1,0,0,0,
		691,682,1,0,0,0,691,686,1,0,0,0,692,115,1,0,0,0,693,700,3,118,59,0,694,
		700,3,128,64,0,695,700,3,122,61,0,696,700,3,124,62,0,697,700,3,126,63,
		0,698,700,3,160,80,0,699,693,1,0,0,0,699,694,1,0,0,0,699,695,1,0,0,0,699,
		696,1,0,0,0,699,697,1,0,0,0,699,698,1,0,0,0,700,703,1,0,0,0,701,699,1,
		0,0,0,701,702,1,0,0,0,702,117,1,0,0,0,703,701,1,0,0,0,704,705,5,19,0,0,
		705,725,3,104,52,0,706,707,5,20,0,0,707,725,3,104,52,0,708,709,5,23,0,
		0,709,725,3,104,52,0,710,711,5,24,0,0,711,725,3,104,52,0,712,713,5,19,
		0,0,713,714,5,83,0,0,714,715,3,120,60,0,715,716,5,84,0,0,716,717,3,104,
		52,0,717,725,1,0,0,0,718,719,5,20,0,0,719,720,5,83,0,0,720,721,3,120,60,
		0,721,722,5,84,0,0,722,723,3,104,52,0,723,725,1,0,0,0,724,704,1,0,0,0,
		724,706,1,0,0,0,724,708,1,0,0,0,724,710,1,0,0,0,724,712,1,0,0,0,724,718,
		1,0,0,0,725,119,1,0,0,0,726,727,7,5,0,0,727,728,5,57,0,0,728,729,5,85,
		0,0,729,121,1,0,0,0,730,733,5,17,0,0,731,734,3,8,4,0,732,734,3,20,10,0,
		733,731,1,0,0,0,733,732,1,0,0,0,734,735,1,0,0,0,735,736,3,26,13,0,736,
		123,1,0,0,0,737,738,5,50,0,0,738,739,3,62,31,0,739,125,1,0,0,0,740,741,
		5,53,0,0,741,742,5,85,0,0,742,743,5,87,0,0,743,744,5,87,0,0,744,127,1,
		0,0,0,745,746,7,6,0,0,746,747,3,102,51,0,747,748,5,85,0,0,748,129,1,0,
		0,0,749,751,5,79,0,0,750,752,3,44,22,0,751,750,1,0,0,0,751,752,1,0,0,0,
		752,753,1,0,0,0,753,754,5,80,0,0,754,131,1,0,0,0,755,756,5,12,0,0,756,
		757,3,18,9,0,757,765,5,81,0,0,758,759,5,17,0,0,759,760,3,8,4,0,760,761,
		3,26,13,0,761,762,3,160,80,0,762,764,1,0,0,0,763,758,1,0,0,0,764,767,1,
		0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,765,1,0,0,0,
		768,769,5,82,0,0,769,133,1,0,0,0,770,771,3,136,68,0,771,772,5,81,0,0,772,
		773,3,138,69,0,773,774,5,82,0,0,774,135,1,0,0,0,775,776,5,38,0,0,776,777,
		3,18,9,0,777,778,5,39,0,0,778,779,3,22,11,0,779,786,1,0,0,0,780,781,5,
		38,0,0,781,782,3,18,9,0,782,783,5,39,0,0,783,784,3,146,73,0,784,786,1,
		0,0,0,785,775,1,0,0,0,785,780,1,0,0,0,786,137,1,0,0,0,787,789,3,4,2,0,
		788,787,1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,139,
		1,0,0,0,792,790,1,0,0,0,793,794,5,35,0,0,794,795,3,38,19,0,795,799,5,81,
		0,0,796,798,3,4,2,0,797,796,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,
		800,1,0,0,0,800,802,1,0,0,0,801,799,1,0,0,0,802,806,5,82,0,0,803,805,3,
		142,71,0,804,803,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,
		0,807,810,1,0,0,0,808,806,1,0,0,0,809,811,3,144,72,0,810,809,1,0,0,0,810,
		811,1,0,0,0,811,141,1,0,0,0,812,813,5,37,0,0,813,814,3,38,19,0,814,818,
		5,81,0,0,815,817,3,4,2,0,816,815,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,
		0,818,819,1,0,0,0,819,821,1,0,0,0,820,818,1,0,0,0,821,822,5,82,0,0,822,
		143,1,0,0,0,823,824,5,36,0,0,824,828,5,81,0,0,825,827,3,4,2,0,826,825,
		1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,
		0,830,828,1,0,0,0,831,832,5,82,0,0,832,145,1,0,0,0,833,834,5,91,0,0,834,
		835,5,40,0,0,835,836,5,91,0,0,836,147,1,0,0,0,837,838,5,52,0,0,838,839,
		5,79,0,0,839,844,3,152,76,0,840,841,5,56,0,0,841,843,3,152,76,0,842,840,
		1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,847,1,0,0,
		0,846,844,1,0,0,0,847,848,5,80,0,0,848,856,1,0,0,0,849,851,5,63,0,0,850,
		849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,3,152,76,0,853,854,
		3,150,75,0,854,856,1,0,0,0,855,837,1,0,0,0,855,850,1,0,0,0,856,149,1,0,
		0,0,857,858,5,63,0,0,858,860,3,152,76,0,859,857,1,0,0,0,860,863,1,0,0,
		0,861,859,1,0,0,0,861,862,1,0,0,0,862,151,1,0,0,0,863,861,1,0,0,0,864,
		865,7,7,0,0,865,153,1,0,0,0,866,867,7,8,0,0,867,155,1,0,0,0,868,869,5,
		87,0,0,869,157,1,0,0,0,870,871,7,9,0,0,871,159,1,0,0,0,872,873,5,94,0,
		0,873,161,1,0,0,0,76,168,175,187,216,219,237,245,251,260,268,276,287,292,
		298,304,315,319,323,330,345,350,353,364,375,382,406,416,421,428,432,434,
		448,455,473,478,502,513,515,525,530,546,551,559,568,574,582,584,591,596,
		605,612,620,624,626,649,656,671,673,691,699,701,724,733,751,765,785,790,
		799,806,810,818,828,844,850,855,861
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ai.Hgb.Seidl.Processor
