//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/workspaces/spa/Ai.Hgb.Seidl/src/Grammar/SeidlParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ai.Hgb.Seidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SeidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARRAY=1, STRING=2, INT=3, FLOAT=4, BOOL=5, STRUCT=6, MESSAGE=7, EDGETYPE=8, 
		NODETYPE=9, NODE=10, SURROGATE=11, META=12, FUNCTION=13, TYPEDEF=14, IMPORT=15, 
		INCLUDE=16, PROPERTY=17, TOPIC=18, INPUT=19, OUTPUT=20, CLIENT=21, SERVER=22, 
		PUBLISH=23, SUBSCRIBE=24, REQUEST=25, RESPONSE=26, PUB=27, SUB=28, REQ=29, 
		RES=30, AUX=31, NULL=32, TRUE=33, FALSE=34, IF=35, ELSE=36, ELSEIF=37, 
		FOR=38, IN=39, WHILE=40, RETURN=41, AS=42, IMITATES=43, WITH=44, LATEST=45, 
		NAMEDEF=46, TAGDEF=47, PACKAGE=48, IMAGE=49, QUEUE=50, DOT=51, STAR=52, 
		COMMA=53, COLON=54, SEMI_COLON=55, ASSIGN=56, ADD=57, MINUS=58, DIV=59, 
		ARROW=60, HEAVYARROW=61, QUERYARROW_BEGIN=62, QUERYHARROW_BEGIN=63, QUERYARROW_END=64, 
		QUERYHARROW_END=65, EQUAL=66, UNEQUAL=67, GREATERTHAN=68, GREATEREQUALTHAN=69, 
		LESSTHAN=70, LESSEQUALTHAN=71, AND=72, OR=73, OPEN_PAREN=74, CLOSE_PAREN=75, 
		OPEN_BRACE=76, CLOSE_BRACE=77, OPEN_BRACKET=78, CLOSE_BRACKET=79, NAME=80, 
		WORD=81, STRINGLITERAL=82, NORMALSTRING=83, CHARSTRING=84, LONGSTRING=85, 
		INTEGER=86, FLOATINGPOINTNUMBER=87, WHITESPACE=88, STMEND=89, COMMENT=90, 
		LINECOMMENT=91, SHEBANG=92;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_atomictypeortypename = 7, 
		RULE_graphtype = 8, RULE_variable = 9, RULE_typename = 10, RULE_field = 11, 
		RULE_fieldlist = 12, RULE_variablelist = 13, RULE_typedvariablelist = 14, 
		RULE_customtypedvariablelist = 15, RULE_messageparameterlist = 16, RULE_messageparametersignature = 17, 
		RULE_expressionlist = 18, RULE_expression = 19, RULE_assignmentlist = 20, 
		RULE_assignment = 21, RULE_query = 22, RULE_comparator = 23, RULE_arraydeclaration = 24, 
		RULE_arrayaccess = 25, RULE_fieldaccess = 26, RULE_lefthandside = 27, 
		RULE_nametagdefstatement = 28, RULE_nametaglistdefstatement = 29, RULE_namedefstatement = 30, 
		RULE_tagdefstatement = 31, RULE_tag = 32, RULE_versionnumber = 33, RULE_packagedefstatement = 34, 
		RULE_importstatement = 35, RULE_typedefstatement = 36, RULE_nodeconnectionstatement = 37, 
		RULE_surrogatedefinitionstatement = 38, RULE_surrogatebody = 39, RULE_functiondefinition = 40, 
		RULE_functionbody = 41, RULE_returnstatement = 42, RULE_functioncall = 43, 
		RULE_structpropertylist = 44, RULE_structdefinition = 45, RULE_messagetypename = 46, 
		RULE_nodetypename = 47, RULE_edgetypename = 48, RULE_messagetypelist = 49, 
		RULE_messagedefinition = 50, RULE_edgetypedefinition = 51, RULE_edgetypebody = 52, 
		RULE_nodetypedefinition = 53, RULE_nodedefinition = 54, RULE_nodebody = 55, 
		RULE_nodebodyinout = 56, RULE_inoutoption = 57, RULE_nodebodyproperty = 58, 
		RULE_nodebodyimage = 59, RULE_nodebodyclientserver = 60, RULE_nodeconstructor = 61, 
		RULE_metadefinition = 62, RULE_number = 63, RULE_string = 64, RULE_boolean = 65, 
		RULE_terminator = 66;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"atomictypeortypename", "graphtype", "variable", "typename", "field", 
		"fieldlist", "variablelist", "typedvariablelist", "customtypedvariablelist", 
		"messageparameterlist", "messageparametersignature", "expressionlist", 
		"expression", "assignmentlist", "assignment", "query", "comparator", "arraydeclaration", 
		"arrayaccess", "fieldaccess", "lefthandside", "nametagdefstatement", "nametaglistdefstatement", 
		"namedefstatement", "tagdefstatement", "tag", "versionnumber", "packagedefstatement", 
		"importstatement", "typedefstatement", "nodeconnectionstatement", "surrogatedefinitionstatement", 
		"surrogatebody", "functiondefinition", "functionbody", "returnstatement", 
		"functioncall", "structpropertylist", "structdefinition", "messagetypename", 
		"nodetypename", "edgetypename", "messagetypelist", "messagedefinition", 
		"edgetypedefinition", "edgetypebody", "nodetypedefinition", "nodedefinition", 
		"nodebody", "nodebodyinout", "inoutoption", "nodebodyproperty", "nodebodyimage", 
		"nodebodyclientserver", "nodeconstructor", "metadefinition", "number", 
		"string", "boolean", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", "'message'", 
		"'edgetype'", "'nodetype'", "'node'", "'surrogate'", "'meta'", "'function'", 
		"'typedef'", "'import'", "'include'", "'property'", "'topic'", "'input'", 
		"'output'", "'client'", "'server'", "'publish'", "'subscribe'", "'request'", 
		"'response'", "'pub'", "'sub'", "'req'", "'res'", "'aux'", "'null'", "'true'", 
		"'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'while'", 
		"'return'", "'as'", "'imitates'", "'with'", "'latest'", "'name'", "'tag'", 
		"'package'", "'image'", "'queue'", "'.'", "'*'", "','", "':'", "';'", 
		"'='", "'+'", "'-'", "'/'", "'-->'", "'==>'", "'-:'", "'=:'", "'->'", 
		"'=>'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'and'", "'or'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"EDGETYPE", "NODETYPE", "NODE", "SURROGATE", "META", "FUNCTION", "TYPEDEF", 
		"IMPORT", "INCLUDE", "PROPERTY", "TOPIC", "INPUT", "OUTPUT", "CLIENT", 
		"SERVER", "PUBLISH", "SUBSCRIBE", "REQUEST", "RESPONSE", "PUB", "SUB", 
		"REQ", "RES", "AUX", "NULL", "TRUE", "FALSE", "IF", "ELSE", "ELSEIF", 
		"FOR", "IN", "WHILE", "RETURN", "AS", "IMITATES", "WITH", "LATEST", "NAMEDEF", 
		"TAGDEF", "PACKAGE", "IMAGE", "QUEUE", "DOT", "STAR", "COMMA", "COLON", 
		"SEMI_COLON", "ASSIGN", "ADD", "MINUS", "DIV", "ARROW", "HEAVYARROW", 
		"QUERYARROW_BEGIN", "QUERYHARROW_BEGIN", "QUERYARROW_END", "QUERYHARROW_END", 
		"EQUAL", "UNEQUAL", "GREATERTHAN", "GREATEREQUALTHAN", "LESSTHAN", "LESSEQUALTHAN", 
		"AND", "OR", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "NAME", "WORD", "STRINGLITERAL", "NORMALSTRING", 
		"CHARSTRING", "LONGSTRING", "INTEGER", "FLOATINGPOINTNUMBER", "WHITESPACE", 
		"STMEND", "COMMENT", "LINECOMMENT", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SeidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SeidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			set();
			State = 135;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581209300988L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 8209L) != 0)) {
				{
				{
				State = 137;
				statement();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PackageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackagedefstatementContext packagedefstatement() {
			return GetRuleContext<PackagedefstatementContext>(0);
		}
		public PackageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SurrogateDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
			return GetRuleContext<SurrogatedefinitionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public SurrogateDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogateDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetaDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NametagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		public NametagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EdgetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypedefinitionContext edgetypedefinition() {
			return GetRuleContext<EdgetypedefinitionContext>(0);
		}
		public EdgetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeConnectionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeconnectionstatementContext nodeconnectionstatement() {
			return GetRuleContext<NodeconnectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public NodeConnectionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeConnectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedefstatementContext namedefstatement() {
			return GetRuleContext<NamedefstatementContext>(0);
		}
		public NameDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedefStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedefstatementContext typedefstatement() {
			return GetRuleContext<TypedefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TypedefStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagdefstatementContext tagdefstatement() {
			return GetRuleContext<TagdefstatementContext>(0);
		}
		public TagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 145;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 146;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 149;
				variablelist();
				State = 150;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 152;
				variablelist();
				State = 153;
				Match(ASSIGN);
				State = 154;
				expressionlist();
				State = 155;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 159;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 157;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 158;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 161;
				variablelist();
				State = 162;
				Match(ASSIGN);
				State = 163;
				expressionlist();
				}
				break;
			case 6:
				_localctx = new StructDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 165;
				structdefinition();
				}
				break;
			case 7:
				_localctx = new MessageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 166;
				messagedefinition();
				}
				break;
			case 8:
				_localctx = new EdgetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 167;
				edgetypedefinition();
				}
				break;
			case 9:
				_localctx = new NodetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 168;
				nodetypedefinition();
				}
				break;
			case 10:
				_localctx = new NodeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 169;
				nodedefinition();
				}
				break;
			case 11:
				_localctx = new MetaDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 170;
				metadefinition();
				}
				break;
			case 12:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 171;
				importstatement();
				}
				break;
			case 13:
				_localctx = new TypedefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 172;
				typedefstatement();
				State = 173;
				terminator();
				}
				break;
			case 14:
				_localctx = new NodeConnectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 175;
				nodeconnectionstatement();
				State = 176;
				terminator();
				}
				break;
			case 15:
				_localctx = new SurrogateDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 178;
				surrogatedefinitionstatement();
				State = 179;
				terminator();
				}
				break;
			case 16:
				_localctx = new NameDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 181;
				namedefstatement();
				}
				break;
			case 17:
				_localctx = new TagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 182;
				tagdefstatement();
				}
				break;
			case 18:
				_localctx = new NametagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 183;
				nametagdefstatement();
				}
				break;
			case 19:
				_localctx = new PackageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 184;
				packagedefstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 187;
				variable();
				}
			}

			State = 190;
			Match(OPEN_BRACE);
			State = 191;
			set();
			State = 192;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				atomictype();
				State = 197;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 199;
				complextype();
				State = 200;
				Match(ARRAY);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 202;
				typename();
				State = 203;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SeidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SeidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SeidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SeidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeortypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public AtomictypeortypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictypeortypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictypeortypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeortypenameContext atomictypeortypename() {
		AtomictypeortypenameContext _localctx = new AtomictypeortypenameContext(Context, State);
		EnterRule(_localctx, 14, RULE_atomictypeortypename);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				atomictype();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			variable();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 222;
				Match(DOT);
				State = 223;
				variable();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			field();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 230;
				Match(COMMA);
				State = 231;
				field();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 26, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			variable();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 238;
				Match(COMMA);
				State = 239;
				variable();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 28, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			atomictype();
			State = 246;
			variable();
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 247;
				Match(COMMA);
				State = 248;
				atomictype();
				State = 249;
				variable();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomtypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public CustomtypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customtypedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomtypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomtypedvariablelistContext customtypedvariablelist() {
		CustomtypedvariablelistContext _localctx = new CustomtypedvariablelistContext(Context, State);
		EnterRule(_localctx, 30, RULE_customtypedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 256;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 257;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 260;
			variable();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 261;
				Match(COMMA);
				State = 264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 262;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 263;
					atomictype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 266;
				variable();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext[] messageparametersignature() {
			return GetRuleContexts<MessageparametersignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext messageparametersignature(int i) {
			return GetRuleContext<MessageparametersignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessageparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparameterlistContext messageparameterlist() {
		MessageparameterlistContext _localctx = new MessageparameterlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_messageparameterlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			messageparametersignature();
			State = 274;
			variable();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 275;
				Match(COMMA);
				State = 276;
				messageparametersignature();
				State = 277;
				variable();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparametersignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(SeidlParser.TOPIC, 0); }
		public MessageparametersignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparametersignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparametersignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparametersignatureContext messageparametersignature() {
		MessageparametersignatureContext _localctx = new MessageparametersignatureContext(Context, State);
		EnterRule(_localctx, 34, RULE_messageparametersignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOPIC) {
				{
				State = 284;
				Match(TOPIC);
				}
			}

			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 287;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 288;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			expression();
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 292;
					Match(COMMA);
					State = 293;
					expression();
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SeidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		int _la;
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 303;
				variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 304;
				field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 305;
				functiondefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 306;
				functioncall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 307;
				importstatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 308;
				assignmentlist();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 309;
				Match(OPEN_BRACE);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 310;
					assignmentlist();
					}
				}

				State = 313;
				Match(CLOSE_BRACE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 314;
				Match(OPEN_BRACKET);
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 315;
					variablelist();
					}
				}

				State = 318;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public AssignmentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentlistContext assignmentlist() {
		AssignmentlistContext _localctx = new AssignmentlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			assignment();
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 322;
					Match(COMMA);
					State = 323;
					assignment();
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				variable();
				State = 330;
				Match(ASSIGN);
				State = 331;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				field();
				State = 334;
				Match(ASSIGN);
				State = 335;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(SeidlParser.QUEUE, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 44, RULE_query);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				field();
				State = 340;
				comparator();
				State = 341;
				expression();
				}
				break;
			case QUEUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				Match(QUEUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SeidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(SeidlParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SeidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SeidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SeidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SeidlParser.LESSEQUALTHAN, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			type();
			State = 349;
			Match(ARRAY);
			State = 350;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayaccess);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				variable();
				State = 353;
				Match(OPEN_BRACKET);
				State = 354;
				expression();
				State = 355;
				Match(CLOSE_BRACKET);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				@string();
				State = 358;
				Match(OPEN_BRACKET);
				State = 359;
				expression();
				State = 360;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SeidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldaccess);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				variable();
				State = 365;
				Match(DOT);
				State = 366;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				arrayaccess();
				State = 369;
				Match(DOT);
				State = 370;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 54, RULE_lefthandside);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NametagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public NametagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nametagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NametagdefstatementContext nametagdefstatement() {
		NametagdefstatementContext _localctx = new NametagdefstatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_nametagdefstatement);
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				field();
				State = 380;
				Match(COLON);
				State = 381;
				tag();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				field();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NametaglistdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext[] nametagdefstatement() {
			return GetRuleContexts<NametagdefstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement(int i) {
			return GetRuleContext<NametagdefstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public NametaglistdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nametaglistdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametaglistdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NametaglistdefstatementContext nametaglistdefstatement() {
		NametaglistdefstatementContext _localctx = new NametaglistdefstatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_nametaglistdefstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME || _la==STMEND) {
				{
				State = 388;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 386;
					nametagdefstatement();
					}
					break;
				case STMEND:
					{
					State = 387;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEDEF() { return GetToken(SeidlParser.NAMEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public NamedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedefstatementContext namedefstatement() {
		NamedefstatementContext _localctx = new NamedefstatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_namedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(NAMEDEF);
			State = 394;
			Match(ASSIGN);
			State = 395;
			field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGDEF() { return GetToken(SeidlParser.TAGDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public TagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagdefstatementContext tagdefstatement() {
		TagdefstatementContext _localctx = new TagdefstatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_tagdefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(TAGDEF);
			State = 398;
			Match(ASSIGN);
			State = 399;
			tag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEST() { return GetToken(SeidlParser.LATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionnumberContext versionnumber() {
			return GetRuleContext<VersionnumberContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 64, RULE_tag);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LATEST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				Match(LATEST);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402;
				@string();
				}
				break;
			case INTEGER:
			case FLOATINGPOINTNUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 403;
				versionnumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionnumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public VersionnumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionnumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionnumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionnumberContext versionnumber() {
		VersionnumberContext _localctx = new VersionnumberContext(Context, State);
		EnterRule(_localctx, 66, RULE_versionnumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			number();
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 407;
				Match(DOT);
				State = 408;
				number();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagedefstatementContext : ParserRuleContext {
		public NametagdefstatementContext packageidentifier;
		public NametaglistdefstatementContext packagecontent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SeidlParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NametaglistdefstatementContext nametaglistdefstatement() {
			return GetRuleContext<NametaglistdefstatementContext>(0);
		}
		public PackagedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagedefstatementContext packagedefstatement() {
		PackagedefstatementContext _localctx = new PackagedefstatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_packagedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(PACKAGE);
			State = 415;
			_localctx.packageidentifier = nametagdefstatement();
			State = 416;
			Match(OPEN_BRACE);
			State = 417;
			_localctx.packagecontent = nametaglistdefstatement();
			State = 418;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SeidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_importstatement);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				Match(IMPORT);
				State = 421;
				@string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				Match(IMPORT);
				State = 423;
				field();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 424;
				Match(IMPORT);
				State = 425;
				field();
				State = 426;
				Match(COLON);
				State = 427;
				tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(SeidlParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefstatementContext typedefstatement() {
		TypedefstatementContext _localctx = new TypedefstatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_typedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(TYPEDEF);
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 432;
				atomictype();
				}
				break;
			case NAME:
				{
				State = 433;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 436;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconnectionstatementContext : ParserRuleContext {
		public FieldlistContext sources;
		public FieldlistContext sinks;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SeidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext[] fieldlist() {
			return GetRuleContexts<FieldlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist(int i) {
			return GetRuleContext<FieldlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAVYARROW() { return GetToken(SeidlParser.HEAVYARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_BEGIN() { return GetToken(SeidlParser.QUERYARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_END() { return GetToken(SeidlParser.QUERYARROW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_BEGIN() { return GetToken(SeidlParser.QUERYHARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_END() { return GetToken(SeidlParser.QUERYHARROW_END, 0); }
		public NodeconnectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconnectionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconnectionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconnectionstatementContext nodeconnectionstatement() {
		NodeconnectionstatementContext _localctx = new NodeconnectionstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_nodeconnectionstatement);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438;
				_localctx.sources = fieldlist();
				State = 439;
				Match(ARROW);
				State = 440;
				_localctx.sinks = fieldlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442;
				_localctx.sources = fieldlist();
				State = 443;
				Match(HEAVYARROW);
				State = 444;
				_localctx.sinks = fieldlist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446;
				_localctx.sources = fieldlist();
				State = 447;
				Match(QUERYARROW_BEGIN);
				State = 448;
				query();
				State = 449;
				Match(QUERYARROW_END);
				State = 450;
				_localctx.sinks = fieldlist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 452;
				_localctx.sources = fieldlist();
				State = 453;
				Match(QUERYHARROW_BEGIN);
				State = 454;
				query();
				State = 455;
				Match(QUERYHARROW_END);
				State = 456;
				_localctx.sinks = fieldlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatedefinitionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SURROGATE() { return GetToken(SeidlParser.SURROGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatebodyContext surrogatebody() {
			return GetRuleContext<SurrogatebodyContext>(0);
		}
		public SurrogatedefinitionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatedefinitionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatedefinitionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
		SurrogatedefinitionstatementContext _localctx = new SurrogatedefinitionstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_surrogatedefinitionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(SURROGATE);
			State = 461;
			variable();
			State = 462;
			surrogatebody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SeidlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SeidlParser.WITH, i);
		}
		public SurrogatebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatebodyContext surrogatebody() {
		SurrogatebodyContext _localctx = new SurrogatebodyContext(Context, State);
		EnterRule(_localctx, 78, RULE_surrogatebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(OPEN_BRACE);
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==WITH) {
				{
				State = 469;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 465;
					Match(FOR);
					State = 466;
					field();
					}
					break;
				case WITH:
					{
					State = 467;
					Match(WITH);
					State = 468;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SeidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SeidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SeidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SeidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SeidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 80, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(FUNCTION);
			State = 477;
			variable();
			State = 478;
			Match(ASSIGN);
			State = 479;
			Match(OPEN_PAREN);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 480;
				customtypedvariablelist();
				}
			}

			State = 483;
			Match(CLOSE_PAREN);
			State = 484;
			Match(OPEN_PAREN);
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 485;
				customtypedvariablelist();
				}
			}

			State = 488;
			Match(CLOSE_PAREN);
			State = 489;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SeidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SeidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SeidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SeidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SeidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SeidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SeidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SeidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SeidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SeidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SeidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SeidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(OPEN_BRACE);
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 496188981829628L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 8209L) != 0)) {
				{
				State = 538;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 492;
					statement();
					}
					break;
				case 2:
					{
					State = 493;
					Match(IF);
					State = 494;
					expression();
					State = 495;
					scope();
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 496;
						Match(ELSEIF);
						State = 497;
						expression();
						State = 498;
						scope();
						}
						}
						State = 504;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 507;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 505;
						Match(ELSE);
						State = 506;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 509;
					Match(WHILE);
					State = 510;
					expression();
					State = 511;
					scope();
					}
					break;
				case 4:
					{
					State = 513;
					Match(FOR);
					State = 515;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						State = 514;
						type();
						}
						break;
					}
					State = 517;
					variablelist();
					State = 518;
					Match(ASSIGN);
					State = 519;
					expressionlist();
					State = 520;
					Match(COMMA);
					State = 521;
					expression();
					State = 524;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 522;
						Match(COMMA);
						State = 523;
						expression();
						}
					}

					State = 526;
					scope();
					}
					break;
				case 5:
					{
					State = 528;
					Match(FOR);
					State = 530;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						State = 529;
						type();
						}
						break;
					}
					State = 532;
					variable();
					State = 533;
					Match(IN);
					State = 534;
					variable();
					State = 535;
					scope();
					}
					break;
				case 6:
					{
					State = 537;
					returnstatement();
					}
					break;
				}
				}
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 543;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SeidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(RETURN);
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 546;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 86, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			variable();
			State = 550;
			Match(OPEN_PAREN);
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 551;
				variablelist();
				}
			}

			State = 554;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructpropertylistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext[] atomictypeortypename() {
			return GetRuleContexts<AtomictypeortypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext atomictypeortypename(int i) {
			return GetRuleContext<AtomictypeortypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public StructpropertylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structpropertylist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructpropertylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructpropertylistContext structpropertylist() {
		StructpropertylistContext _localctx = new StructpropertylistContext(Context, State);
		EnterRule(_localctx, 88, RULE_structpropertylist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME || _la==STMEND) {
				{
				State = 580;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
				case NAME:
					{
					State = 556;
					atomictypeortypename();
					State = 557;
					variable();
					State = 576;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 561;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 558;
								terminator();
								}
								}
								State = 563;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 564;
							Match(COMMA);
							State = 568;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 565;
								terminator();
								}
								}
								State = 570;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 571;
							atomictypeortypename();
							State = 572;
							variable();
							}
							} 
						}
						State = 578;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
					}
					}
					break;
				case STMEND:
					{
					State = 579;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructpropertylistContext structpropertylist() {
			return GetRuleContext<StructpropertylistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 90, RULE_structdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(STRUCT);
			State = 586;
			variable();
			State = 587;
			Match(OPEN_BRACE);
			State = 588;
			structpropertylist();
			State = 589;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 92, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 94, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public EdgetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypenameContext edgetypename() {
		EdgetypenameContext _localctx = new EdgetypenameContext(Context, State);
		EnterRule(_localctx, 96, RULE_edgetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 98, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			messagetypename();
			State = 598;
			variable();
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 599;
				Match(COMMA);
				State = 600;
				messagetypename();
				State = 601;
				variable();
				}
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageparameterlistContext messageparameterlist() {
			return GetRuleContext<MessageparameterlistContext>(0);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(MESSAGE);
			State = 609;
			messagetypename();
			State = 610;
			Match(OPEN_BRACE);
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262204L) != 0) || _la==NAME) {
				{
				State = 611;
				messageparameterlist();
				}
			}

			State = 614;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGETYPE() { return GetToken(SeidlParser.EDGETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypebodyContext edgetypebody() {
			return GetRuleContext<EdgetypebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public EdgetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypedefinitionContext edgetypedefinition() {
		EdgetypedefinitionContext _localctx = new EdgetypedefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_edgetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(EDGETYPE);
			State = 617;
			edgetypename();
			State = 618;
			Match(OPEN_BRACE);
			State = 619;
			edgetypebody();
			State = 620;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST() { return GetTokens(SeidlParser.REQUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST(int i) {
			return GetToken(SeidlParser.REQUEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESPONSE() { return GetTokens(SeidlParser.RESPONSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE(int i) {
			return GetToken(SeidlParser.RESPONSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public EdgetypebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypebodyContext edgetypebody() {
		EdgetypebodyContext _localctx = new EdgetypebodyContext(Context, State);
		EnterRule(_localctx, 104, RULE_edgetypebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REQUEST || _la==RESPONSE || _la==STMEND) {
				{
				State = 627;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REQUEST:
					{
					State = 622;
					Match(REQUEST);
					State = 623;
					messagetypename();
					}
					break;
				case RESPONSE:
					{
					State = 624;
					Match(RESPONSE);
					State = 625;
					messagetypename();
					}
					break;
				case STMEND:
					{
					State = 626;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 106, RULE_nodetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(NODETYPE);
			State = 633;
			nodetypename();
			State = 634;
			Match(OPEN_BRACE);
			State = 635;
			nodebody();
			State = 636;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeconstructorContext nodeconstructor() {
			return GetRuleContext<NodeconstructorContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_nodedefinition);
		try {
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 638;
				Match(NODE);
				State = 639;
				typename();
				State = 640;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 642;
				Match(NODE);
				State = 643;
				typename();
				State = 644;
				variable();
				State = 645;
				nodeconstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		public NodebodyinoutContext inout;
		public NodebodyclientserverContext clientserver;
		public NodebodypropertyContext property;
		public NodebodyimageContext image;
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext[] nodebodyinout() {
			return GetRuleContexts<NodebodyinoutContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext nodebodyinout(int i) {
			return GetRuleContext<NodebodyinoutContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext[] nodebodyclientserver() {
			return GetRuleContexts<NodebodyclientserverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext nodebodyclientserver(int i) {
			return GetRuleContext<NodebodyclientserverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext[] nodebodyproperty() {
			return GetRuleContexts<NodebodypropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext nodebodyproperty(int i) {
			return GetRuleContext<NodebodypropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyimageContext[] nodebodyimage() {
			return GetRuleContexts<NodebodyimageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyimageContext nodebodyimage(int i) {
			return GetRuleContext<NodebodyimageContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 562949961416704L) != 0) || _la==STMEND) {
				{
				State = 654;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
					{
					State = 649;
					_localctx.inout = nodebodyinout();
					}
					break;
				case CLIENT:
				case SERVER:
					{
					State = 650;
					_localctx.clientserver = nodebodyclientserver();
					}
					break;
				case PROPERTY:
					{
					State = 651;
					_localctx.property = nodebodyproperty();
					}
					break;
				case IMAGE:
					{
					State = 652;
					_localctx.image = nodebodyimage();
					}
					break;
				case STMEND:
					{
					State = 653;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyinoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SeidlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist() {
			return GetRuleContext<MessagetypelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SeidlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InoutoptionContext inoutoption() {
			return GetRuleContext<InoutoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		public NodebodyinoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinout; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinout(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyinoutContext nodebodyinout() {
		NodebodyinoutContext _localctx = new NodebodyinoutContext(Context, State);
		EnterRule(_localctx, 112, RULE_nodebodyinout);
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 659;
				Match(INPUT);
				State = 660;
				messagetypelist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661;
				Match(OUTPUT);
				State = 662;
				messagetypelist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 663;
				Match(INPUT);
				State = 664;
				Match(OPEN_BRACKET);
				State = 665;
				inoutoption();
				State = 666;
				Match(CLOSE_BRACKET);
				State = 667;
				messagetypelist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 669;
				Match(OUTPUT);
				State = 670;
				Match(OPEN_BRACKET);
				State = 671;
				inoutoption();
				State = 672;
				Match(CLOSE_BRACKET);
				State = 673;
				messagetypelist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InoutoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUX() { return GetToken(SeidlParser.AUX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQ() { return GetToken(SeidlParser.REQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES() { return GetToken(SeidlParser.RES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST() { return GetToken(SeidlParser.REQUEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE() { return GetToken(SeidlParser.RESPONSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(SeidlParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SeidlParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SeidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SeidlParser.SUBSCRIBE, 0); }
		public InoutoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inoutoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInoutoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InoutoptionContext inoutoption() {
		InoutoptionContext _localctx = new InoutoptionContext(Context, State);
		EnterRule(_localctx, 114, RULE_inoutoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4286578688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 678;
			Match(COLON);
			State = 679;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodypropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SeidlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodebodypropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyproperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodypropertyContext nodebodyproperty() {
		NodebodypropertyContext _localctx = new NodebodypropertyContext(Context, State);
		EnterRule(_localctx, 116, RULE_nodebodyproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			Match(PROPERTY);
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 682;
				type();
				}
				break;
			case 2:
				{
				State = 683;
				typename();
				}
				break;
			}
			State = 686;
			variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyimageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(SeidlParser.IMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		public NodebodyimageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyimage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyimage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyimageContext nodebodyimage() {
		NodebodyimageContext _localctx = new NodebodyimageContext(Context, State);
		EnterRule(_localctx, 118, RULE_nodebodyimage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(IMAGE);
			State = 689;
			nametagdefstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyclientserverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(SeidlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(SeidlParser.SERVER, 0); }
		public NodebodyclientserverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyclientserver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyclientserver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyclientserverContext nodebodyclientserver() {
		NodebodyclientserverContext _localctx = new NodebodyclientserverContext(Context, State);
		EnterRule(_localctx, 120, RULE_nodebodyclientserver);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			_la = TokenStream.LA(1);
			if ( !(_la==CLIENT || _la==SERVER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 692;
			edgetypename();
			State = 693;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		public NodeconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconstructorContext nodeconstructor() {
		NodeconstructorContext _localctx = new NodeconstructorContext(Context, State);
		EnterRule(_localctx, 122, RULE_nodeconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(OPEN_PAREN);
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 696;
				assignmentlist();
				}
			}

			State = 699;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SeidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SeidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(META);
			State = 702;
			variable();
			State = 703;
			Match(OPEN_BRACE);
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 704;
				Match(PROPERTY);
				State = 705;
				type();
				State = 706;
				variablelist();
				State = 707;
				terminator();
				}
				}
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 714;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SeidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SeidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 126, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SeidlParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 128, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SeidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SeidlParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 130, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SeidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,92,725,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,1,5,1,139,8,1,10,1,12,1,142,
		9,1,1,2,1,2,1,2,1,2,3,2,148,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,160,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,186,8,2,1,3,3,3,189,8,3,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,206,8,4,
		1,5,1,5,1,6,1,6,1,7,1,7,3,7,214,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,11,5,11,225,8,11,10,11,12,11,228,9,11,1,12,1,12,1,12,5,12,233,8,12,10,
		12,12,12,236,9,12,1,13,1,13,1,13,5,13,241,8,13,10,13,12,13,244,9,13,1,
		14,1,14,1,14,1,14,1,14,1,14,5,14,252,8,14,10,14,12,14,255,9,14,1,15,1,
		15,3,15,259,8,15,1,15,1,15,1,15,1,15,3,15,265,8,15,1,15,1,15,5,15,269,
		8,15,10,15,12,15,272,9,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,280,8,16,
		10,16,12,16,283,9,16,1,17,3,17,286,8,17,1,17,1,17,3,17,290,8,17,1,18,1,
		18,1,18,5,18,295,8,18,10,18,12,18,298,9,18,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,312,8,19,1,19,1,19,1,19,3,19,317,
		8,19,1,19,3,19,320,8,19,1,20,1,20,1,20,5,20,325,8,20,10,20,12,20,328,9,
		20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,338,8,21,1,22,1,22,1,22,
		1,22,1,22,3,22,345,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,363,8,25,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,3,26,373,8,26,1,27,1,27,1,27,3,27,378,8,27,1,28,1,28,1,
		28,1,28,1,28,3,28,385,8,28,1,29,1,29,5,29,389,8,29,10,29,12,29,392,9,29,
		1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,3,32,405,8,32,1,
		33,1,33,1,33,5,33,410,8,33,10,33,12,33,413,9,33,1,34,1,34,1,34,1,34,1,
		34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,430,8,35,1,36,
		1,36,1,36,3,36,435,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
		37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,459,
		8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,470,8,39,10,39,
		12,39,473,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,482,8,40,1,40,1,
		40,1,40,3,40,487,8,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,5,41,501,8,41,10,41,12,41,504,9,41,1,41,1,41,3,41,508,8,41,1,
		41,1,41,1,41,1,41,1,41,1,41,3,41,516,8,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,3,41,525,8,41,1,41,1,41,1,41,1,41,3,41,531,8,41,1,41,1,41,1,41,1,
		41,1,41,1,41,5,41,539,8,41,10,41,12,41,542,9,41,1,41,1,41,1,42,1,42,3,
		42,548,8,42,1,43,1,43,1,43,3,43,553,8,43,1,43,1,43,1,44,1,44,1,44,5,44,
		560,8,44,10,44,12,44,563,9,44,1,44,1,44,5,44,567,8,44,10,44,12,44,570,
		9,44,1,44,1,44,1,44,5,44,575,8,44,10,44,12,44,578,9,44,1,44,5,44,581,8,
		44,10,44,12,44,584,9,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,
		47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,5,49,604,8,49,10,49,12,49,607,
		9,49,1,50,1,50,1,50,1,50,3,50,613,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,
		51,1,51,1,52,1,52,1,52,1,52,1,52,5,52,628,8,52,10,52,12,52,631,9,52,1,
		53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,3,54,648,8,54,1,55,1,55,1,55,1,55,1,55,5,55,655,8,55,10,55,12,55,658,
		9,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,3,56,676,8,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,3,58,685,
		8,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,3,61,698,8,
		61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,710,8,62,10,
		62,12,62,713,9,62,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,
		66,0,0,67,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
		130,132,0,7,1,0,2,5,3,0,7,7,9,10,12,12,1,0,66,71,1,0,23,31,1,0,21,22,1,
		0,86,87,1,0,33,34,766,0,134,1,0,0,0,2,140,1,0,0,0,4,185,1,0,0,0,6,188,
		1,0,0,0,8,205,1,0,0,0,10,207,1,0,0,0,12,209,1,0,0,0,14,213,1,0,0,0,16,
		215,1,0,0,0,18,217,1,0,0,0,20,219,1,0,0,0,22,221,1,0,0,0,24,229,1,0,0,
		0,26,237,1,0,0,0,28,245,1,0,0,0,30,258,1,0,0,0,32,273,1,0,0,0,34,285,1,
		0,0,0,36,291,1,0,0,0,38,319,1,0,0,0,40,321,1,0,0,0,42,337,1,0,0,0,44,344,
		1,0,0,0,46,346,1,0,0,0,48,348,1,0,0,0,50,362,1,0,0,0,52,372,1,0,0,0,54,
		377,1,0,0,0,56,384,1,0,0,0,58,390,1,0,0,0,60,393,1,0,0,0,62,397,1,0,0,
		0,64,404,1,0,0,0,66,406,1,0,0,0,68,414,1,0,0,0,70,429,1,0,0,0,72,431,1,
		0,0,0,74,458,1,0,0,0,76,460,1,0,0,0,78,464,1,0,0,0,80,476,1,0,0,0,82,491,
		1,0,0,0,84,545,1,0,0,0,86,549,1,0,0,0,88,582,1,0,0,0,90,585,1,0,0,0,92,
		591,1,0,0,0,94,593,1,0,0,0,96,595,1,0,0,0,98,597,1,0,0,0,100,608,1,0,0,
		0,102,616,1,0,0,0,104,629,1,0,0,0,106,632,1,0,0,0,108,647,1,0,0,0,110,
		656,1,0,0,0,112,675,1,0,0,0,114,677,1,0,0,0,116,681,1,0,0,0,118,688,1,
		0,0,0,120,691,1,0,0,0,122,695,1,0,0,0,124,701,1,0,0,0,126,716,1,0,0,0,
		128,718,1,0,0,0,130,720,1,0,0,0,132,722,1,0,0,0,134,135,3,2,1,0,135,136,
		5,0,0,1,136,1,1,0,0,0,137,139,3,4,2,0,138,137,1,0,0,0,139,142,1,0,0,0,
		140,138,1,0,0,0,140,141,1,0,0,0,141,3,1,0,0,0,142,140,1,0,0,0,143,186,
		3,132,66,0,144,186,3,6,3,0,145,148,3,10,5,0,146,148,3,20,10,0,147,145,
		1,0,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,150,3,26,13,0,150,151,3,132,
		66,0,151,186,1,0,0,0,152,153,3,26,13,0,153,154,5,56,0,0,154,155,3,36,18,
		0,155,156,3,132,66,0,156,186,1,0,0,0,157,160,3,10,5,0,158,160,3,20,10,
		0,159,157,1,0,0,0,159,158,1,0,0,0,160,161,1,0,0,0,161,162,3,26,13,0,162,
		163,5,56,0,0,163,164,3,36,18,0,164,186,1,0,0,0,165,186,3,90,45,0,166,186,
		3,100,50,0,167,186,3,102,51,0,168,186,3,106,53,0,169,186,3,108,54,0,170,
		186,3,124,62,0,171,186,3,70,35,0,172,173,3,72,36,0,173,174,3,132,66,0,
		174,186,1,0,0,0,175,176,3,74,37,0,176,177,3,132,66,0,177,186,1,0,0,0,178,
		179,3,76,38,0,179,180,3,132,66,0,180,186,1,0,0,0,181,186,3,60,30,0,182,
		186,3,62,31,0,183,186,3,56,28,0,184,186,3,68,34,0,185,143,1,0,0,0,185,
		144,1,0,0,0,185,147,1,0,0,0,185,152,1,0,0,0,185,159,1,0,0,0,185,165,1,
		0,0,0,185,166,1,0,0,0,185,167,1,0,0,0,185,168,1,0,0,0,185,169,1,0,0,0,
		185,170,1,0,0,0,185,171,1,0,0,0,185,172,1,0,0,0,185,175,1,0,0,0,185,178,
		1,0,0,0,185,181,1,0,0,0,185,182,1,0,0,0,185,183,1,0,0,0,185,184,1,0,0,
		0,186,5,1,0,0,0,187,189,3,18,9,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,
		1,0,0,0,190,191,5,76,0,0,191,192,3,2,1,0,192,193,5,77,0,0,193,7,1,0,0,
		0,194,206,3,10,5,0,195,206,3,12,6,0,196,197,3,10,5,0,197,198,5,1,0,0,198,
		206,1,0,0,0,199,200,3,12,6,0,200,201,5,1,0,0,201,206,1,0,0,0,202,203,3,
		20,10,0,203,204,5,1,0,0,204,206,1,0,0,0,205,194,1,0,0,0,205,195,1,0,0,
		0,205,196,1,0,0,0,205,199,1,0,0,0,205,202,1,0,0,0,206,9,1,0,0,0,207,208,
		7,0,0,0,208,11,1,0,0,0,209,210,5,6,0,0,210,13,1,0,0,0,211,214,3,10,5,0,
		212,214,3,20,10,0,213,211,1,0,0,0,213,212,1,0,0,0,214,15,1,0,0,0,215,216,
		7,1,0,0,216,17,1,0,0,0,217,218,5,80,0,0,218,19,1,0,0,0,219,220,5,80,0,
		0,220,21,1,0,0,0,221,226,3,18,9,0,222,223,5,51,0,0,223,225,3,18,9,0,224,
		222,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,23,1,0,
		0,0,228,226,1,0,0,0,229,234,3,22,11,0,230,231,5,53,0,0,231,233,3,22,11,
		0,232,230,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,
		25,1,0,0,0,236,234,1,0,0,0,237,242,3,18,9,0,238,239,5,53,0,0,239,241,3,
		18,9,0,240,238,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,
		243,27,1,0,0,0,244,242,1,0,0,0,245,246,3,10,5,0,246,253,3,18,9,0,247,248,
		5,53,0,0,248,249,3,10,5,0,249,250,3,18,9,0,250,252,1,0,0,0,251,247,1,0,
		0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,29,1,0,0,0,255,
		253,1,0,0,0,256,259,3,20,10,0,257,259,3,10,5,0,258,256,1,0,0,0,258,257,
		1,0,0,0,259,260,1,0,0,0,260,270,3,18,9,0,261,264,5,53,0,0,262,265,3,20,
		10,0,263,265,3,10,5,0,264,262,1,0,0,0,264,263,1,0,0,0,265,266,1,0,0,0,
		266,267,3,18,9,0,267,269,1,0,0,0,268,261,1,0,0,0,269,272,1,0,0,0,270,268,
		1,0,0,0,270,271,1,0,0,0,271,31,1,0,0,0,272,270,1,0,0,0,273,274,3,34,17,
		0,274,281,3,18,9,0,275,276,5,53,0,0,276,277,3,34,17,0,277,278,3,18,9,0,
		278,280,1,0,0,0,279,275,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,
		1,0,0,0,282,33,1,0,0,0,283,281,1,0,0,0,284,286,5,18,0,0,285,284,1,0,0,
		0,285,286,1,0,0,0,286,289,1,0,0,0,287,290,3,20,10,0,288,290,3,10,5,0,289,
		287,1,0,0,0,289,288,1,0,0,0,290,35,1,0,0,0,291,296,3,38,19,0,292,293,5,
		53,0,0,293,295,3,38,19,0,294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,
		0,296,297,1,0,0,0,297,37,1,0,0,0,298,296,1,0,0,0,299,320,5,32,0,0,300,
		320,3,130,65,0,301,320,3,126,63,0,302,320,3,128,64,0,303,320,3,18,9,0,
		304,320,3,22,11,0,305,320,3,80,40,0,306,320,3,86,43,0,307,320,3,70,35,
		0,308,320,3,40,20,0,309,311,5,76,0,0,310,312,3,40,20,0,311,310,1,0,0,0,
		311,312,1,0,0,0,312,313,1,0,0,0,313,320,5,77,0,0,314,316,5,78,0,0,315,
		317,3,26,13,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,320,
		5,79,0,0,319,299,1,0,0,0,319,300,1,0,0,0,319,301,1,0,0,0,319,302,1,0,0,
		0,319,303,1,0,0,0,319,304,1,0,0,0,319,305,1,0,0,0,319,306,1,0,0,0,319,
		307,1,0,0,0,319,308,1,0,0,0,319,309,1,0,0,0,319,314,1,0,0,0,320,39,1,0,
		0,0,321,326,3,42,21,0,322,323,5,53,0,0,323,325,3,42,21,0,324,322,1,0,0,
		0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,41,1,0,0,0,328,326,
		1,0,0,0,329,330,3,18,9,0,330,331,5,56,0,0,331,332,3,38,19,0,332,338,1,
		0,0,0,333,334,3,22,11,0,334,335,5,56,0,0,335,336,3,38,19,0,336,338,1,0,
		0,0,337,329,1,0,0,0,337,333,1,0,0,0,338,43,1,0,0,0,339,340,3,22,11,0,340,
		341,3,46,23,0,341,342,3,38,19,0,342,345,1,0,0,0,343,345,5,50,0,0,344,339,
		1,0,0,0,344,343,1,0,0,0,345,45,1,0,0,0,346,347,7,2,0,0,347,47,1,0,0,0,
		348,349,3,8,4,0,349,350,5,1,0,0,350,351,3,18,9,0,351,49,1,0,0,0,352,353,
		3,18,9,0,353,354,5,78,0,0,354,355,3,38,19,0,355,356,5,79,0,0,356,363,1,
		0,0,0,357,358,3,128,64,0,358,359,5,78,0,0,359,360,3,38,19,0,360,361,5,
		79,0,0,361,363,1,0,0,0,362,352,1,0,0,0,362,357,1,0,0,0,363,51,1,0,0,0,
		364,365,3,18,9,0,365,366,5,51,0,0,366,367,3,54,27,0,367,373,1,0,0,0,368,
		369,3,50,25,0,369,370,5,51,0,0,370,371,3,54,27,0,371,373,1,0,0,0,372,364,
		1,0,0,0,372,368,1,0,0,0,373,53,1,0,0,0,374,378,3,18,9,0,375,378,3,52,26,
		0,376,378,3,50,25,0,377,374,1,0,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,
		55,1,0,0,0,379,380,3,22,11,0,380,381,5,54,0,0,381,382,3,64,32,0,382,385,
		1,0,0,0,383,385,3,22,11,0,384,379,1,0,0,0,384,383,1,0,0,0,385,57,1,0,0,
		0,386,389,3,56,28,0,387,389,3,132,66,0,388,386,1,0,0,0,388,387,1,0,0,0,
		389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,59,1,0,0,0,392,390,
		1,0,0,0,393,394,5,46,0,0,394,395,5,56,0,0,395,396,3,22,11,0,396,61,1,0,
		0,0,397,398,5,47,0,0,398,399,5,56,0,0,399,400,3,64,32,0,400,63,1,0,0,0,
		401,405,5,45,0,0,402,405,3,128,64,0,403,405,3,66,33,0,404,401,1,0,0,0,
		404,402,1,0,0,0,404,403,1,0,0,0,405,65,1,0,0,0,406,411,3,126,63,0,407,
		408,5,51,0,0,408,410,3,126,63,0,409,407,1,0,0,0,410,413,1,0,0,0,411,409,
		1,0,0,0,411,412,1,0,0,0,412,67,1,0,0,0,413,411,1,0,0,0,414,415,5,48,0,
		0,415,416,3,56,28,0,416,417,5,76,0,0,417,418,3,58,29,0,418,419,5,77,0,
		0,419,69,1,0,0,0,420,421,5,15,0,0,421,430,3,128,64,0,422,423,5,15,0,0,
		423,430,3,22,11,0,424,425,5,15,0,0,425,426,3,22,11,0,426,427,5,54,0,0,
		427,428,3,64,32,0,428,430,1,0,0,0,429,420,1,0,0,0,429,422,1,0,0,0,429,
		424,1,0,0,0,430,71,1,0,0,0,431,434,5,14,0,0,432,435,3,10,5,0,433,435,3,
		20,10,0,434,432,1,0,0,0,434,433,1,0,0,0,435,436,1,0,0,0,436,437,3,18,9,
		0,437,73,1,0,0,0,438,439,3,24,12,0,439,440,5,60,0,0,440,441,3,24,12,0,
		441,459,1,0,0,0,442,443,3,24,12,0,443,444,5,61,0,0,444,445,3,24,12,0,445,
		459,1,0,0,0,446,447,3,24,12,0,447,448,5,62,0,0,448,449,3,44,22,0,449,450,
		5,64,0,0,450,451,3,24,12,0,451,459,1,0,0,0,452,453,3,24,12,0,453,454,5,
		63,0,0,454,455,3,44,22,0,455,456,5,65,0,0,456,457,3,24,12,0,457,459,1,
		0,0,0,458,438,1,0,0,0,458,442,1,0,0,0,458,446,1,0,0,0,458,452,1,0,0,0,
		459,75,1,0,0,0,460,461,5,11,0,0,461,462,3,18,9,0,462,463,3,78,39,0,463,
		77,1,0,0,0,464,471,5,76,0,0,465,466,5,38,0,0,466,470,3,22,11,0,467,468,
		5,44,0,0,468,470,3,22,11,0,469,465,1,0,0,0,469,467,1,0,0,0,470,473,1,0,
		0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,
		475,5,77,0,0,475,79,1,0,0,0,476,477,5,13,0,0,477,478,3,18,9,0,478,479,
		5,56,0,0,479,481,5,74,0,0,480,482,3,30,15,0,481,480,1,0,0,0,481,482,1,
		0,0,0,482,483,1,0,0,0,483,484,5,75,0,0,484,486,5,74,0,0,485,487,3,30,15,
		0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,75,0,0,489,
		490,3,82,41,0,490,81,1,0,0,0,491,540,5,76,0,0,492,539,3,4,2,0,493,494,
		5,35,0,0,494,495,3,38,19,0,495,502,3,6,3,0,496,497,5,37,0,0,497,498,3,
		38,19,0,498,499,3,6,3,0,499,501,1,0,0,0,500,496,1,0,0,0,501,504,1,0,0,
		0,502,500,1,0,0,0,502,503,1,0,0,0,503,507,1,0,0,0,504,502,1,0,0,0,505,
		506,5,36,0,0,506,508,3,6,3,0,507,505,1,0,0,0,507,508,1,0,0,0,508,539,1,
		0,0,0,509,510,5,40,0,0,510,511,3,38,19,0,511,512,3,6,3,0,512,539,1,0,0,
		0,513,515,5,38,0,0,514,516,3,8,4,0,515,514,1,0,0,0,515,516,1,0,0,0,516,
		517,1,0,0,0,517,518,3,26,13,0,518,519,5,56,0,0,519,520,3,36,18,0,520,521,
		5,53,0,0,521,524,3,38,19,0,522,523,5,53,0,0,523,525,3,38,19,0,524,522,
		1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,3,6,3,0,527,539,1,0,0,
		0,528,530,5,38,0,0,529,531,3,8,4,0,530,529,1,0,0,0,530,531,1,0,0,0,531,
		532,1,0,0,0,532,533,3,18,9,0,533,534,5,39,0,0,534,535,3,18,9,0,535,536,
		3,6,3,0,536,539,1,0,0,0,537,539,3,84,42,0,538,492,1,0,0,0,538,493,1,0,
		0,0,538,509,1,0,0,0,538,513,1,0,0,0,538,528,1,0,0,0,538,537,1,0,0,0,539,
		542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,540,1,
		0,0,0,543,544,5,77,0,0,544,83,1,0,0,0,545,547,5,41,0,0,546,548,3,26,13,
		0,547,546,1,0,0,0,547,548,1,0,0,0,548,85,1,0,0,0,549,550,3,18,9,0,550,
		552,5,74,0,0,551,553,3,26,13,0,552,551,1,0,0,0,552,553,1,0,0,0,553,554,
		1,0,0,0,554,555,5,75,0,0,555,87,1,0,0,0,556,557,3,14,7,0,557,576,3,18,
		9,0,558,560,3,132,66,0,559,558,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,
		561,562,1,0,0,0,562,564,1,0,0,0,563,561,1,0,0,0,564,568,5,53,0,0,565,567,
		3,132,66,0,566,565,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,569,1,0,
		0,0,569,571,1,0,0,0,570,568,1,0,0,0,571,572,3,14,7,0,572,573,3,18,9,0,
		573,575,1,0,0,0,574,561,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,
		1,0,0,0,577,581,1,0,0,0,578,576,1,0,0,0,579,581,3,132,66,0,580,556,1,0,
		0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
		89,1,0,0,0,584,582,1,0,0,0,585,586,5,6,0,0,586,587,3,18,9,0,587,588,5,
		76,0,0,588,589,3,88,44,0,589,590,5,77,0,0,590,91,1,0,0,0,591,592,5,80,
		0,0,592,93,1,0,0,0,593,594,5,80,0,0,594,95,1,0,0,0,595,596,5,80,0,0,596,
		97,1,0,0,0,597,598,3,92,46,0,598,605,3,18,9,0,599,600,5,53,0,0,600,601,
		3,92,46,0,601,602,3,18,9,0,602,604,1,0,0,0,603,599,1,0,0,0,604,607,1,0,
		0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,99,1,0,0,0,607,605,1,0,0,0,608,
		609,5,7,0,0,609,610,3,92,46,0,610,612,5,76,0,0,611,613,3,32,16,0,612,611,
		1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,5,77,0,0,615,101,1,0,0,
		0,616,617,5,8,0,0,617,618,3,96,48,0,618,619,5,76,0,0,619,620,3,104,52,
		0,620,621,5,77,0,0,621,103,1,0,0,0,622,623,5,25,0,0,623,628,3,92,46,0,
		624,625,5,26,0,0,625,628,3,92,46,0,626,628,3,132,66,0,627,622,1,0,0,0,
		627,624,1,0,0,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,
		1,0,0,0,630,105,1,0,0,0,631,629,1,0,0,0,632,633,5,9,0,0,633,634,3,94,47,
		0,634,635,5,76,0,0,635,636,3,110,55,0,636,637,5,77,0,0,637,107,1,0,0,0,
		638,639,5,10,0,0,639,640,3,20,10,0,640,641,3,18,9,0,641,648,1,0,0,0,642,
		643,5,10,0,0,643,644,3,20,10,0,644,645,3,18,9,0,645,646,3,122,61,0,646,
		648,1,0,0,0,647,638,1,0,0,0,647,642,1,0,0,0,648,109,1,0,0,0,649,655,3,
		112,56,0,650,655,3,120,60,0,651,655,3,116,58,0,652,655,3,118,59,0,653,
		655,3,132,66,0,654,649,1,0,0,0,654,650,1,0,0,0,654,651,1,0,0,0,654,652,
		1,0,0,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,
		0,657,111,1,0,0,0,658,656,1,0,0,0,659,660,5,19,0,0,660,676,3,98,49,0,661,
		662,5,20,0,0,662,676,3,98,49,0,663,664,5,19,0,0,664,665,5,78,0,0,665,666,
		3,114,57,0,666,667,5,79,0,0,667,668,3,98,49,0,668,676,1,0,0,0,669,670,
		5,20,0,0,670,671,5,78,0,0,671,672,3,114,57,0,672,673,5,79,0,0,673,674,
		3,98,49,0,674,676,1,0,0,0,675,659,1,0,0,0,675,661,1,0,0,0,675,663,1,0,
		0,0,675,669,1,0,0,0,676,113,1,0,0,0,677,678,7,3,0,0,678,679,5,54,0,0,679,
		680,5,80,0,0,680,115,1,0,0,0,681,684,5,17,0,0,682,685,3,8,4,0,683,685,
		3,20,10,0,684,682,1,0,0,0,684,683,1,0,0,0,685,686,1,0,0,0,686,687,3,26,
		13,0,687,117,1,0,0,0,688,689,5,49,0,0,689,690,3,56,28,0,690,119,1,0,0,
		0,691,692,7,4,0,0,692,693,3,96,48,0,693,694,5,80,0,0,694,121,1,0,0,0,695,
		697,5,74,0,0,696,698,3,40,20,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,
		1,0,0,0,699,700,5,75,0,0,700,123,1,0,0,0,701,702,5,12,0,0,702,703,3,18,
		9,0,703,711,5,76,0,0,704,705,5,17,0,0,705,706,3,8,4,0,706,707,3,26,13,
		0,707,708,3,132,66,0,708,710,1,0,0,0,709,704,1,0,0,0,710,713,1,0,0,0,711,
		709,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,711,1,0,0,0,714,715,5,
		77,0,0,715,125,1,0,0,0,716,717,7,5,0,0,717,127,1,0,0,0,718,719,5,82,0,
		0,719,129,1,0,0,0,720,721,7,6,0,0,721,131,1,0,0,0,722,723,5,89,0,0,723,
		133,1,0,0,0,64,140,147,159,185,188,205,213,226,234,242,253,258,264,270,
		281,285,289,296,311,316,319,326,337,344,362,372,377,384,388,390,404,411,
		429,434,458,469,471,481,486,502,507,515,524,530,538,540,547,552,561,568,
		576,580,582,605,612,627,629,647,654,656,675,684,697,711
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ai.Hgb.Seidl.Processor
