//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/workspaces/spa/Ai.Hgb.Seidl/src/Grammar/SeidlParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ai.Hgb.Seidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SeidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARRAY=1, STRING=2, INT=3, FLOAT=4, BOOL=5, STRUCT=6, MESSAGE=7, EDGETYPE=8, 
		NODETYPE=9, NODE=10, SURROGATE=11, META=12, FUNCTION=13, TYPEDEF=14, IMPORT=15, 
		INCLUDE=16, PROPERTY=17, TOPIC=18, INPUT=19, OUTPUT=20, CLIENT=21, SERVER=22, 
		PUBLISH=23, SUBSCRIBE=24, REQUEST=25, RESPONSE=26, PUB=27, SUB=28, REQ=29, 
		RES=30, AUX=31, NULL=32, TRUE=33, FALSE=34, IF=35, ELSE=36, ELSEIF=37, 
		FOR=38, IN=39, TO=40, WHILE=41, RETURN=42, AS=43, IMITATES=44, WITH=45, 
		LATEST=46, NAMEDEF=47, TAGDEF=48, PACKAGE=49, IMAGE=50, QUEUE=51, VAR=52, 
		COMMAND=53, DOT=54, STAR=55, COMMA=56, COLON=57, SEMI_COLON=58, ASSIGN=59, 
		ADD=60, MINUS=61, DIV=62, INTERPOLATION=63, ARROW=64, HEAVYARROW=65, QUERYARROW_BEGIN=66, 
		QUERYHARROW_BEGIN=67, QUERYARROW_END=68, QUERYHARROW_END=69, EQUAL=70, 
		UNEQUAL=71, GREATERTHAN=72, GREATEREQUALTHAN=73, LESSTHAN=74, LESSEQUALTHAN=75, 
		AND=76, OR=77, NOT=78, OPEN_PAREN=79, CLOSE_PAREN=80, OPEN_BRACE=81, CLOSE_BRACE=82, 
		OPEN_BRACKET=83, CLOSE_BRACKET=84, NAME=85, WORD=86, STRINGLITERAL=87, 
		NORMALSTRING=88, CHARSTRING=89, LONGSTRING=90, INTEGER=91, FLOATINGPOINTNUMBER=92, 
		WHITESPACE=93, STMEND=94, COMMENT=95, LINECOMMENT=96, SHEBANG=97;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_atomictypeortypename = 7, 
		RULE_graphtype = 8, RULE_variable = 9, RULE_typename = 10, RULE_field = 11, 
		RULE_fieldlist = 12, RULE_variablelist = 13, RULE_typedvariablelist = 14, 
		RULE_customtypedvariablelist = 15, RULE_messageparameterlist = 16, RULE_messageparametersignature = 17, 
		RULE_expressionlist = 18, RULE_value = 19, RULE_valuelist = 20, RULE_expression = 21, 
		RULE_binop = 22, RULE_unop = 23, RULE_assignmentlist = 24, RULE_assignment = 25, 
		RULE_query = 26, RULE_comparator = 27, RULE_arraydeclaration = 28, RULE_arraydefinition = 29, 
		RULE_arrayaccess = 30, RULE_fieldaccess = 31, RULE_lefthandside = 32, 
		RULE_nametagdefstatement = 33, RULE_nametaglistdefstatement = 34, RULE_namedefstatement = 35, 
		RULE_tagdefstatement = 36, RULE_tag = 37, RULE_versionnumber = 38, RULE_packagedefstatement = 39, 
		RULE_importstatement = 40, RULE_typedefstatement = 41, RULE_nodeconnectionstatement = 42, 
		RULE_surrogatedefinitionstatement = 43, RULE_surrogatebody = 44, RULE_functiondefinition = 45, 
		RULE_functionbody = 46, RULE_returnstatement = 47, RULE_functioncall = 48, 
		RULE_structpropertylist = 49, RULE_structdefinition = 50, RULE_messagetypename = 51, 
		RULE_nodetypename = 52, RULE_edgetypename = 53, RULE_messagetypelist = 54, 
		RULE_messagedefinition = 55, RULE_edgetypedefinition = 56, RULE_edgetypebody = 57, 
		RULE_nodetypedefinition = 58, RULE_nodedefinition = 59, RULE_nodebody = 60, 
		RULE_nodebodyinout = 61, RULE_inoutoption = 62, RULE_nodebodyproperty = 63, 
		RULE_nodebodyimage = 64, RULE_nodebodycommand = 65, RULE_nodebodyclientserver = 66, 
		RULE_nodeconstructor = 67, RULE_metadefinition = 68, RULE_loopstatement = 69, 
		RULE_loopsignature = 70, RULE_loopbody = 71, RULE_conditionalstatement = 72, 
		RULE_conditionalelseif = 73, RULE_conditionalelse = 74, RULE_integerrange = 75, 
		RULE_generatename = 76, RULE_interpolationlist = 77, RULE_bracketinterpolationlist = 78, 
		RULE_concatelement = 79, RULE_number = 80, RULE_string = 81, RULE_boolean = 82, 
		RULE_terminator = 83;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"atomictypeortypename", "graphtype", "variable", "typename", "field", 
		"fieldlist", "variablelist", "typedvariablelist", "customtypedvariablelist", 
		"messageparameterlist", "messageparametersignature", "expressionlist", 
		"value", "valuelist", "expression", "binop", "unop", "assignmentlist", 
		"assignment", "query", "comparator", "arraydeclaration", "arraydefinition", 
		"arrayaccess", "fieldaccess", "lefthandside", "nametagdefstatement", "nametaglistdefstatement", 
		"namedefstatement", "tagdefstatement", "tag", "versionnumber", "packagedefstatement", 
		"importstatement", "typedefstatement", "nodeconnectionstatement", "surrogatedefinitionstatement", 
		"surrogatebody", "functiondefinition", "functionbody", "returnstatement", 
		"functioncall", "structpropertylist", "structdefinition", "messagetypename", 
		"nodetypename", "edgetypename", "messagetypelist", "messagedefinition", 
		"edgetypedefinition", "edgetypebody", "nodetypedefinition", "nodedefinition", 
		"nodebody", "nodebodyinout", "inoutoption", "nodebodyproperty", "nodebodyimage", 
		"nodebodycommand", "nodebodyclientserver", "nodeconstructor", "metadefinition", 
		"loopstatement", "loopsignature", "loopbody", "conditionalstatement", 
		"conditionalelseif", "conditionalelse", "integerrange", "generatename", 
		"interpolationlist", "bracketinterpolationlist", "concatelement", "number", 
		"string", "boolean", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", "'message'", 
		"'edgetype'", "'nodetype'", "'node'", "'surrogate'", "'meta'", "'function'", 
		"'typedef'", "'import'", "'include'", "'property'", "'topic'", "'input'", 
		"'output'", "'client'", "'server'", "'publish'", "'subscribe'", "'request'", 
		"'response'", "'pub'", "'sub'", "'req'", "'res'", "'aux'", "'null'", "'true'", 
		"'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'to'", "'while'", 
		"'return'", "'as'", "'imitates'", "'with'", "'latest'", "'name'", "'tag'", 
		"'package'", "'image'", "'queue'", "'var'", "'command'", "'.'", "'*'", 
		"','", "':'", "';'", "'='", "'+'", "'-'", "'/'", "'$'", "'-->'", "'==>'", 
		"'-:'", "'=:'", "'->'", "'=>'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'and'", "'or'", "'not'", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"EDGETYPE", "NODETYPE", "NODE", "SURROGATE", "META", "FUNCTION", "TYPEDEF", 
		"IMPORT", "INCLUDE", "PROPERTY", "TOPIC", "INPUT", "OUTPUT", "CLIENT", 
		"SERVER", "PUBLISH", "SUBSCRIBE", "REQUEST", "RESPONSE", "PUB", "SUB", 
		"REQ", "RES", "AUX", "NULL", "TRUE", "FALSE", "IF", "ELSE", "ELSEIF", 
		"FOR", "IN", "TO", "WHILE", "RETURN", "AS", "IMITATES", "WITH", "LATEST", 
		"NAMEDEF", "TAGDEF", "PACKAGE", "IMAGE", "QUEUE", "VAR", "COMMAND", "DOT", 
		"STAR", "COMMA", "COLON", "SEMI_COLON", "ASSIGN", "ADD", "MINUS", "DIV", 
		"INTERPOLATION", "ARROW", "HEAVYARROW", "QUERYARROW_BEGIN", "QUERYHARROW_BEGIN", 
		"QUERYARROW_END", "QUERYHARROW_END", "EQUAL", "UNEQUAL", "GREATERTHAN", 
		"GREATEREQUALTHAN", "LESSTHAN", "LESSEQUALTHAN", "AND", "OR", "NOT", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"NAME", "WORD", "STRINGLITERAL", "NORMALSTRING", "CHARSTRING", "LONGSTRING", 
		"INTEGER", "FLOATINGPOINTNUMBER", "WHITESPACE", "STMEND", "COMMENT", "LINECOMMENT", 
		"SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SeidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SeidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			set();
			State = 169;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 171;
				statement();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PackageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackagedefstatementContext packagedefstatement() {
			return GetRuleContext<PackagedefstatementContext>(0);
		}
		public PackageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalstatementContext conditionalstatement() {
			return GetRuleContext<ConditionalstatementContext>(0);
		}
		public ConditionalStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SurrogateDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
			return GetRuleContext<SurrogatedefinitionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public SurrogateDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogateDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetaDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NametagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		public NametagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EdgetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypedefinitionContext edgetypedefinition() {
			return GetRuleContext<EdgetypedefinitionContext>(0);
		}
		public EdgetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopstatementContext loopstatement() {
			return GetRuleContext<LoopstatementContext>(0);
		}
		public LoopStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeConnectionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeconnectionstatementContext nodeconnectionstatement() {
			return GetRuleContext<NodeconnectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public NodeConnectionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeConnectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedefstatementContext namedefstatement() {
			return GetRuleContext<NamedefstatementContext>(0);
		}
		public NameDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedefStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedefstatementContext typedefstatement() {
			return GetRuleContext<TypedefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TypedefStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TagDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagdefstatementContext tagdefstatement() {
			return GetRuleContext<TagdefstatementContext>(0);
		}
		public TagDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArraydefinitionContext arraydefinition() {
			return GetRuleContext<ArraydefinitionContext>(0);
		}
		public ArrayDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 179;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 180;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 183;
				variablelist();
				State = 184;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				variablelist();
				State = 187;
				Match(ASSIGN);
				State = 188;
				expressionlist();
				State = 189;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 193;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 191;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 192;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 195;
				variablelist();
				State = 196;
				Match(ASSIGN);
				State = 197;
				expressionlist();
				}
				break;
			case 6:
				_localctx = new ArrayDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 199;
				arraydefinition();
				}
				break;
			case 7:
				_localctx = new StructDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 200;
				structdefinition();
				}
				break;
			case 8:
				_localctx = new MessageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 201;
				messagedefinition();
				}
				break;
			case 9:
				_localctx = new EdgetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 202;
				edgetypedefinition();
				}
				break;
			case 10:
				_localctx = new NodetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 203;
				nodetypedefinition();
				}
				break;
			case 11:
				_localctx = new NodeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 204;
				nodedefinition();
				}
				break;
			case 12:
				_localctx = new MetaDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 205;
				metadefinition();
				}
				break;
			case 13:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 206;
				importstatement();
				}
				break;
			case 14:
				_localctx = new TypedefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 207;
				typedefstatement();
				State = 208;
				terminator();
				}
				break;
			case 15:
				_localctx = new NodeConnectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 210;
				nodeconnectionstatement();
				State = 211;
				terminator();
				}
				break;
			case 16:
				_localctx = new SurrogateDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 213;
				surrogatedefinitionstatement();
				State = 214;
				terminator();
				}
				break;
			case 17:
				_localctx = new NameDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 216;
				namedefstatement();
				}
				break;
			case 18:
				_localctx = new TagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 217;
				tagdefstatement();
				}
				break;
			case 19:
				_localctx = new NametagDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 218;
				nametagdefstatement();
				}
				break;
			case 20:
				_localctx = new PackageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 219;
				packagedefstatement();
				}
				break;
			case 21:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 220;
				loopstatement();
				}
				break;
			case 22:
				_localctx = new ConditionalStatementContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 221;
				conditionalstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
				{
				State = 224;
				variable();
				}
			}

			State = 227;
			Match(OPEN_BRACE);
			State = 228;
			set();
			State = 229;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				typename();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234;
				atomictype();
				State = 235;
				Match(ARRAY);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237;
				complextype();
				State = 238;
				Match(ARRAY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240;
				typename();
				State = 241;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SeidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SeidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SeidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SeidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeortypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public AtomictypeortypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictypeortypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictypeortypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeortypenameContext atomictypeortypename() {
		AtomictypeortypenameContext _localctx = new AtomictypeortypenameContext(Context, State);
		EnterRule(_localctx, 14, RULE_atomictypeortypename);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				atomictype();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratenameContext generatename() {
			return GetRuleContext<GeneratenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				generatename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			variable();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 262;
				Match(DOT);
				State = 263;
				variable();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			field();
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 270;
				Match(COMMA);
				State = 271;
				field();
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 26, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			variable();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 278;
				Match(COMMA);
				State = 279;
				variable();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 28, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			atomictype();
			State = 286;
			variable();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 287;
				Match(COMMA);
				State = 288;
				atomictype();
				State = 289;
				variable();
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomtypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public CustomtypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customtypedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomtypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomtypedvariablelistContext customtypedvariablelist() {
		CustomtypedvariablelistContext _localctx = new CustomtypedvariablelistContext(Context, State);
		EnterRule(_localctx, 30, RULE_customtypedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 296;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 297;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 300;
			variable();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 301;
				Match(COMMA);
				State = 304;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 302;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 303;
					atomictype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 306;
				variable();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext[] messageparametersignature() {
			return GetRuleContexts<MessageparametersignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext messageparametersignature(int i) {
			return GetRuleContext<MessageparametersignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessageparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparameterlistContext messageparameterlist() {
		MessageparameterlistContext _localctx = new MessageparameterlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_messageparameterlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			messageparametersignature();
			State = 314;
			variable();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 315;
				Match(COMMA);
				State = 316;
				messageparametersignature();
				State = 317;
				variable();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparametersignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(SeidlParser.TOPIC, 0); }
		public MessageparametersignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparametersignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparametersignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparametersignatureContext messageparametersignature() {
		MessageparametersignatureContext _localctx = new MessageparametersignatureContext(Context, State);
		EnterRule(_localctx, 34, RULE_messageparametersignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOPIC) {
				{
				State = 324;
				Match(TOPIC);
				}
			}

			State = 329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 327;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 328;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			expression();
			State = 336;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 332;
					Match(COMMA);
					State = 333;
					expression();
					}
					} 
				}
				State = 338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_value);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				boolean();
				}
				break;
			case INTEGER:
			case FLOATINGPOINTNUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				number();
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 341;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public ValuelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuelistContext valuelist() {
		ValuelistContext _localctx = new ValuelistContext(Context, State);
		EnterRule(_localctx, 40, RULE_valuelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			value();
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 345;
				Match(COMMA);
				State = 346;
				value();
				}
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SeidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuelistContext valuelist() {
			return GetRuleContext<ValuelistContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		int _la;
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356;
				variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 357;
				field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 358;
				functiondefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 359;
				functioncall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 360;
				importstatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 361;
				assignmentlist();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 362;
				Match(OPEN_BRACE);
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
					{
					State = 363;
					assignmentlist();
					}
				}

				State = 366;
				Match(CLOSE_BRACE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 367;
				Match(OPEN_BRACKET);
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
					{
					State = 368;
					variablelist();
					}
				}

				State = 371;
				Match(CLOSE_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 372;
				Match(OPEN_BRACKET);
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 882705526964617219L) != 0)) {
					{
					State = 373;
					valuelist();
					}
				}

				State = 376;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SeidlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SeidlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SeidlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SeidlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SeidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SeidlParser.LESSEQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SeidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SeidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SeidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SeidlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SeidlParser.OR, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 44, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 8290529L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SeidlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SeidlParser.NOT, 0); }
		public UnopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnopContext unop() {
		UnopContext _localctx = new UnopContext(Context, State);
		EnterRule(_localctx, 46, RULE_unop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public AssignmentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentlistContext assignmentlist() {
		AssignmentlistContext _localctx = new AssignmentlistContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignmentlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			assignment();
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 384;
					Match(COMMA);
					State = 385;
					assignment();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 50, RULE_assignment);
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				variable();
				State = 392;
				Match(ASSIGN);
				State = 393;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				field();
				State = 396;
				Match(ASSIGN);
				State = 397;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(SeidlParser.QUEUE, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 52, RULE_query);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
			case INTERPOLATION:
			case NAME:
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				field();
				State = 402;
				comparator();
				State = 403;
				expression();
				}
				break;
			case QUEUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				Match(QUEUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SeidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(SeidlParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SeidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SeidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SeidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SeidlParser.LESSEQUALTHAN, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			type();
			State = 411;
			Match(ARRAY);
			State = 412;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SeidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public ArraydefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydefinitionContext arraydefinition() {
		ArraydefinitionContext _localctx = new ArraydefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_arraydefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			atomictype();
			State = 415;
			Match(ARRAY);
			State = 416;
			variablelist();
			State = 417;
			Match(ASSIGN);
			State = 418;
			expressionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 60, RULE_arrayaccess);
		try {
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				variable();
				State = 421;
				Match(OPEN_BRACKET);
				State = 422;
				expression();
				State = 423;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				@string();
				State = 426;
				Match(OPEN_BRACKET);
				State = 427;
				expression();
				State = 428;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SeidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 62, RULE_fieldaccess);
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				variable();
				State = 433;
				Match(DOT);
				State = 434;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436;
				arrayaccess();
				State = 437;
				Match(DOT);
				State = 438;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 64, RULE_lefthandside);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 442;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 443;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 444;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NametagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public NametagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nametagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NametagdefstatementContext nametagdefstatement() {
		NametagdefstatementContext _localctx = new NametagdefstatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_nametagdefstatement);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				field();
				State = 448;
				Match(COLON);
				State = 449;
				tag();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				field();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NametaglistdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext[] nametagdefstatement() {
			return GetRuleContexts<NametagdefstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement(int i) {
			return GetRuleContext<NametagdefstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public NametaglistdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nametaglistdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNametaglistdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NametaglistdefstatementContext nametaglistdefstatement() {
		NametaglistdefstatementContext _localctx = new NametaglistdefstatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_nametaglistdefstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 4440996186113L) != 0)) {
				{
				State = 456;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR:
				case INTERPOLATION:
				case NAME:
				case STRINGLITERAL:
					{
					State = 454;
					nametagdefstatement();
					}
					break;
				case STMEND:
					{
					State = 455;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEDEF() { return GetToken(SeidlParser.NAMEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public NamedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedefstatementContext namedefstatement() {
		NamedefstatementContext _localctx = new NamedefstatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_namedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(NAMEDEF);
			State = 462;
			Match(ASSIGN);
			State = 463;
			field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagdefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGDEF() { return GetToken(SeidlParser.TAGDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public TagdefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagdefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagdefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagdefstatementContext tagdefstatement() {
		TagdefstatementContext _localctx = new TagdefstatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_tagdefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(TAGDEF);
			State = 466;
			Match(ASSIGN);
			State = 467;
			tag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEST() { return GetToken(SeidlParser.LATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionnumberContext versionnumber() {
			return GetRuleContext<VersionnumberContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 74, RULE_tag);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LATEST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				Match(LATEST);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470;
				@string();
				}
				break;
			case INTEGER:
			case FLOATINGPOINTNUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471;
				versionnumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionnumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SeidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SeidlParser.DOT, i);
		}
		public VersionnumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionnumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionnumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionnumberContext versionnumber() {
		VersionnumberContext _localctx = new VersionnumberContext(Context, State);
		EnterRule(_localctx, 76, RULE_versionnumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			number();
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 475;
				Match(DOT);
				State = 476;
				number();
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagedefstatementContext : ParserRuleContext {
		public NametagdefstatementContext packageidentifier;
		public NametaglistdefstatementContext packagecontent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(SeidlParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NametaglistdefstatementContext nametaglistdefstatement() {
			return GetRuleContext<NametaglistdefstatementContext>(0);
		}
		public PackagedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagedefstatementContext packagedefstatement() {
		PackagedefstatementContext _localctx = new PackagedefstatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_packagedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(PACKAGE);
			State = 483;
			_localctx.packageidentifier = nametagdefstatement();
			State = 484;
			Match(OPEN_BRACE);
			State = 485;
			_localctx.packagecontent = nametaglistdefstatement();
			State = 486;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SeidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_importstatement);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488;
				Match(IMPORT);
				State = 489;
				@string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				Match(IMPORT);
				State = 491;
				field();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 492;
				Match(IMPORT);
				State = 493;
				field();
				State = 494;
				Match(COLON);
				State = 495;
				tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(SeidlParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefstatementContext typedefstatement() {
		TypedefstatementContext _localctx = new TypedefstatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_typedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(TYPEDEF);
			State = 502;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 500;
				atomictype();
				}
				break;
			case NAME:
				{
				State = 501;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 504;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconnectionstatementContext : ParserRuleContext {
		public FieldlistContext sources;
		public FieldlistContext sinks;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SeidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext[] fieldlist() {
			return GetRuleContexts<FieldlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist(int i) {
			return GetRuleContext<FieldlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAVYARROW() { return GetToken(SeidlParser.HEAVYARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_BEGIN() { return GetToken(SeidlParser.QUERYARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_END() { return GetToken(SeidlParser.QUERYARROW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_BEGIN() { return GetToken(SeidlParser.QUERYHARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_END() { return GetToken(SeidlParser.QUERYHARROW_END, 0); }
		public NodeconnectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconnectionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconnectionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconnectionstatementContext nodeconnectionstatement() {
		NodeconnectionstatementContext _localctx = new NodeconnectionstatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_nodeconnectionstatement);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506;
				_localctx.sources = fieldlist();
				State = 507;
				Match(ARROW);
				State = 508;
				_localctx.sinks = fieldlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				_localctx.sources = fieldlist();
				State = 511;
				Match(HEAVYARROW);
				State = 512;
				_localctx.sinks = fieldlist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 514;
				_localctx.sources = fieldlist();
				State = 515;
				Match(QUERYARROW_BEGIN);
				State = 516;
				query();
				State = 517;
				Match(QUERYARROW_END);
				State = 518;
				_localctx.sinks = fieldlist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 520;
				_localctx.sources = fieldlist();
				State = 521;
				Match(QUERYHARROW_BEGIN);
				State = 522;
				query();
				State = 523;
				Match(QUERYHARROW_END);
				State = 524;
				_localctx.sinks = fieldlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatedefinitionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SURROGATE() { return GetToken(SeidlParser.SURROGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatebodyContext surrogatebody() {
			return GetRuleContext<SurrogatebodyContext>(0);
		}
		public SurrogatedefinitionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatedefinitionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatedefinitionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
		SurrogatedefinitionstatementContext _localctx = new SurrogatedefinitionstatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_surrogatedefinitionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(SURROGATE);
			State = 529;
			variable();
			State = 530;
			surrogatebody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SeidlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SeidlParser.WITH, i);
		}
		public SurrogatebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatebodyContext surrogatebody() {
		SurrogatebodyContext _localctx = new SurrogatebodyContext(Context, State);
		EnterRule(_localctx, 88, RULE_surrogatebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(OPEN_BRACE);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==WITH) {
				{
				State = 537;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 533;
					Match(FOR);
					State = 534;
					field();
					}
					break;
				case WITH:
					{
					State = 535;
					Match(WITH);
					State = 536;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 542;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SeidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SeidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SeidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SeidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SeidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SeidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 90, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(FUNCTION);
			State = 545;
			variable();
			State = 546;
			Match(ASSIGN);
			State = 547;
			Match(OPEN_PAREN);
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 548;
				customtypedvariablelist();
				}
			}

			State = 551;
			Match(CLOSE_PAREN);
			State = 552;
			Match(OPEN_PAREN);
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 553;
				customtypedvariablelist();
				}
			}

			State = 556;
			Match(CLOSE_PAREN);
			State = 557;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SeidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SeidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SeidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SeidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SeidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SeidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SeidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SeidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SeidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SeidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SeidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SeidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SeidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SeidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(OPEN_BRACE);
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217876368501448708L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				State = 606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 560;
					statement();
					}
					break;
				case 2:
					{
					State = 561;
					Match(IF);
					State = 562;
					expression();
					State = 563;
					scope();
					State = 570;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 564;
						Match(ELSEIF);
						State = 565;
						expression();
						State = 566;
						scope();
						}
						}
						State = 572;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 573;
						Match(ELSE);
						State = 574;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 577;
					Match(WHILE);
					State = 578;
					expression();
					State = 579;
					scope();
					}
					break;
				case 4:
					{
					State = 581;
					Match(FOR);
					State = 583;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 582;
						type();
						}
						break;
					}
					State = 585;
					variablelist();
					State = 586;
					Match(ASSIGN);
					State = 587;
					expressionlist();
					State = 588;
					Match(COMMA);
					State = 589;
					expression();
					State = 592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 590;
						Match(COMMA);
						State = 591;
						expression();
						}
					}

					State = 594;
					scope();
					}
					break;
				case 5:
					{
					State = 596;
					Match(FOR);
					State = 598;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						State = 597;
						type();
						}
						break;
					}
					State = 600;
					variable();
					State = 601;
					Match(IN);
					State = 602;
					variable();
					State = 603;
					scope();
					}
					break;
				case 6:
					{
					State = 605;
					returnstatement();
					}
					break;
				}
				}
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 611;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SeidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(RETURN);
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 614;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 96, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			variable();
			State = 618;
			Match(OPEN_PAREN);
			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
				{
				State = 619;
				variablelist();
				}
			}

			State = 622;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructpropertylistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext[] atomictypeortypename() {
			return GetRuleContexts<AtomictypeortypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext atomictypeortypename(int i) {
			return GetRuleContext<AtomictypeortypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public StructpropertylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structpropertylist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructpropertylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructpropertylistContext structpropertylist() {
		StructpropertylistContext _localctx = new StructpropertylistContext(Context, State);
		EnterRule(_localctx, 98, RULE_structpropertylist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME || _la==STMEND) {
				{
				State = 648;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
				case NAME:
					{
					State = 624;
					atomictypeortypename();
					State = 625;
					variable();
					State = 644;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 629;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 626;
								terminator();
								}
								}
								State = 631;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 632;
							Match(COMMA);
							State = 636;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 633;
								terminator();
								}
								}
								State = 638;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 639;
							atomictypeortypename();
							State = 640;
							variable();
							}
							} 
						}
						State = 646;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
					}
					}
					break;
				case STMEND:
					{
					State = 647;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SeidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructpropertylistContext structpropertylist() {
			return GetRuleContext<StructpropertylistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_structdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(STRUCT);
			State = 654;
			variable();
			State = 655;
			Match(OPEN_BRACE);
			State = 656;
			structpropertylist();
			State = 657;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 102, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 104, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		public EdgetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypenameContext edgetypename() {
		EdgetypenameContext _localctx = new EdgetypenameContext(Context, State);
		EnterRule(_localctx, 106, RULE_edgetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 108, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			messagetypename();
			State = 666;
			variable();
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 667;
				Match(COMMA);
				State = 668;
				messagetypename();
				State = 669;
				variable();
				}
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SeidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageparameterlistContext messageparameterlist() {
			return GetRuleContext<MessageparameterlistContext>(0);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(MESSAGE);
			State = 677;
			messagetypename();
			State = 678;
			Match(OPEN_BRACE);
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262204L) != 0) || _la==NAME) {
				{
				State = 679;
				messageparameterlist();
				}
			}

			State = 682;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGETYPE() { return GetToken(SeidlParser.EDGETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypebodyContext edgetypebody() {
			return GetRuleContext<EdgetypebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public EdgetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypedefinitionContext edgetypedefinition() {
		EdgetypedefinitionContext _localctx = new EdgetypedefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_edgetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(EDGETYPE);
			State = 685;
			edgetypename();
			State = 686;
			Match(OPEN_BRACE);
			State = 687;
			edgetypebody();
			State = 688;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST() { return GetTokens(SeidlParser.REQUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST(int i) {
			return GetToken(SeidlParser.REQUEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESPONSE() { return GetTokens(SeidlParser.RESPONSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE(int i) {
			return GetToken(SeidlParser.RESPONSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public EdgetypebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypebodyContext edgetypebody() {
		EdgetypebodyContext _localctx = new EdgetypebodyContext(Context, State);
		EnterRule(_localctx, 114, RULE_edgetypebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REQUEST || _la==RESPONSE || _la==STMEND) {
				{
				State = 695;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REQUEST:
					{
					State = 690;
					Match(REQUEST);
					State = 691;
					messagetypename();
					}
					break;
				case RESPONSE:
					{
					State = 692;
					Match(RESPONSE);
					State = 693;
					messagetypename();
					}
					break;
				case STMEND:
					{
					State = 694;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SeidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_nodetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			Match(NODETYPE);
			State = 701;
			nodetypename();
			State = 702;
			Match(OPEN_BRACE);
			State = 703;
			nodebody();
			State = 704;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SeidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeconstructorContext nodeconstructor() {
			return GetRuleContext<NodeconstructorContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_nodedefinition);
		try {
			State = 715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				Match(NODE);
				State = 707;
				typename();
				State = 708;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710;
				Match(NODE);
				State = 711;
				typename();
				State = 712;
				variable();
				State = 713;
				nodeconstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		public NodebodyinoutContext inout;
		public NodebodyclientserverContext clientserver;
		public NodebodypropertyContext property;
		public NodebodyimageContext image;
		public NodebodycommandContext command;
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext[] nodebodyinout() {
			return GetRuleContexts<NodebodyinoutContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext nodebodyinout(int i) {
			return GetRuleContext<NodebodyinoutContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext[] nodebodyclientserver() {
			return GetRuleContexts<NodebodyclientserverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext nodebodyclientserver(int i) {
			return GetRuleContext<NodebodyclientserverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext[] nodebodyproperty() {
			return GetRuleContexts<NodebodypropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext nodebodyproperty(int i) {
			return GetRuleContext<NodebodypropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyimageContext[] nodebodyimage() {
			return GetRuleContexts<NodebodyimageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyimageContext nodebodyimage(int i) {
			return GetRuleContext<NodebodyimageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodycommandContext[] nodebodycommand() {
			return GetRuleContexts<NodebodycommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodycommandContext nodebodycommand(int i) {
			return GetRuleContext<NodebodycommandContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 120, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10133099194744832L) != 0) || _la==STMEND) {
				{
				State = 723;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
				case PUBLISH:
				case SUBSCRIBE:
					{
					State = 717;
					_localctx.inout = nodebodyinout();
					}
					break;
				case CLIENT:
				case SERVER:
					{
					State = 718;
					_localctx.clientserver = nodebodyclientserver();
					}
					break;
				case PROPERTY:
					{
					State = 719;
					_localctx.property = nodebodyproperty();
					}
					break;
				case IMAGE:
					{
					State = 720;
					_localctx.image = nodebodyimage();
					}
					break;
				case COMMAND:
					{
					State = 721;
					_localctx.command = nodebodycommand();
					}
					break;
				case STMEND:
					{
					State = 722;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyinoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SeidlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist() {
			return GetRuleContext<MessagetypelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SeidlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SeidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SeidlParser.SUBSCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SeidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InoutoptionContext inoutoption() {
			return GetRuleContext<InoutoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SeidlParser.CLOSE_BRACKET, 0); }
		public NodebodyinoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinout; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinout(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyinoutContext nodebodyinout() {
		NodebodyinoutContext _localctx = new NodebodyinoutContext(Context, State);
		EnterRule(_localctx, 122, RULE_nodebodyinout);
		try {
			State = 748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728;
				Match(INPUT);
				State = 729;
				messagetypelist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 730;
				Match(OUTPUT);
				State = 731;
				messagetypelist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 732;
				Match(PUBLISH);
				State = 733;
				messagetypelist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 734;
				Match(SUBSCRIBE);
				State = 735;
				messagetypelist();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 736;
				Match(INPUT);
				State = 737;
				Match(OPEN_BRACKET);
				State = 738;
				inoutoption();
				State = 739;
				Match(CLOSE_BRACKET);
				State = 740;
				messagetypelist();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 742;
				Match(OUTPUT);
				State = 743;
				Match(OPEN_BRACKET);
				State = 744;
				inoutoption();
				State = 745;
				Match(CLOSE_BRACKET);
				State = 746;
				messagetypelist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InoutoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SeidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUX() { return GetToken(SeidlParser.AUX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQ() { return GetToken(SeidlParser.REQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES() { return GetToken(SeidlParser.RES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST() { return GetToken(SeidlParser.REQUEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE() { return GetToken(SeidlParser.RESPONSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(SeidlParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SeidlParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SeidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SeidlParser.SUBSCRIBE, 0); }
		public InoutoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inoutoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInoutoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InoutoptionContext inoutoption() {
		InoutoptionContext _localctx = new InoutoptionContext(Context, State);
		EnterRule(_localctx, 124, RULE_inoutoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4286578688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 751;
			Match(COLON);
			State = 752;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodypropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SeidlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodebodypropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyproperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodypropertyContext nodebodyproperty() {
		NodebodypropertyContext _localctx = new NodebodypropertyContext(Context, State);
		EnterRule(_localctx, 126, RULE_nodebodyproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(PROPERTY);
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 755;
				type();
				}
				break;
			case 2:
				{
				State = 756;
				typename();
				}
				break;
			}
			State = 759;
			variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyimageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(SeidlParser.IMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NametagdefstatementContext nametagdefstatement() {
			return GetRuleContext<NametagdefstatementContext>(0);
		}
		public NodebodyimageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyimage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyimage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyimageContext nodebodyimage() {
		NodebodyimageContext _localctx = new NodebodyimageContext(Context, State);
		EnterRule(_localctx, 128, RULE_nodebodyimage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(IMAGE);
			State = 762;
			nametagdefstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodycommandContext : ParserRuleContext {
		public IToken command;
		public IToken workingdirectory;
		public IToken arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND() { return GetToken(SeidlParser.COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRINGLITERAL() { return GetTokens(SeidlParser.STRINGLITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(SeidlParser.STRINGLITERAL, i);
		}
		public NodebodycommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodycommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodycommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodycommandContext nodebodycommand() {
		NodebodycommandContext _localctx = new NodebodycommandContext(Context, State);
		EnterRule(_localctx, 130, RULE_nodebodycommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(COMMAND);
			State = 765;
			_localctx.command = Match(NAME);
			State = 766;
			_localctx.workingdirectory = Match(STRINGLITERAL);
			State = 767;
			_localctx.arguments = Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyclientserverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(SeidlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(SeidlParser.SERVER, 0); }
		public NodebodyclientserverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyclientserver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyclientserver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyclientserverContext nodebodyclientserver() {
		NodebodyclientserverContext _localctx = new NodebodyclientserverContext(Context, State);
		EnterRule(_localctx, 132, RULE_nodebodyclientserver);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			_la = TokenStream.LA(1);
			if ( !(_la==CLIENT || _la==SERVER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 770;
			edgetypename();
			State = 771;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		public NodeconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconstructorContext nodeconstructor() {
		NodeconstructorContext _localctx = new NodeconstructorContext(Context, State);
		EnterRule(_localctx, 134, RULE_nodeconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(OPEN_PAREN);
			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 42949675009L) != 0)) {
				{
				State = 774;
				assignmentlist();
				}
			}

			State = 777;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SeidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SeidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SeidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 136, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			Match(META);
			State = 780;
			variable();
			State = 781;
			Match(OPEN_BRACE);
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 782;
				Match(PROPERTY);
				State = 783;
				type();
				State = 784;
				variablelist();
				State = 785;
				terminator();
				}
				}
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 792;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopsignatureContext loopsignature() {
			return GetRuleContext<LoopsignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopbodyContext loopbody() {
			return GetRuleContext<LoopbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		public LoopstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopstatementContext loopstatement() {
		LoopstatementContext _localctx = new LoopstatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_loopstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			loopsignature();
			State = 795;
			Match(OPEN_BRACE);
			State = 796;
			loopbody();
			State = 797;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsignatureContext : ParserRuleContext {
		public VariableContext iterator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SeidlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SeidlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerrangeContext integerrange() {
			return GetRuleContext<IntegerrangeContext>(0);
		}
		public LoopsignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopsignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopsignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopsignatureContext loopsignature() {
		LoopsignatureContext _localctx = new LoopsignatureContext(Context, State);
		EnterRule(_localctx, 140, RULE_loopsignature);
		try {
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 799;
				Match(FOR);
				State = 800;
				_localctx.iterator = variable();
				State = 801;
				Match(IN);
				State = 802;
				field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				Match(FOR);
				State = 805;
				_localctx.iterator = variable();
				State = 806;
				Match(IN);
				State = 807;
				integerrange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LoopbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopbodyContext loopbody() {
		LoopbodyContext _localctx = new LoopbodyContext(Context, State);
		EnterRule(_localctx, 142, RULE_loopbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 811;
				statement();
				}
				}
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SeidlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalelseifContext[] conditionalelseif() {
			return GetRuleContexts<ConditionalelseifContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalelseifContext conditionalelseif(int i) {
			return GetRuleContext<ConditionalelseifContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalelseContext conditionalelse() {
			return GetRuleContext<ConditionalelseContext>(0);
		}
		public ConditionalstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalstatementContext conditionalstatement() {
		ConditionalstatementContext _localctx = new ConditionalstatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_conditionalstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(IF);
			State = 818;
			expression();
			State = 819;
			Match(OPEN_BRACE);
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 820;
				statement();
				}
				}
				State = 825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 826;
			Match(CLOSE_BRACE);
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 827;
				conditionalelseif();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 833;
				conditionalelse();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalelseifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(SeidlParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionalelseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalelseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalelseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalelseifContext conditionalelseif() {
		ConditionalelseifContext _localctx = new ConditionalelseifContext(Context, State);
		EnterRule(_localctx, 146, RULE_conditionalelseif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			Match(ELSEIF);
			State = 837;
			expression();
			State = 838;
			Match(OPEN_BRACE);
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 839;
				statement();
				}
				}
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 845;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalelseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SeidlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SeidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SeidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionalelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalelse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalelseContext conditionalelse() {
		ConditionalelseContext _localctx = new ConditionalelseContext(Context, State);
		EnterRule(_localctx, 148, RULE_conditionalelse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			Match(ELSE);
			State = 848;
			Match(OPEN_BRACE);
			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9217882965571215364L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 8273L) != 0)) {
				{
				{
				State = 849;
				statement();
				}
				}
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 855;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerrangeContext : ParserRuleContext {
		public IToken from;
		public IToken to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SeidlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(SeidlParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(SeidlParser.INTEGER, i);
		}
		public IntegerrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerrangeContext integerrange() {
		IntegerrangeContext _localctx = new IntegerrangeContext(Context, State);
		EnterRule(_localctx, 150, RULE_integerrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			_localctx.from = Match(INTEGER);
			State = 858;
			Match(TO);
			State = 859;
			_localctx.to = Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratenameContext : ParserRuleContext {
		public IToken baseinterpolation;
		public ConcatelementContext baseelement;
		public InterpolationlistContext interpolationelements;
		public BracketinterpolationlistContext bracketinterpolationelements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SeidlParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SeidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext[] concatelement() {
			return GetRuleContexts<ConcatelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext concatelement(int i) {
			return GetRuleContext<ConcatelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SeidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SeidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SeidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationlistContext interpolationlist() {
			return GetRuleContext<InterpolationlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION() { return GetToken(SeidlParser.INTERPOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracketinterpolationlistContext bracketinterpolationlist() {
			return GetRuleContext<BracketinterpolationlistContext>(0);
		}
		public GeneratenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratenameContext generatename() {
		GeneratenameContext _localctx = new GeneratenameContext(Context, State);
		EnterRule(_localctx, 152, RULE_generatename);
		int _la;
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				Match(VAR);
				State = 862;
				Match(OPEN_PAREN);
				State = 863;
				concatelement();
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 864;
					Match(COMMA);
					State = 865;
					concatelement();
					}
					}
					State = 870;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 871;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERPOLATION) {
					{
					State = 873;
					_localctx.baseinterpolation = Match(INTERPOLATION);
					}
				}

				State = 876;
				_localctx.baseelement = concatelement();
				State = 877;
				_localctx.interpolationelements = interpolationlist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 879;
				_localctx.baseelement = concatelement();
				State = 880;
				_localctx.bracketinterpolationelements = bracketinterpolationlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolationlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERPOLATION() { return GetTokens(SeidlParser.INTERPOLATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION(int i) {
			return GetToken(SeidlParser.INTERPOLATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext[] concatelement() {
			return GetRuleContexts<ConcatelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext concatelement(int i) {
			return GetRuleContext<ConcatelementContext>(i);
		}
		public InterpolationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolationlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolationlistContext interpolationlist() {
		InterpolationlistContext _localctx = new InterpolationlistContext(Context, State);
		EnterRule(_localctx, 154, RULE_interpolationlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 884;
					Match(INTERPOLATION);
					State = 885;
					concatelement();
					}
					} 
				}
				State = 890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketinterpolationlistContext : ParserRuleContext {
		public IToken interpolation;
		public ConcatelementContext element;
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext[] concatelement() {
			return GetRuleContexts<ConcatelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatelementContext concatelement(int i) {
			return GetRuleContext<ConcatelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACE() { return GetTokens(SeidlParser.CLOSE_BRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE(int i) {
			return GetToken(SeidlParser.CLOSE_BRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACE() { return GetTokens(SeidlParser.OPEN_BRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE(int i) {
			return GetToken(SeidlParser.OPEN_BRACE, i);
		}
		public BracketinterpolationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketinterpolationlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketinterpolationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketinterpolationlistContext bracketinterpolationlist() {
		BracketinterpolationlistContext _localctx = new BracketinterpolationlistContext(Context, State);
		EnterRule(_localctx, 156, RULE_bracketinterpolationlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 896;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACE:
						{
						State = 891;
						_localctx.interpolation = Match(OPEN_BRACE);
						State = 892;
						concatelement();
						State = 893;
						Match(CLOSE_BRACE);
						}
						break;
					case NAME:
					case STRINGLITERAL:
						{
						State = 895;
						_localctx.element = concatelement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 900;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SeidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SeidlParser.STRINGLITERAL, 0); }
		public ConcatelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatelement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatelementContext concatelement() {
		ConcatelementContext _localctx = new ConcatelementContext(Context, State);
		EnterRule(_localctx, 158, RULE_concatelement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==STRINGLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SeidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SeidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 160, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SeidlParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 162, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SeidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SeidlParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 164, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SeidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeidlParserVisitor<TResult> typedVisitor = visitor as ISeidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 166, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,97,912,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,1,0,1,
		0,1,1,5,1,173,8,1,10,1,12,1,176,9,1,1,2,1,2,1,2,1,2,3,2,182,8,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,194,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,223,8,2,1,3,3,3,226,8,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,244,8,4,1,5,1,5,1,6,1,6,1,7,1,
		7,3,7,252,8,7,1,8,1,8,1,9,1,9,3,9,258,8,9,1,10,1,10,1,11,1,11,1,11,5,11,
		265,8,11,10,11,12,11,268,9,11,1,12,1,12,1,12,5,12,273,8,12,10,12,12,12,
		276,9,12,1,13,1,13,1,13,5,13,281,8,13,10,13,12,13,284,9,13,1,14,1,14,1,
		14,1,14,1,14,1,14,5,14,292,8,14,10,14,12,14,295,9,14,1,15,1,15,3,15,299,
		8,15,1,15,1,15,1,15,1,15,3,15,305,8,15,1,15,1,15,5,15,309,8,15,10,15,12,
		15,312,9,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,320,8,16,10,16,12,16,323,
		9,16,1,17,3,17,326,8,17,1,17,1,17,3,17,330,8,17,1,18,1,18,1,18,5,18,335,
		8,18,10,18,12,18,338,9,18,1,19,1,19,1,19,3,19,343,8,19,1,20,1,20,1,20,
		5,20,348,8,20,10,20,12,20,351,9,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,3,21,365,8,21,1,21,1,21,1,21,3,21,370,8,21,1,
		21,1,21,1,21,3,21,375,8,21,1,21,3,21,378,8,21,1,22,1,22,1,23,1,23,1,24,
		1,24,1,24,5,24,387,8,24,10,24,12,24,390,9,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,400,8,25,1,26,1,26,1,26,1,26,1,26,3,26,407,8,26,1,
		27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,431,8,30,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,3,31,441,8,31,1,32,1,32,1,32,3,32,446,8,32,1,33,1,
		33,1,33,1,33,1,33,3,33,453,8,33,1,34,1,34,5,34,457,8,34,10,34,12,34,460,
		9,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,3,37,473,8,
		37,1,38,1,38,1,38,5,38,478,8,38,10,38,12,38,481,9,38,1,39,1,39,1,39,1,
		39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,498,8,40,
		1,41,1,41,1,41,3,41,503,8,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,
		42,527,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,5,44,538,8,44,
		10,44,12,44,541,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,550,8,45,
		1,45,1,45,1,45,3,45,555,8,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,
		46,1,46,1,46,1,46,5,46,569,8,46,10,46,12,46,572,9,46,1,46,1,46,3,46,576,
		8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,584,8,46,1,46,1,46,1,46,1,46,1,
		46,1,46,1,46,3,46,593,8,46,1,46,1,46,1,46,1,46,3,46,599,8,46,1,46,1,46,
		1,46,1,46,1,46,1,46,5,46,607,8,46,10,46,12,46,610,9,46,1,46,1,46,1,47,
		1,47,3,47,616,8,47,1,48,1,48,1,48,3,48,621,8,48,1,48,1,48,1,49,1,49,1,
		49,5,49,628,8,49,10,49,12,49,631,9,49,1,49,1,49,5,49,635,8,49,10,49,12,
		49,638,9,49,1,49,1,49,1,49,5,49,643,8,49,10,49,12,49,646,9,49,1,49,5,49,
		649,8,49,10,49,12,49,652,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,
		1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,5,54,672,8,54,10,54,
		12,54,675,9,54,1,55,1,55,1,55,1,55,3,55,681,8,55,1,55,1,55,1,56,1,56,1,
		56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,5,57,696,8,57,10,57,12,57,699,
		9,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,3,59,716,8,59,1,60,1,60,1,60,1,60,1,60,1,60,5,60,724,8,60,10,
		60,12,60,727,9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
		61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,749,8,61,1,62,1,62,
		1,62,1,62,1,63,1,63,1,63,3,63,758,8,63,1,63,1,63,1,64,1,64,1,64,1,65,1,
		65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,3,67,776,8,67,1,67,1,67,
		1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,788,8,68,10,68,12,68,791,
		9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,3,70,810,8,70,1,71,5,71,813,8,71,10,71,12,71,816,9,
		71,1,72,1,72,1,72,1,72,5,72,822,8,72,10,72,12,72,825,9,72,1,72,1,72,5,
		72,829,8,72,10,72,12,72,832,9,72,1,72,3,72,835,8,72,1,73,1,73,1,73,1,73,
		5,73,841,8,73,10,73,12,73,844,9,73,1,73,1,73,1,74,1,74,1,74,5,74,851,8,
		74,10,74,12,74,854,9,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,
		76,1,76,5,76,867,8,76,10,76,12,76,870,9,76,1,76,1,76,1,76,3,76,875,8,76,
		1,76,1,76,1,76,1,76,1,76,1,76,3,76,883,8,76,1,77,1,77,5,77,887,8,77,10,
		77,12,77,890,9,77,1,78,1,78,1,78,1,78,1,78,5,78,897,8,78,10,78,12,78,900,
		9,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,83,0,0,84,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,0,10,1,0,2,
		5,3,0,7,7,9,10,12,12,4,0,55,55,60,62,70,70,72,77,2,0,61,61,78,78,1,0,70,
		75,1,0,23,31,1,0,21,22,2,0,85,85,87,87,1,0,91,92,1,0,33,34,963,0,168,1,
		0,0,0,2,174,1,0,0,0,4,222,1,0,0,0,6,225,1,0,0,0,8,243,1,0,0,0,10,245,1,
		0,0,0,12,247,1,0,0,0,14,251,1,0,0,0,16,253,1,0,0,0,18,257,1,0,0,0,20,259,
		1,0,0,0,22,261,1,0,0,0,24,269,1,0,0,0,26,277,1,0,0,0,28,285,1,0,0,0,30,
		298,1,0,0,0,32,313,1,0,0,0,34,325,1,0,0,0,36,331,1,0,0,0,38,342,1,0,0,
		0,40,344,1,0,0,0,42,377,1,0,0,0,44,379,1,0,0,0,46,381,1,0,0,0,48,383,1,
		0,0,0,50,399,1,0,0,0,52,406,1,0,0,0,54,408,1,0,0,0,56,410,1,0,0,0,58,414,
		1,0,0,0,60,430,1,0,0,0,62,440,1,0,0,0,64,445,1,0,0,0,66,452,1,0,0,0,68,
		458,1,0,0,0,70,461,1,0,0,0,72,465,1,0,0,0,74,472,1,0,0,0,76,474,1,0,0,
		0,78,482,1,0,0,0,80,497,1,0,0,0,82,499,1,0,0,0,84,526,1,0,0,0,86,528,1,
		0,0,0,88,532,1,0,0,0,90,544,1,0,0,0,92,559,1,0,0,0,94,613,1,0,0,0,96,617,
		1,0,0,0,98,650,1,0,0,0,100,653,1,0,0,0,102,659,1,0,0,0,104,661,1,0,0,0,
		106,663,1,0,0,0,108,665,1,0,0,0,110,676,1,0,0,0,112,684,1,0,0,0,114,697,
		1,0,0,0,116,700,1,0,0,0,118,715,1,0,0,0,120,725,1,0,0,0,122,748,1,0,0,
		0,124,750,1,0,0,0,126,754,1,0,0,0,128,761,1,0,0,0,130,764,1,0,0,0,132,
		769,1,0,0,0,134,773,1,0,0,0,136,779,1,0,0,0,138,794,1,0,0,0,140,809,1,
		0,0,0,142,814,1,0,0,0,144,817,1,0,0,0,146,836,1,0,0,0,148,847,1,0,0,0,
		150,857,1,0,0,0,152,882,1,0,0,0,154,888,1,0,0,0,156,898,1,0,0,0,158,901,
		1,0,0,0,160,903,1,0,0,0,162,905,1,0,0,0,164,907,1,0,0,0,166,909,1,0,0,
		0,168,169,3,2,1,0,169,170,5,0,0,1,170,1,1,0,0,0,171,173,3,4,2,0,172,171,
		1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,3,1,0,0,0,
		176,174,1,0,0,0,177,223,3,166,83,0,178,223,3,6,3,0,179,182,3,10,5,0,180,
		182,3,20,10,0,181,179,1,0,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,184,
		3,26,13,0,184,185,3,166,83,0,185,223,1,0,0,0,186,187,3,26,13,0,187,188,
		5,59,0,0,188,189,3,36,18,0,189,190,3,166,83,0,190,223,1,0,0,0,191,194,
		3,10,5,0,192,194,3,20,10,0,193,191,1,0,0,0,193,192,1,0,0,0,194,195,1,0,
		0,0,195,196,3,26,13,0,196,197,5,59,0,0,197,198,3,36,18,0,198,223,1,0,0,
		0,199,223,3,58,29,0,200,223,3,100,50,0,201,223,3,110,55,0,202,223,3,112,
		56,0,203,223,3,116,58,0,204,223,3,118,59,0,205,223,3,136,68,0,206,223,
		3,80,40,0,207,208,3,82,41,0,208,209,3,166,83,0,209,223,1,0,0,0,210,211,
		3,84,42,0,211,212,3,166,83,0,212,223,1,0,0,0,213,214,3,86,43,0,214,215,
		3,166,83,0,215,223,1,0,0,0,216,223,3,70,35,0,217,223,3,72,36,0,218,223,
		3,66,33,0,219,223,3,78,39,0,220,223,3,138,69,0,221,223,3,144,72,0,222,
		177,1,0,0,0,222,178,1,0,0,0,222,181,1,0,0,0,222,186,1,0,0,0,222,193,1,
		0,0,0,222,199,1,0,0,0,222,200,1,0,0,0,222,201,1,0,0,0,222,202,1,0,0,0,
		222,203,1,0,0,0,222,204,1,0,0,0,222,205,1,0,0,0,222,206,1,0,0,0,222,207,
		1,0,0,0,222,210,1,0,0,0,222,213,1,0,0,0,222,216,1,0,0,0,222,217,1,0,0,
		0,222,218,1,0,0,0,222,219,1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,
		5,1,0,0,0,224,226,3,18,9,0,225,224,1,0,0,0,225,226,1,0,0,0,226,227,1,0,
		0,0,227,228,5,81,0,0,228,229,3,2,1,0,229,230,5,82,0,0,230,7,1,0,0,0,231,
		244,3,10,5,0,232,244,3,12,6,0,233,244,3,20,10,0,234,235,3,10,5,0,235,236,
		5,1,0,0,236,244,1,0,0,0,237,238,3,12,6,0,238,239,5,1,0,0,239,244,1,0,0,
		0,240,241,3,20,10,0,241,242,5,1,0,0,242,244,1,0,0,0,243,231,1,0,0,0,243,
		232,1,0,0,0,243,233,1,0,0,0,243,234,1,0,0,0,243,237,1,0,0,0,243,240,1,
		0,0,0,244,9,1,0,0,0,245,246,7,0,0,0,246,11,1,0,0,0,247,248,5,6,0,0,248,
		13,1,0,0,0,249,252,3,10,5,0,250,252,3,20,10,0,251,249,1,0,0,0,251,250,
		1,0,0,0,252,15,1,0,0,0,253,254,7,1,0,0,254,17,1,0,0,0,255,258,3,152,76,
		0,256,258,5,85,0,0,257,255,1,0,0,0,257,256,1,0,0,0,258,19,1,0,0,0,259,
		260,5,85,0,0,260,21,1,0,0,0,261,266,3,18,9,0,262,263,5,54,0,0,263,265,
		3,18,9,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,
		0,267,23,1,0,0,0,268,266,1,0,0,0,269,274,3,22,11,0,270,271,5,56,0,0,271,
		273,3,22,11,0,272,270,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,
		1,0,0,0,275,25,1,0,0,0,276,274,1,0,0,0,277,282,3,18,9,0,278,279,5,56,0,
		0,279,281,3,18,9,0,280,278,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,
		283,1,0,0,0,283,27,1,0,0,0,284,282,1,0,0,0,285,286,3,10,5,0,286,293,3,
		18,9,0,287,288,5,56,0,0,288,289,3,10,5,0,289,290,3,18,9,0,290,292,1,0,
		0,0,291,287,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,
		29,1,0,0,0,295,293,1,0,0,0,296,299,3,20,10,0,297,299,3,10,5,0,298,296,
		1,0,0,0,298,297,1,0,0,0,299,300,1,0,0,0,300,310,3,18,9,0,301,304,5,56,
		0,0,302,305,3,20,10,0,303,305,3,10,5,0,304,302,1,0,0,0,304,303,1,0,0,0,
		305,306,1,0,0,0,306,307,3,18,9,0,307,309,1,0,0,0,308,301,1,0,0,0,309,312,
		1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,31,1,0,0,0,312,310,1,0,0,0,
		313,314,3,34,17,0,314,321,3,18,9,0,315,316,5,56,0,0,316,317,3,34,17,0,
		317,318,3,18,9,0,318,320,1,0,0,0,319,315,1,0,0,0,320,323,1,0,0,0,321,319,
		1,0,0,0,321,322,1,0,0,0,322,33,1,0,0,0,323,321,1,0,0,0,324,326,5,18,0,
		0,325,324,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,330,3,20,10,0,328,
		330,3,10,5,0,329,327,1,0,0,0,329,328,1,0,0,0,330,35,1,0,0,0,331,336,3,
		42,21,0,332,333,5,56,0,0,333,335,3,42,21,0,334,332,1,0,0,0,335,338,1,0,
		0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,37,1,0,0,0,338,336,1,0,0,0,339,
		343,3,164,82,0,340,343,3,160,80,0,341,343,3,162,81,0,342,339,1,0,0,0,342,
		340,1,0,0,0,342,341,1,0,0,0,343,39,1,0,0,0,344,349,3,38,19,0,345,346,5,
		56,0,0,346,348,3,38,19,0,347,345,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,
		0,349,350,1,0,0,0,350,41,1,0,0,0,351,349,1,0,0,0,352,378,5,32,0,0,353,
		378,3,164,82,0,354,378,3,160,80,0,355,378,3,162,81,0,356,378,3,18,9,0,
		357,378,3,22,11,0,358,378,3,90,45,0,359,378,3,96,48,0,360,378,3,80,40,
		0,361,378,3,48,24,0,362,364,5,81,0,0,363,365,3,48,24,0,364,363,1,0,0,0,
		364,365,1,0,0,0,365,366,1,0,0,0,366,378,5,82,0,0,367,369,5,83,0,0,368,
		370,3,26,13,0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,378,
		5,84,0,0,372,374,5,83,0,0,373,375,3,40,20,0,374,373,1,0,0,0,374,375,1,
		0,0,0,375,376,1,0,0,0,376,378,5,84,0,0,377,352,1,0,0,0,377,353,1,0,0,0,
		377,354,1,0,0,0,377,355,1,0,0,0,377,356,1,0,0,0,377,357,1,0,0,0,377,358,
		1,0,0,0,377,359,1,0,0,0,377,360,1,0,0,0,377,361,1,0,0,0,377,362,1,0,0,
		0,377,367,1,0,0,0,377,372,1,0,0,0,378,43,1,0,0,0,379,380,7,2,0,0,380,45,
		1,0,0,0,381,382,7,3,0,0,382,47,1,0,0,0,383,388,3,50,25,0,384,385,5,56,
		0,0,385,387,3,50,25,0,386,384,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,
		388,389,1,0,0,0,389,49,1,0,0,0,390,388,1,0,0,0,391,392,3,18,9,0,392,393,
		5,59,0,0,393,394,3,42,21,0,394,400,1,0,0,0,395,396,3,22,11,0,396,397,5,
		59,0,0,397,398,3,42,21,0,398,400,1,0,0,0,399,391,1,0,0,0,399,395,1,0,0,
		0,400,51,1,0,0,0,401,402,3,22,11,0,402,403,3,54,27,0,403,404,3,42,21,0,
		404,407,1,0,0,0,405,407,5,51,0,0,406,401,1,0,0,0,406,405,1,0,0,0,407,53,
		1,0,0,0,408,409,7,4,0,0,409,55,1,0,0,0,410,411,3,8,4,0,411,412,5,1,0,0,
		412,413,3,18,9,0,413,57,1,0,0,0,414,415,3,10,5,0,415,416,5,1,0,0,416,417,
		3,26,13,0,417,418,5,59,0,0,418,419,3,36,18,0,419,59,1,0,0,0,420,421,3,
		18,9,0,421,422,5,83,0,0,422,423,3,42,21,0,423,424,5,84,0,0,424,431,1,0,
		0,0,425,426,3,162,81,0,426,427,5,83,0,0,427,428,3,42,21,0,428,429,5,84,
		0,0,429,431,1,0,0,0,430,420,1,0,0,0,430,425,1,0,0,0,431,61,1,0,0,0,432,
		433,3,18,9,0,433,434,5,54,0,0,434,435,3,64,32,0,435,441,1,0,0,0,436,437,
		3,60,30,0,437,438,5,54,0,0,438,439,3,64,32,0,439,441,1,0,0,0,440,432,1,
		0,0,0,440,436,1,0,0,0,441,63,1,0,0,0,442,446,3,18,9,0,443,446,3,62,31,
		0,444,446,3,60,30,0,445,442,1,0,0,0,445,443,1,0,0,0,445,444,1,0,0,0,446,
		65,1,0,0,0,447,448,3,22,11,0,448,449,5,57,0,0,449,450,3,74,37,0,450,453,
		1,0,0,0,451,453,3,22,11,0,452,447,1,0,0,0,452,451,1,0,0,0,453,67,1,0,0,
		0,454,457,3,66,33,0,455,457,3,166,83,0,456,454,1,0,0,0,456,455,1,0,0,0,
		457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,69,1,0,0,0,460,458,
		1,0,0,0,461,462,5,47,0,0,462,463,5,59,0,0,463,464,3,22,11,0,464,71,1,0,
		0,0,465,466,5,48,0,0,466,467,5,59,0,0,467,468,3,74,37,0,468,73,1,0,0,0,
		469,473,5,46,0,0,470,473,3,162,81,0,471,473,3,76,38,0,472,469,1,0,0,0,
		472,470,1,0,0,0,472,471,1,0,0,0,473,75,1,0,0,0,474,479,3,160,80,0,475,
		476,5,54,0,0,476,478,3,160,80,0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,
		1,0,0,0,479,480,1,0,0,0,480,77,1,0,0,0,481,479,1,0,0,0,482,483,5,49,0,
		0,483,484,3,66,33,0,484,485,5,81,0,0,485,486,3,68,34,0,486,487,5,82,0,
		0,487,79,1,0,0,0,488,489,5,15,0,0,489,498,3,162,81,0,490,491,5,15,0,0,
		491,498,3,22,11,0,492,493,5,15,0,0,493,494,3,22,11,0,494,495,5,57,0,0,
		495,496,3,74,37,0,496,498,1,0,0,0,497,488,1,0,0,0,497,490,1,0,0,0,497,
		492,1,0,0,0,498,81,1,0,0,0,499,502,5,14,0,0,500,503,3,10,5,0,501,503,3,
		20,10,0,502,500,1,0,0,0,502,501,1,0,0,0,503,504,1,0,0,0,504,505,3,18,9,
		0,505,83,1,0,0,0,506,507,3,24,12,0,507,508,5,64,0,0,508,509,3,24,12,0,
		509,527,1,0,0,0,510,511,3,24,12,0,511,512,5,65,0,0,512,513,3,24,12,0,513,
		527,1,0,0,0,514,515,3,24,12,0,515,516,5,66,0,0,516,517,3,52,26,0,517,518,
		5,68,0,0,518,519,3,24,12,0,519,527,1,0,0,0,520,521,3,24,12,0,521,522,5,
		67,0,0,522,523,3,52,26,0,523,524,5,69,0,0,524,525,3,24,12,0,525,527,1,
		0,0,0,526,506,1,0,0,0,526,510,1,0,0,0,526,514,1,0,0,0,526,520,1,0,0,0,
		527,85,1,0,0,0,528,529,5,11,0,0,529,530,3,18,9,0,530,531,3,88,44,0,531,
		87,1,0,0,0,532,539,5,81,0,0,533,534,5,38,0,0,534,538,3,22,11,0,535,536,
		5,45,0,0,536,538,3,22,11,0,537,533,1,0,0,0,537,535,1,0,0,0,538,541,1,0,
		0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,0,542,
		543,5,82,0,0,543,89,1,0,0,0,544,545,5,13,0,0,545,546,3,18,9,0,546,547,
		5,59,0,0,547,549,5,79,0,0,548,550,3,30,15,0,549,548,1,0,0,0,549,550,1,
		0,0,0,550,551,1,0,0,0,551,552,5,80,0,0,552,554,5,79,0,0,553,555,3,30,15,
		0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,557,5,80,0,0,557,
		558,3,92,46,0,558,91,1,0,0,0,559,608,5,81,0,0,560,607,3,4,2,0,561,562,
		5,35,0,0,562,563,3,42,21,0,563,570,3,6,3,0,564,565,5,37,0,0,565,566,3,
		42,21,0,566,567,3,6,3,0,567,569,1,0,0,0,568,564,1,0,0,0,569,572,1,0,0,
		0,570,568,1,0,0,0,570,571,1,0,0,0,571,575,1,0,0,0,572,570,1,0,0,0,573,
		574,5,36,0,0,574,576,3,6,3,0,575,573,1,0,0,0,575,576,1,0,0,0,576,607,1,
		0,0,0,577,578,5,41,0,0,578,579,3,42,21,0,579,580,3,6,3,0,580,607,1,0,0,
		0,581,583,5,38,0,0,582,584,3,8,4,0,583,582,1,0,0,0,583,584,1,0,0,0,584,
		585,1,0,0,0,585,586,3,26,13,0,586,587,5,59,0,0,587,588,3,36,18,0,588,589,
		5,56,0,0,589,592,3,42,21,0,590,591,5,56,0,0,591,593,3,42,21,0,592,590,
		1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,3,6,3,0,595,607,1,0,0,
		0,596,598,5,38,0,0,597,599,3,8,4,0,598,597,1,0,0,0,598,599,1,0,0,0,599,
		600,1,0,0,0,600,601,3,18,9,0,601,602,5,39,0,0,602,603,3,18,9,0,603,604,
		3,6,3,0,604,607,1,0,0,0,605,607,3,94,47,0,606,560,1,0,0,0,606,561,1,0,
		0,0,606,577,1,0,0,0,606,581,1,0,0,0,606,596,1,0,0,0,606,605,1,0,0,0,607,
		610,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,608,1,
		0,0,0,611,612,5,82,0,0,612,93,1,0,0,0,613,615,5,42,0,0,614,616,3,26,13,
		0,615,614,1,0,0,0,615,616,1,0,0,0,616,95,1,0,0,0,617,618,3,18,9,0,618,
		620,5,79,0,0,619,621,3,26,13,0,620,619,1,0,0,0,620,621,1,0,0,0,621,622,
		1,0,0,0,622,623,5,80,0,0,623,97,1,0,0,0,624,625,3,14,7,0,625,644,3,18,
		9,0,626,628,3,166,83,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,
		629,630,1,0,0,0,630,632,1,0,0,0,631,629,1,0,0,0,632,636,5,56,0,0,633,635,
		3,166,83,0,634,633,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,
		0,0,637,639,1,0,0,0,638,636,1,0,0,0,639,640,3,14,7,0,640,641,3,18,9,0,
		641,643,1,0,0,0,642,629,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,
		1,0,0,0,645,649,1,0,0,0,646,644,1,0,0,0,647,649,3,166,83,0,648,624,1,0,
		0,0,648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,
		99,1,0,0,0,652,650,1,0,0,0,653,654,5,6,0,0,654,655,3,18,9,0,655,656,5,
		81,0,0,656,657,3,98,49,0,657,658,5,82,0,0,658,101,1,0,0,0,659,660,5,85,
		0,0,660,103,1,0,0,0,661,662,5,85,0,0,662,105,1,0,0,0,663,664,5,85,0,0,
		664,107,1,0,0,0,665,666,3,102,51,0,666,673,3,18,9,0,667,668,5,56,0,0,668,
		669,3,102,51,0,669,670,3,18,9,0,670,672,1,0,0,0,671,667,1,0,0,0,672,675,
		1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,109,1,0,0,0,675,673,1,0,0,
		0,676,677,5,7,0,0,677,678,3,102,51,0,678,680,5,81,0,0,679,681,3,32,16,
		0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,683,5,82,0,0,683,
		111,1,0,0,0,684,685,5,8,0,0,685,686,3,106,53,0,686,687,5,81,0,0,687,688,
		3,114,57,0,688,689,5,82,0,0,689,113,1,0,0,0,690,691,5,25,0,0,691,696,3,
		102,51,0,692,693,5,26,0,0,693,696,3,102,51,0,694,696,3,166,83,0,695,690,
		1,0,0,0,695,692,1,0,0,0,695,694,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,
		0,697,698,1,0,0,0,698,115,1,0,0,0,699,697,1,0,0,0,700,701,5,9,0,0,701,
		702,3,104,52,0,702,703,5,81,0,0,703,704,3,120,60,0,704,705,5,82,0,0,705,
		117,1,0,0,0,706,707,5,10,0,0,707,708,3,20,10,0,708,709,3,18,9,0,709,716,
		1,0,0,0,710,711,5,10,0,0,711,712,3,20,10,0,712,713,3,18,9,0,713,714,3,
		134,67,0,714,716,1,0,0,0,715,706,1,0,0,0,715,710,1,0,0,0,716,119,1,0,0,
		0,717,724,3,122,61,0,718,724,3,132,66,0,719,724,3,126,63,0,720,724,3,128,
		64,0,721,724,3,130,65,0,722,724,3,166,83,0,723,717,1,0,0,0,723,718,1,0,
		0,0,723,719,1,0,0,0,723,720,1,0,0,0,723,721,1,0,0,0,723,722,1,0,0,0,724,
		727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,121,1,0,0,0,727,725,1,
		0,0,0,728,729,5,19,0,0,729,749,3,108,54,0,730,731,5,20,0,0,731,749,3,108,
		54,0,732,733,5,23,0,0,733,749,3,108,54,0,734,735,5,24,0,0,735,749,3,108,
		54,0,736,737,5,19,0,0,737,738,5,83,0,0,738,739,3,124,62,0,739,740,5,84,
		0,0,740,741,3,108,54,0,741,749,1,0,0,0,742,743,5,20,0,0,743,744,5,83,0,
		0,744,745,3,124,62,0,745,746,5,84,0,0,746,747,3,108,54,0,747,749,1,0,0,
		0,748,728,1,0,0,0,748,730,1,0,0,0,748,732,1,0,0,0,748,734,1,0,0,0,748,
		736,1,0,0,0,748,742,1,0,0,0,749,123,1,0,0,0,750,751,7,5,0,0,751,752,5,
		57,0,0,752,753,5,85,0,0,753,125,1,0,0,0,754,757,5,17,0,0,755,758,3,8,4,
		0,756,758,3,20,10,0,757,755,1,0,0,0,757,756,1,0,0,0,758,759,1,0,0,0,759,
		760,3,26,13,0,760,127,1,0,0,0,761,762,5,50,0,0,762,763,3,66,33,0,763,129,
		1,0,0,0,764,765,5,53,0,0,765,766,5,85,0,0,766,767,5,87,0,0,767,768,5,87,
		0,0,768,131,1,0,0,0,769,770,7,6,0,0,770,771,3,106,53,0,771,772,5,85,0,
		0,772,133,1,0,0,0,773,775,5,79,0,0,774,776,3,48,24,0,775,774,1,0,0,0,775,
		776,1,0,0,0,776,777,1,0,0,0,777,778,5,80,0,0,778,135,1,0,0,0,779,780,5,
		12,0,0,780,781,3,18,9,0,781,789,5,81,0,0,782,783,5,17,0,0,783,784,3,8,
		4,0,784,785,3,26,13,0,785,786,3,166,83,0,786,788,1,0,0,0,787,782,1,0,0,
		0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,
		789,1,0,0,0,792,793,5,82,0,0,793,137,1,0,0,0,794,795,3,140,70,0,795,796,
		5,81,0,0,796,797,3,142,71,0,797,798,5,82,0,0,798,139,1,0,0,0,799,800,5,
		38,0,0,800,801,3,18,9,0,801,802,5,39,0,0,802,803,3,22,11,0,803,810,1,0,
		0,0,804,805,5,38,0,0,805,806,3,18,9,0,806,807,5,39,0,0,807,808,3,150,75,
		0,808,810,1,0,0,0,809,799,1,0,0,0,809,804,1,0,0,0,810,141,1,0,0,0,811,
		813,3,4,2,0,812,811,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,
		0,0,0,815,143,1,0,0,0,816,814,1,0,0,0,817,818,5,35,0,0,818,819,3,42,21,
		0,819,823,5,81,0,0,820,822,3,4,2,0,821,820,1,0,0,0,822,825,1,0,0,0,823,
		821,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,823,1,0,0,0,826,830,5,
		82,0,0,827,829,3,146,73,0,828,827,1,0,0,0,829,832,1,0,0,0,830,828,1,0,
		0,0,830,831,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,833,835,3,148,74,0,
		834,833,1,0,0,0,834,835,1,0,0,0,835,145,1,0,0,0,836,837,5,37,0,0,837,838,
		3,42,21,0,838,842,5,81,0,0,839,841,3,4,2,0,840,839,1,0,0,0,841,844,1,0,
		0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,0,0,0,845,
		846,5,82,0,0,846,147,1,0,0,0,847,848,5,36,0,0,848,852,5,81,0,0,849,851,
		3,4,2,0,850,849,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,
		0,853,855,1,0,0,0,854,852,1,0,0,0,855,856,5,82,0,0,856,149,1,0,0,0,857,
		858,5,91,0,0,858,859,5,40,0,0,859,860,5,91,0,0,860,151,1,0,0,0,861,862,
		5,52,0,0,862,863,5,79,0,0,863,868,3,158,79,0,864,865,5,56,0,0,865,867,
		3,158,79,0,866,864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,
		0,0,869,871,1,0,0,0,870,868,1,0,0,0,871,872,5,80,0,0,872,883,1,0,0,0,873,
		875,5,63,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,877,3,
		158,79,0,877,878,3,154,77,0,878,883,1,0,0,0,879,880,3,158,79,0,880,881,
		3,156,78,0,881,883,1,0,0,0,882,861,1,0,0,0,882,874,1,0,0,0,882,879,1,0,
		0,0,883,153,1,0,0,0,884,885,5,63,0,0,885,887,3,158,79,0,886,884,1,0,0,
		0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,155,1,0,0,0,890,
		888,1,0,0,0,891,892,5,81,0,0,892,893,3,158,79,0,893,894,5,82,0,0,894,897,
		1,0,0,0,895,897,3,158,79,0,896,891,1,0,0,0,896,895,1,0,0,0,897,900,1,0,
		0,0,898,896,1,0,0,0,898,899,1,0,0,0,899,157,1,0,0,0,900,898,1,0,0,0,901,
		902,7,7,0,0,902,159,1,0,0,0,903,904,7,8,0,0,904,161,1,0,0,0,905,906,5,
		87,0,0,906,163,1,0,0,0,907,908,7,9,0,0,908,165,1,0,0,0,909,910,5,94,0,
		0,910,167,1,0,0,0,81,174,181,193,222,225,243,251,257,266,274,282,293,298,
		304,310,321,325,329,336,342,349,364,369,374,377,388,399,406,430,440,445,
		452,456,458,472,479,497,502,526,537,539,549,554,570,575,583,592,598,606,
		608,615,620,629,636,644,648,650,673,680,695,697,715,723,725,748,757,775,
		789,809,814,823,830,834,842,852,868,874,882,888,896,898
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ai.Hgb.Seidl.Processor
