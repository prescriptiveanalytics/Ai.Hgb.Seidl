//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/workspaces/spa/Sidl/src/Grammar/SidlParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARRAY=1, STRING=2, INT=3, FLOAT=4, BOOL=5, STRUCT=6, MESSAGE=7, EDGETYPE=8, 
		NODETYPE=9, NODE=10, SURROGATE=11, META=12, FUNCTION=13, TYPEDEF=14, IMPORT=15, 
		INCLUDE=16, PROPERTY=17, TOPIC=18, INPUT=19, OUTPUT=20, CLIENT=21, SERVER=22, 
		PUBLISH=23, SUBSCRIBE=24, REQUEST=25, RESPONSE=26, PUB=27, SUB=28, REQ=29, 
		RES=30, AUX=31, NULL=32, TRUE=33, FALSE=34, IF=35, ELSE=36, ELSEIF=37, 
		FOR=38, IN=39, WHILE=40, RETURN=41, AS=42, IMITATES=43, WITH=44, DOT=45, 
		STAR=46, COMMA=47, COLON=48, SEMI_COLON=49, ASSIGN=50, ADD=51, MINUS=52, 
		DIV=53, ARROW=54, HEAVYARROW=55, QUERYARROW_BEGIN=56, QUERYARROW_END=57, 
		QUERYHARROW_BEGIN=58, QUERYHARROW_END=59, EQUAL=60, UNEQUAL=61, GREATERTHAN=62, 
		GREATEREQUALTHAN=63, LESSTHAN=64, LESSEQUALTHAN=65, AND=66, OR=67, OPEN_PAREN=68, 
		CLOSE_PAREN=69, OPEN_BRACE=70, CLOSE_BRACE=71, OPEN_BRACKET=72, CLOSE_BRACKET=73, 
		NAME=74, WORD=75, STRINGLITERAL=76, NORMALSTRING=77, CHARSTRING=78, LONGSTRING=79, 
		INTEGER=80, FLOATINGPOINTNUMBER=81, WHITESPACE=82, STMEND=83, COMMENT=84, 
		LINECOMMENT=85, SHEBANG=86;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_atomictypeortypename = 7, 
		RULE_graphtype = 8, RULE_variable = 9, RULE_typename = 10, RULE_field = 11, 
		RULE_fieldlist = 12, RULE_variablelist = 13, RULE_typedvariablelist = 14, 
		RULE_customtypedvariablelist = 15, RULE_messageparameterlist = 16, RULE_messageparametersignature = 17, 
		RULE_expressionlist = 18, RULE_expression = 19, RULE_assignmentlist = 20, 
		RULE_assignment = 21, RULE_query = 22, RULE_comparator = 23, RULE_arraydeclaration = 24, 
		RULE_arrayaccess = 25, RULE_fieldaccess = 26, RULE_lefthandside = 27, 
		RULE_importstatement = 28, RULE_typedefstatement = 29, RULE_nodeconnectionstatement = 30, 
		RULE_surrogatedefinitionstatement = 31, RULE_surrogatebody = 32, RULE_functiondefinition = 33, 
		RULE_functionbody = 34, RULE_returnstatement = 35, RULE_functioncall = 36, 
		RULE_structpropertylist = 37, RULE_structdefinition = 38, RULE_messagetypename = 39, 
		RULE_nodetypename = 40, RULE_edgetypename = 41, RULE_messagetypelist = 42, 
		RULE_messagedefinition = 43, RULE_edgetypedefinition = 44, RULE_edgetypebody = 45, 
		RULE_nodetypedefinition = 46, RULE_nodetypesignature = 47, RULE_nodedefinition = 48, 
		RULE_nodebody = 49, RULE_nodebodyinout = 50, RULE_inoutoption = 51, RULE_nodebodyinclude = 52, 
		RULE_nodebodyproperty = 53, RULE_nodebodyclientserver = 54, RULE_nodeconstructor = 55, 
		RULE_metadefinition = 56, RULE_number = 57, RULE_string = 58, RULE_boolean = 59, 
		RULE_terminator = 60;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"atomictypeortypename", "graphtype", "variable", "typename", "field", 
		"fieldlist", "variablelist", "typedvariablelist", "customtypedvariablelist", 
		"messageparameterlist", "messageparametersignature", "expressionlist", 
		"expression", "assignmentlist", "assignment", "query", "comparator", "arraydeclaration", 
		"arrayaccess", "fieldaccess", "lefthandside", "importstatement", "typedefstatement", 
		"nodeconnectionstatement", "surrogatedefinitionstatement", "surrogatebody", 
		"functiondefinition", "functionbody", "returnstatement", "functioncall", 
		"structpropertylist", "structdefinition", "messagetypename", "nodetypename", 
		"edgetypename", "messagetypelist", "messagedefinition", "edgetypedefinition", 
		"edgetypebody", "nodetypedefinition", "nodetypesignature", "nodedefinition", 
		"nodebody", "nodebodyinout", "inoutoption", "nodebodyinclude", "nodebodyproperty", 
		"nodebodyclientserver", "nodeconstructor", "metadefinition", "number", 
		"string", "boolean", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", "'message'", 
		"'edgetype'", "'nodetype'", "'node'", "'surrogate'", "'meta'", "'function'", 
		"'typedef'", "'import'", "'include'", "'property'", "'topic'", "'input'", 
		"'output'", "'client'", "'server'", "'publish'", "'subscribe'", "'request'", 
		"'response'", "'pub'", "'sub'", "'req'", "'res'", "'aux'", "'null'", "'true'", 
		"'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'while'", 
		"'return'", "'as'", "'imitates'", "'with'", "'.'", "'*'", "','", "':'", 
		"';'", "'='", "'+'", "'-'", "'/'", "'-->'", "'==>'", "'-['", "']->'", 
		"'=['", "']=>'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'and'", 
		"'or'", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"EDGETYPE", "NODETYPE", "NODE", "SURROGATE", "META", "FUNCTION", "TYPEDEF", 
		"IMPORT", "INCLUDE", "PROPERTY", "TOPIC", "INPUT", "OUTPUT", "CLIENT", 
		"SERVER", "PUBLISH", "SUBSCRIBE", "REQUEST", "RESPONSE", "PUB", "SUB", 
		"REQ", "RES", "AUX", "NULL", "TRUE", "FALSE", "IF", "ELSE", "ELSEIF", 
		"FOR", "IN", "WHILE", "RETURN", "AS", "IMITATES", "WITH", "DOT", "STAR", 
		"COMMA", "COLON", "SEMI_COLON", "ASSIGN", "ADD", "MINUS", "DIV", "ARROW", 
		"HEAVYARROW", "QUERYARROW_BEGIN", "QUERYARROW_END", "QUERYHARROW_BEGIN", 
		"QUERYHARROW_END", "EQUAL", "UNEQUAL", "GREATERTHAN", "GREATEREQUALTHAN", 
		"LESSTHAN", "LESSEQUALTHAN", "AND", "OR", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", 
		"WORD", "STRINGLITERAL", "NORMALSTRING", "CHARSTRING", "LONGSTRING", "INTEGER", 
		"FLOATINGPOINTNUMBER", "WHITESPACE", "STMEND", "COMMENT", "LINECOMMENT", 
		"SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			set();
			State = 123;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57340L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8209L) != 0)) {
				{
				{
				State = 125;
				statement();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SurrogateDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
			return GetRuleContext<SurrogatedefinitionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public SurrogateDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogateDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetaDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EdgetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypedefinitionContext edgetypedefinition() {
			return GetRuleContext<EdgetypedefinitionContext>(0);
		}
		public EdgetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeConnectionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeconnectionstatementContext nodeconnectionstatement() {
			return GetRuleContext<NodeconnectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public NodeConnectionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeConnectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedefStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedefstatementContext typedefstatement() {
			return GetRuleContext<TypedefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TypedefStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 133;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 134;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 137;
				variablelist();
				State = 138;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 140;
				variablelist();
				State = 141;
				Match(ASSIGN);
				State = 142;
				expressionlist();
				State = 143;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 145;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 146;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 149;
				variablelist();
				State = 150;
				Match(ASSIGN);
				State = 151;
				expressionlist();
				}
				break;
			case 6:
				_localctx = new StructDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 153;
				structdefinition();
				}
				break;
			case 7:
				_localctx = new MessageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 154;
				messagedefinition();
				}
				break;
			case 8:
				_localctx = new EdgetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 155;
				edgetypedefinition();
				}
				break;
			case 9:
				_localctx = new NodetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 156;
				nodetypedefinition();
				}
				break;
			case 10:
				_localctx = new NodeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 157;
				nodedefinition();
				}
				break;
			case 11:
				_localctx = new MetaDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 158;
				metadefinition();
				}
				break;
			case 12:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 159;
				importstatement();
				}
				break;
			case 13:
				_localctx = new TypedefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 160;
				typedefstatement();
				State = 161;
				terminator();
				}
				break;
			case 14:
				_localctx = new NodeConnectionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 163;
				nodeconnectionstatement();
				State = 164;
				terminator();
				}
				break;
			case 15:
				_localctx = new SurrogateDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 166;
				surrogatedefinitionstatement();
				State = 167;
				terminator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 171;
				variable();
				}
			}

			State = 174;
			Match(OPEN_BRACE);
			State = 175;
			set();
			State = 176;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180;
				atomictype();
				State = 181;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				complextype();
				State = 184;
				Match(ARRAY);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186;
				typename();
				State = 187;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeortypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public AtomictypeortypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictypeortypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictypeortypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeortypenameContext atomictypeortypename() {
		AtomictypeortypenameContext _localctx = new AtomictypeortypenameContext(Context, State);
		EnterRule(_localctx, 14, RULE_atomictypeortypename);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				atomictype();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SidlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SidlParser.DOT, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			variable();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 206;
				Match(DOT);
				State = 207;
				variable();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			field();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 214;
				Match(COMMA);
				State = 215;
				field();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 26, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			variable();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 222;
				Match(COMMA);
				State = 223;
				variable();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 28, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			atomictype();
			State = 230;
			variable();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 231;
				Match(COMMA);
				State = 232;
				atomictype();
				State = 233;
				variable();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomtypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public CustomtypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customtypedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomtypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomtypedvariablelistContext customtypedvariablelist() {
		CustomtypedvariablelistContext _localctx = new CustomtypedvariablelistContext(Context, State);
		EnterRule(_localctx, 30, RULE_customtypedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 240;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 241;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 244;
			variable();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 245;
				Match(COMMA);
				State = 248;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 246;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 247;
					atomictype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 250;
				variable();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext[] messageparametersignature() {
			return GetRuleContexts<MessageparametersignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext messageparametersignature(int i) {
			return GetRuleContext<MessageparametersignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public MessageparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparameterlistContext messageparameterlist() {
		MessageparameterlistContext _localctx = new MessageparameterlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_messageparameterlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			messageparametersignature();
			State = 258;
			variable();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 259;
				Match(COMMA);
				State = 260;
				messageparametersignature();
				State = 261;
				variable();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparametersignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(SidlParser.TOPIC, 0); }
		public MessageparametersignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparametersignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparametersignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparametersignatureContext messageparametersignature() {
		MessageparametersignatureContext _localctx = new MessageparametersignatureContext(Context, State);
		EnterRule(_localctx, 34, RULE_messageparametersignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOPIC) {
				{
				State = 268;
				Match(TOPIC);
				}
			}

			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 271;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 272;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			expression();
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 276;
					Match(COMMA);
					State = 277;
					expression();
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		int _la;
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287;
				variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 288;
				field();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 289;
				functiondefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 290;
				functioncall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 291;
				importstatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 292;
				assignmentlist();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 293;
				Match(OPEN_BRACE);
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 294;
					assignmentlist();
					}
				}

				State = 297;
				Match(CLOSE_BRACE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 298;
				Match(OPEN_BRACKET);
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 299;
					variablelist();
					}
				}

				State = 302;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public AssignmentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentlistContext assignmentlist() {
		AssignmentlistContext _localctx = new AssignmentlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			assignment();
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 306;
					Match(COMMA);
					State = 307;
					assignment();
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				variable();
				State = 314;
				Match(ASSIGN);
				State = 315;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				field();
				State = 318;
				Match(ASSIGN);
				State = 319;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 44, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			field();
			State = 324;
			comparator();
			State = 325;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SidlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(SidlParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(SidlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUALTHAN() { return GetToken(SidlParser.GREATEREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(SidlParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUALTHAN() { return GetToken(SidlParser.LESSEQUALTHAN, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			type();
			State = 330;
			Match(ARRAY);
			State = 331;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayaccess);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				variable();
				State = 334;
				Match(OPEN_BRACKET);
				State = 335;
				expression();
				State = 336;
				Match(CLOSE_BRACKET);
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				@string();
				State = 339;
				Match(OPEN_BRACKET);
				State = 340;
				expression();
				State = 341;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldaccess);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				variable();
				State = 346;
				Match(DOT);
				State = 347;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				arrayaccess();
				State = 350;
				Match(DOT);
				State = 351;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 54, RULE_lefthandside);
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		public VariableContext from;
		public VariableContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SidlParser.AS, 0); }
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_importstatement);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360;
				Match(IMPORT);
				State = 361;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				Match(IMPORT);
				State = 363;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 364;
				Match(IMPORT);
				State = 365;
				_localctx.from = variable();
				State = 366;
				Match(AS);
				State = 367;
				_localctx.to = variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 369;
				Match(IMPORT);
				State = 370;
				@string();
				State = 371;
				Match(AS);
				State = 372;
				variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(SidlParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefstatementContext typedefstatement() {
		TypedefstatementContext _localctx = new TypedefstatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_typedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(TYPEDEF);
			State = 379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 377;
				atomictype();
				}
				break;
			case NAME:
				{
				State = 378;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 381;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconnectionstatementContext : ParserRuleContext {
		public FieldlistContext sources;
		public FieldlistContext sinks;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext[] fieldlist() {
			return GetRuleContexts<FieldlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist(int i) {
			return GetRuleContext<FieldlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAVYARROW() { return GetToken(SidlParser.HEAVYARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_BEGIN() { return GetToken(SidlParser.QUERYARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYARROW_END() { return GetToken(SidlParser.QUERYARROW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_BEGIN() { return GetToken(SidlParser.QUERYHARROW_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERYHARROW_END() { return GetToken(SidlParser.QUERYHARROW_END, 0); }
		public NodeconnectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconnectionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconnectionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconnectionstatementContext nodeconnectionstatement() {
		NodeconnectionstatementContext _localctx = new NodeconnectionstatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_nodeconnectionstatement);
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				_localctx.sources = fieldlist();
				State = 384;
				Match(ARROW);
				State = 385;
				_localctx.sinks = fieldlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				_localctx.sources = fieldlist();
				State = 388;
				Match(HEAVYARROW);
				State = 389;
				_localctx.sinks = fieldlist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391;
				_localctx.sources = fieldlist();
				State = 392;
				Match(QUERYARROW_BEGIN);
				State = 393;
				query();
				State = 394;
				Match(QUERYARROW_END);
				State = 395;
				_localctx.sinks = fieldlist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 397;
				_localctx.sources = fieldlist();
				State = 398;
				Match(QUERYHARROW_BEGIN);
				State = 399;
				query();
				State = 400;
				Match(QUERYHARROW_END);
				State = 401;
				_localctx.sinks = fieldlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatedefinitionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SURROGATE() { return GetToken(SidlParser.SURROGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SurrogatebodyContext surrogatebody() {
			return GetRuleContext<SurrogatebodyContext>(0);
		}
		public SurrogatedefinitionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatedefinitionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatedefinitionstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatedefinitionstatementContext surrogatedefinitionstatement() {
		SurrogatedefinitionstatementContext _localctx = new SurrogatedefinitionstatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_surrogatedefinitionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(SURROGATE);
			State = 406;
			variable();
			State = 407;
			surrogatebody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurrogatebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(SidlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(SidlParser.WITH, i);
		}
		public SurrogatebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surrogatebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurrogatebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurrogatebodyContext surrogatebody() {
		SurrogatebodyContext _localctx = new SurrogatebodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_surrogatebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(OPEN_BRACE);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==WITH) {
				{
				State = 414;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 410;
					Match(FOR);
					State = 411;
					field();
					}
					break;
				case WITH:
					{
					State = 412;
					Match(WITH);
					State = 413;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 419;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 66, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(FUNCTION);
			State = 422;
			variable();
			State = 423;
			Match(ASSIGN);
			State = 424;
			Match(OPEN_PAREN);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 425;
				customtypedvariablelist();
				}
			}

			State = 428;
			Match(CLOSE_PAREN);
			State = 429;
			Match(OPEN_PAREN);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME) {
				{
				State = 430;
				customtypedvariablelist();
				}
			}

			State = 433;
			Match(CLOSE_PAREN);
			State = 434;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(OPEN_BRACE);
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3607772585980L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8209L) != 0)) {
				{
				State = 483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 437;
					statement();
					}
					break;
				case 2:
					{
					State = 438;
					Match(IF);
					State = 439;
					expression();
					State = 440;
					scope();
					State = 447;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 441;
						Match(ELSEIF);
						State = 442;
						expression();
						State = 443;
						scope();
						}
						}
						State = 449;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 450;
						Match(ELSE);
						State = 451;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 454;
					Match(WHILE);
					State = 455;
					expression();
					State = 456;
					scope();
					}
					break;
				case 4:
					{
					State = 458;
					Match(FOR);
					State = 460;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						State = 459;
						type();
						}
						break;
					}
					State = 462;
					variablelist();
					State = 463;
					Match(ASSIGN);
					State = 464;
					expressionlist();
					State = 465;
					Match(COMMA);
					State = 466;
					expression();
					State = 469;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 467;
						Match(COMMA);
						State = 468;
						expression();
						}
					}

					State = 471;
					scope();
					}
					break;
				case 5:
					{
					State = 473;
					Match(FOR);
					State = 475;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						State = 474;
						type();
						}
						break;
					}
					State = 477;
					variable();
					State = 478;
					Match(IN);
					State = 479;
					variable();
					State = 480;
					scope();
					}
					break;
				case 6:
					{
					State = 482;
					returnstatement();
					}
					break;
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 488;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(RETURN);
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 491;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 72, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			variable();
			State = 495;
			Match(OPEN_PAREN);
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 496;
				variablelist();
				}
			}

			State = 499;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructpropertylistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext[] atomictypeortypename() {
			return GetRuleContexts<AtomictypeortypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext atomictypeortypename(int i) {
			return GetRuleContext<AtomictypeortypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public StructpropertylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structpropertylist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructpropertylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructpropertylistContext structpropertylist() {
		StructpropertylistContext _localctx = new StructpropertylistContext(Context, State);
		EnterRule(_localctx, 74, RULE_structpropertylist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0) || _la==NAME || _la==STMEND) {
				{
				State = 525;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
				case NAME:
					{
					State = 501;
					atomictypeortypename();
					State = 502;
					variable();
					State = 521;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 506;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 503;
								terminator();
								}
								}
								State = 508;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 509;
							Match(COMMA);
							State = 513;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STMEND) {
								{
								{
								State = 510;
								terminator();
								}
								}
								State = 515;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 516;
							atomictypeortypename();
							State = 517;
							variable();
							}
							} 
						}
						State = 523;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
					}
					}
					break;
				case STMEND:
					{
					State = 524;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructpropertylistContext structpropertylist() {
			return GetRuleContext<StructpropertylistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 76, RULE_structdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(STRUCT);
			State = 531;
			variable();
			State = 532;
			Match(OPEN_BRACE);
			State = 533;
			structpropertylist();
			State = 534;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 78, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 80, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public EdgetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypenameContext edgetypename() {
		EdgetypenameContext _localctx = new EdgetypenameContext(Context, State);
		EnterRule(_localctx, 82, RULE_edgetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 84, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			messagetypename();
			State = 543;
			variable();
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 544;
				Match(COMMA);
				State = 545;
				messagetypename();
				State = 546;
				variable();
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageparameterlistContext messageparameterlist() {
			return GetRuleContext<MessageparameterlistContext>(0);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(MESSAGE);
			State = 554;
			messagetypename();
			State = 555;
			Match(OPEN_BRACE);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262204L) != 0) || _la==NAME) {
				{
				State = 556;
				messageparameterlist();
				}
			}

			State = 559;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGETYPE() { return GetToken(SidlParser.EDGETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypebodyContext edgetypebody() {
			return GetRuleContext<EdgetypebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		public EdgetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypedefinitionContext edgetypedefinition() {
		EdgetypedefinitionContext _localctx = new EdgetypedefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_edgetypedefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(EDGETYPE);
			State = 562;
			edgetypename();
			State = 563;
			Match(OPEN_BRACE);
			State = 564;
			edgetypebody();
			State = 565;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgetypebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REQUEST() { return GetTokens(SidlParser.REQUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST(int i) {
			return GetToken(SidlParser.REQUEST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESPONSE() { return GetTokens(SidlParser.RESPONSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE(int i) {
			return GetToken(SidlParser.RESPONSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public EdgetypebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgetypebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgetypebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgetypebodyContext edgetypebody() {
		EdgetypebodyContext _localctx = new EdgetypebodyContext(Context, State);
		EnterRule(_localctx, 90, RULE_edgetypebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 288230376151711747L) != 0)) {
				{
				State = 572;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REQUEST:
					{
					State = 567;
					Match(REQUEST);
					State = 568;
					messagetypename();
					}
					break;
				case RESPONSE:
					{
					State = 569;
					Match(RESPONSE);
					State = 570;
					messagetypename();
					}
					break;
				case STMEND:
					{
					State = 571;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 92, RULE_nodetypedefinition);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577;
				Match(NODETYPE);
				State = 578;
				nodetypename();
				State = 579;
				Match(OPEN_BRACE);
				State = 580;
				nodebody();
				State = 581;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583;
				Match(NODETYPE);
				State = 584;
				nodetypename();
				State = 585;
				nodetypesignature();
				State = 586;
				Match(OPEN_BRACE);
				State = 587;
				nodebody();
				State = 588;
				Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypesignatureContext : ParserRuleContext {
		public MessagetypelistContext inputs;
		public MessagetypelistContext outputs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext[] messagetypelist() {
			return GetRuleContexts<MessagetypelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist(int i) {
			return GetRuleContext<MessagetypelistContext>(i);
		}
		public NodetypesignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypesignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypesignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypesignatureContext nodetypesignature() {
		NodetypesignatureContext _localctx = new NodetypesignatureContext(Context, State);
		EnterRule(_localctx, 94, RULE_nodetypesignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(OPEN_PAREN);
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 593;
				_localctx.inputs = messagetypelist();
				}
			}

			State = 596;
			Match(ARROW);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 597;
				_localctx.outputs = messagetypelist();
				}
			}

			State = 600;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeconstructorContext nodeconstructor() {
			return GetRuleContext<NodeconstructorContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_nodedefinition);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				Match(NODE);
				State = 603;
				variable();
				State = 604;
				Match(OPEN_BRACE);
				State = 605;
				nodebody();
				State = 606;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608;
				Match(NODE);
				State = 609;
				variable();
				State = 610;
				nodetypesignature();
				State = 615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 611;
					Match(OPEN_BRACE);
					State = 612;
					nodebody();
					State = 613;
					Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 617;
				Match(NODE);
				State = 618;
				typename();
				State = 619;
				variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 621;
				Match(NODE);
				State = 622;
				typename();
				State = 623;
				variable();
				State = 624;
				nodeconstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		public NodebodyinoutContext inout;
		public NodebodyclientserverContext clientserver;
		public NodebodyincludeContext include;
		public NodebodypropertyContext property;
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext[] nodebodyinout() {
			return GetRuleContexts<NodebodyinoutContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyinoutContext nodebodyinout(int i) {
			return GetRuleContext<NodebodyinoutContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext[] nodebodyclientserver() {
			return GetRuleContexts<NodebodyclientserverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyclientserverContext nodebodyclientserver(int i) {
			return GetRuleContext<NodebodyclientserverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyincludeContext[] nodebodyinclude() {
			return GetRuleContexts<NodebodyincludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyincludeContext nodebodyinclude(int i) {
			return GetRuleContext<NodebodyincludeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext[] nodebodyproperty() {
			return GetRuleContexts<NodebodypropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodebodypropertyContext nodebodyproperty(int i) {
			return GetRuleContext<NodebodypropertyContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8060928L) != 0) || _la==STMEND) {
				{
				State = 633;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
					{
					State = 628;
					_localctx.inout = nodebodyinout();
					}
					break;
				case CLIENT:
				case SERVER:
					{
					State = 629;
					_localctx.clientserver = nodebodyclientserver();
					}
					break;
				case INCLUDE:
					{
					State = 630;
					_localctx.include = nodebodyinclude();
					}
					break;
				case PROPERTY:
					{
					State = 631;
					_localctx.property = nodebodyproperty();
					}
					break;
				case STMEND:
					{
					State = 632;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyinoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SidlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist() {
			return GetRuleContext<MessagetypelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(SidlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InoutoptionContext inoutoption() {
			return GetRuleContext<InoutoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SidlParser.CLOSE_BRACKET, 0); }
		public NodebodyinoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinout; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinout(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyinoutContext nodebodyinout() {
		NodebodyinoutContext _localctx = new NodebodyinoutContext(Context, State);
		EnterRule(_localctx, 100, RULE_nodebodyinout);
		try {
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 638;
				Match(INPUT);
				State = 639;
				messagetypelist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 640;
				Match(OUTPUT);
				State = 641;
				messagetypelist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 642;
				Match(INPUT);
				State = 643;
				Match(OPEN_BRACKET);
				State = 644;
				inoutoption();
				State = 645;
				Match(CLOSE_BRACKET);
				State = 646;
				messagetypelist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 648;
				Match(OUTPUT);
				State = 649;
				Match(OPEN_BRACKET);
				State = 650;
				inoutoption();
				State = 651;
				Match(CLOSE_BRACKET);
				State = 652;
				messagetypelist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InoutoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUX() { return GetToken(SidlParser.AUX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQ() { return GetToken(SidlParser.REQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES() { return GetToken(SidlParser.RES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUEST() { return GetToken(SidlParser.REQUEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPONSE() { return GetToken(SidlParser.RESPONSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(SidlParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(SidlParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLISH() { return GetToken(SidlParser.PUBLISH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIBE() { return GetToken(SidlParser.SUBSCRIBE, 0); }
		public InoutoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inoutoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInoutoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InoutoptionContext inoutoption() {
		InoutoptionContext _localctx = new InoutoptionContext(Context, State);
		EnterRule(_localctx, 102, RULE_inoutoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4286578688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 657;
			Match(COLON);
			State = 658;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyincludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(SidlParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public NodebodyincludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyinclude; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyinclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyincludeContext nodebodyinclude() {
		NodebodyincludeContext _localctx = new NodebodyincludeContext(Context, State);
		EnterRule(_localctx, 104, RULE_nodebodyinclude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(INCLUDE);
			State = 661;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodypropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SidlParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodebodypropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyproperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodypropertyContext nodebodyproperty() {
		NodebodypropertyContext _localctx = new NodebodypropertyContext(Context, State);
		EnterRule(_localctx, 106, RULE_nodebodyproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(PROPERTY);
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 664;
				type();
				}
				break;
			case 2:
				{
				State = 665;
				typename();
				}
				break;
			}
			State = 668;
			variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyclientserverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdgetypenameContext edgetypename() {
			return GetRuleContext<EdgetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(SidlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(SidlParser.SERVER, 0); }
		public NodebodyclientserverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebodyclientserver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebodyclientserver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyclientserverContext nodebodyclientserver() {
		NodebodyclientserverContext _localctx = new NodebodyclientserverContext(Context, State);
		EnterRule(_localctx, 108, RULE_nodebodyclientserver);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			_la = TokenStream.LA(1);
			if ( !(_la==CLIENT || _la==SERVER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 671;
			edgetypename();
			State = 672;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentlistContext assignmentlist() {
			return GetRuleContext<AssignmentlistContext>(0);
		}
		public NodeconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeconstructorContext nodeconstructor() {
		NodeconstructorContext _localctx = new NodeconstructorContext(Context, State);
		EnterRule(_localctx, 110, RULE_nodeconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			Match(OPEN_PAREN);
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 675;
				assignmentlist();
				}
			}

			State = 678;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 112, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(META);
			State = 681;
			variable();
			State = 682;
			Match(OPEN_BRACE);
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 683;
				Match(PROPERTY);
				State = 684;
				type();
				State = 685;
				variablelist();
				State = 686;
				terminator();
				}
				}
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 693;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 114, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(SidlParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 116, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SidlParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 118, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 120, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,86,704,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,1,5,1,127,8,1,10,
		1,12,1,130,9,1,1,2,1,2,1,2,1,2,3,2,136,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,148,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,170,8,2,1,3,3,3,173,8,3,1,3,1,3,
		1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,190,8,4,1,5,1,
		5,1,6,1,6,1,7,1,7,3,7,198,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
		5,11,209,8,11,10,11,12,11,212,9,11,1,12,1,12,1,12,5,12,217,8,12,10,12,
		12,12,220,9,12,1,13,1,13,1,13,5,13,225,8,13,10,13,12,13,228,9,13,1,14,
		1,14,1,14,1,14,1,14,1,14,5,14,236,8,14,10,14,12,14,239,9,14,1,15,1,15,
		3,15,243,8,15,1,15,1,15,1,15,1,15,3,15,249,8,15,1,15,1,15,5,15,253,8,15,
		10,15,12,15,256,9,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,264,8,16,10,16,
		12,16,267,9,16,1,17,3,17,270,8,17,1,17,1,17,3,17,274,8,17,1,18,1,18,1,
		18,5,18,279,8,18,10,18,12,18,282,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,3,19,296,8,19,1,19,1,19,1,19,3,19,301,8,19,
		1,19,3,19,304,8,19,1,20,1,20,1,20,5,20,309,8,20,10,20,12,20,312,9,20,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,322,8,21,1,22,1,22,1,22,1,22,
		1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,3,25,344,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,354,
		8,26,1,27,1,27,1,27,3,27,359,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,375,8,28,1,29,1,29,1,29,3,29,380,
		8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,404,8,30,1,31,1,31,1,
		31,1,31,1,32,1,32,1,32,1,32,1,32,5,32,415,8,32,10,32,12,32,418,9,32,1,
		32,1,32,1,33,1,33,1,33,1,33,1,33,3,33,427,8,33,1,33,1,33,1,33,3,33,432,
		8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
		446,8,34,10,34,12,34,449,9,34,1,34,1,34,3,34,453,8,34,1,34,1,34,1,34,1,
		34,1,34,1,34,3,34,461,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,470,
		8,34,1,34,1,34,1,34,1,34,3,34,476,8,34,1,34,1,34,1,34,1,34,1,34,1,34,5,
		34,484,8,34,10,34,12,34,487,9,34,1,34,1,34,1,35,1,35,3,35,493,8,35,1,36,
		1,36,1,36,3,36,498,8,36,1,36,1,36,1,37,1,37,1,37,5,37,505,8,37,10,37,12,
		37,508,9,37,1,37,1,37,5,37,512,8,37,10,37,12,37,515,9,37,1,37,1,37,1,37,
		5,37,520,8,37,10,37,12,37,523,9,37,1,37,5,37,526,8,37,10,37,12,37,529,
		9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
		1,42,1,42,1,42,1,42,1,42,5,42,549,8,42,10,42,12,42,552,9,42,1,43,1,43,
		1,43,1,43,3,43,558,8,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,
		45,1,45,1,45,1,45,5,45,573,8,45,10,45,12,45,576,9,45,1,46,1,46,1,46,1,
		46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,591,8,46,1,47,1,47,
		3,47,595,8,47,1,47,1,47,3,47,599,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,616,8,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,3,48,627,8,48,1,49,1,49,1,49,1,49,1,49,5,
		49,634,8,49,10,49,12,49,637,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,655,8,50,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,53,1,53,1,53,3,53,667,8,53,1,53,1,53,1,54,1,54,1,
		54,1,54,1,55,1,55,3,55,677,8,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,5,56,689,8,56,10,56,12,56,692,9,56,1,56,1,56,1,57,1,57,1,58,
		1,58,1,59,1,59,1,60,1,60,1,60,0,0,61,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,0,7,1,0,2,5,3,0,7,7,9,10,12,12,1,0,60,65,1,0,23,31,1,0,21,
		22,1,0,80,81,1,0,33,34,747,0,122,1,0,0,0,2,128,1,0,0,0,4,169,1,0,0,0,6,
		172,1,0,0,0,8,189,1,0,0,0,10,191,1,0,0,0,12,193,1,0,0,0,14,197,1,0,0,0,
		16,199,1,0,0,0,18,201,1,0,0,0,20,203,1,0,0,0,22,205,1,0,0,0,24,213,1,0,
		0,0,26,221,1,0,0,0,28,229,1,0,0,0,30,242,1,0,0,0,32,257,1,0,0,0,34,269,
		1,0,0,0,36,275,1,0,0,0,38,303,1,0,0,0,40,305,1,0,0,0,42,321,1,0,0,0,44,
		323,1,0,0,0,46,327,1,0,0,0,48,329,1,0,0,0,50,343,1,0,0,0,52,353,1,0,0,
		0,54,358,1,0,0,0,56,374,1,0,0,0,58,376,1,0,0,0,60,403,1,0,0,0,62,405,1,
		0,0,0,64,409,1,0,0,0,66,421,1,0,0,0,68,436,1,0,0,0,70,490,1,0,0,0,72,494,
		1,0,0,0,74,527,1,0,0,0,76,530,1,0,0,0,78,536,1,0,0,0,80,538,1,0,0,0,82,
		540,1,0,0,0,84,542,1,0,0,0,86,553,1,0,0,0,88,561,1,0,0,0,90,574,1,0,0,
		0,92,590,1,0,0,0,94,592,1,0,0,0,96,626,1,0,0,0,98,635,1,0,0,0,100,654,
		1,0,0,0,102,656,1,0,0,0,104,660,1,0,0,0,106,663,1,0,0,0,108,670,1,0,0,
		0,110,674,1,0,0,0,112,680,1,0,0,0,114,695,1,0,0,0,116,697,1,0,0,0,118,
		699,1,0,0,0,120,701,1,0,0,0,122,123,3,2,1,0,123,124,5,0,0,1,124,1,1,0,
		0,0,125,127,3,4,2,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,
		129,1,0,0,0,129,3,1,0,0,0,130,128,1,0,0,0,131,170,3,120,60,0,132,170,3,
		6,3,0,133,136,3,10,5,0,134,136,3,20,10,0,135,133,1,0,0,0,135,134,1,0,0,
		0,136,137,1,0,0,0,137,138,3,26,13,0,138,139,3,120,60,0,139,170,1,0,0,0,
		140,141,3,26,13,0,141,142,5,50,0,0,142,143,3,36,18,0,143,144,3,120,60,
		0,144,170,1,0,0,0,145,148,3,10,5,0,146,148,3,20,10,0,147,145,1,0,0,0,147,
		146,1,0,0,0,148,149,1,0,0,0,149,150,3,26,13,0,150,151,5,50,0,0,151,152,
		3,36,18,0,152,170,1,0,0,0,153,170,3,76,38,0,154,170,3,86,43,0,155,170,
		3,88,44,0,156,170,3,92,46,0,157,170,3,96,48,0,158,170,3,112,56,0,159,170,
		3,56,28,0,160,161,3,58,29,0,161,162,3,120,60,0,162,170,1,0,0,0,163,164,
		3,60,30,0,164,165,3,120,60,0,165,170,1,0,0,0,166,167,3,62,31,0,167,168,
		3,120,60,0,168,170,1,0,0,0,169,131,1,0,0,0,169,132,1,0,0,0,169,135,1,0,
		0,0,169,140,1,0,0,0,169,147,1,0,0,0,169,153,1,0,0,0,169,154,1,0,0,0,169,
		155,1,0,0,0,169,156,1,0,0,0,169,157,1,0,0,0,169,158,1,0,0,0,169,159,1,
		0,0,0,169,160,1,0,0,0,169,163,1,0,0,0,169,166,1,0,0,0,170,5,1,0,0,0,171,
		173,3,18,9,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,5,
		70,0,0,175,176,3,2,1,0,176,177,5,71,0,0,177,7,1,0,0,0,178,190,3,10,5,0,
		179,190,3,12,6,0,180,181,3,10,5,0,181,182,5,1,0,0,182,190,1,0,0,0,183,
		184,3,12,6,0,184,185,5,1,0,0,185,190,1,0,0,0,186,187,3,20,10,0,187,188,
		5,1,0,0,188,190,1,0,0,0,189,178,1,0,0,0,189,179,1,0,0,0,189,180,1,0,0,
		0,189,183,1,0,0,0,189,186,1,0,0,0,190,9,1,0,0,0,191,192,7,0,0,0,192,11,
		1,0,0,0,193,194,5,6,0,0,194,13,1,0,0,0,195,198,3,10,5,0,196,198,3,20,10,
		0,197,195,1,0,0,0,197,196,1,0,0,0,198,15,1,0,0,0,199,200,7,1,0,0,200,17,
		1,0,0,0,201,202,5,74,0,0,202,19,1,0,0,0,203,204,5,74,0,0,204,21,1,0,0,
		0,205,210,3,18,9,0,206,207,5,45,0,0,207,209,3,18,9,0,208,206,1,0,0,0,209,
		212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,23,1,0,0,0,212,210,1,0,
		0,0,213,218,3,22,11,0,214,215,5,47,0,0,215,217,3,22,11,0,216,214,1,0,0,
		0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,25,1,0,0,0,220,218,
		1,0,0,0,221,226,3,18,9,0,222,223,5,47,0,0,223,225,3,18,9,0,224,222,1,0,
		0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,27,1,0,0,0,228,
		226,1,0,0,0,229,230,3,10,5,0,230,237,3,18,9,0,231,232,5,47,0,0,232,233,
		3,10,5,0,233,234,3,18,9,0,234,236,1,0,0,0,235,231,1,0,0,0,236,239,1,0,
		0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,29,1,0,0,0,239,237,1,0,0,0,240,
		243,3,20,10,0,241,243,3,10,5,0,242,240,1,0,0,0,242,241,1,0,0,0,243,244,
		1,0,0,0,244,254,3,18,9,0,245,248,5,47,0,0,246,249,3,20,10,0,247,249,3,
		10,5,0,248,246,1,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,251,3,18,9,
		0,251,253,1,0,0,0,252,245,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,
		255,1,0,0,0,255,31,1,0,0,0,256,254,1,0,0,0,257,258,3,34,17,0,258,265,3,
		18,9,0,259,260,5,47,0,0,260,261,3,34,17,0,261,262,3,18,9,0,262,264,1,0,
		0,0,263,259,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
		33,1,0,0,0,267,265,1,0,0,0,268,270,5,18,0,0,269,268,1,0,0,0,269,270,1,
		0,0,0,270,273,1,0,0,0,271,274,3,20,10,0,272,274,3,10,5,0,273,271,1,0,0,
		0,273,272,1,0,0,0,274,35,1,0,0,0,275,280,3,38,19,0,276,277,5,47,0,0,277,
		279,3,38,19,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,
		1,0,0,0,281,37,1,0,0,0,282,280,1,0,0,0,283,304,5,32,0,0,284,304,3,118,
		59,0,285,304,3,114,57,0,286,304,3,116,58,0,287,304,3,18,9,0,288,304,3,
		22,11,0,289,304,3,66,33,0,290,304,3,72,36,0,291,304,3,56,28,0,292,304,
		3,40,20,0,293,295,5,70,0,0,294,296,3,40,20,0,295,294,1,0,0,0,295,296,1,
		0,0,0,296,297,1,0,0,0,297,304,5,71,0,0,298,300,5,72,0,0,299,301,3,26,13,
		0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,5,73,0,0,303,
		283,1,0,0,0,303,284,1,0,0,0,303,285,1,0,0,0,303,286,1,0,0,0,303,287,1,
		0,0,0,303,288,1,0,0,0,303,289,1,0,0,0,303,290,1,0,0,0,303,291,1,0,0,0,
		303,292,1,0,0,0,303,293,1,0,0,0,303,298,1,0,0,0,304,39,1,0,0,0,305,310,
		3,42,21,0,306,307,5,47,0,0,307,309,3,42,21,0,308,306,1,0,0,0,309,312,1,
		0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,41,1,0,0,0,312,310,1,0,0,0,313,
		314,3,18,9,0,314,315,5,50,0,0,315,316,3,38,19,0,316,322,1,0,0,0,317,318,
		3,22,11,0,318,319,5,50,0,0,319,320,3,38,19,0,320,322,1,0,0,0,321,313,1,
		0,0,0,321,317,1,0,0,0,322,43,1,0,0,0,323,324,3,22,11,0,324,325,3,46,23,
		0,325,326,3,38,19,0,326,45,1,0,0,0,327,328,7,2,0,0,328,47,1,0,0,0,329,
		330,3,8,4,0,330,331,5,1,0,0,331,332,3,18,9,0,332,49,1,0,0,0,333,334,3,
		18,9,0,334,335,5,72,0,0,335,336,3,38,19,0,336,337,5,73,0,0,337,344,1,0,
		0,0,338,339,3,116,58,0,339,340,5,72,0,0,340,341,3,38,19,0,341,342,5,73,
		0,0,342,344,1,0,0,0,343,333,1,0,0,0,343,338,1,0,0,0,344,51,1,0,0,0,345,
		346,3,18,9,0,346,347,5,45,0,0,347,348,3,54,27,0,348,354,1,0,0,0,349,350,
		3,50,25,0,350,351,5,45,0,0,351,352,3,54,27,0,352,354,1,0,0,0,353,345,1,
		0,0,0,353,349,1,0,0,0,354,53,1,0,0,0,355,359,3,18,9,0,356,359,3,52,26,
		0,357,359,3,50,25,0,358,355,1,0,0,0,358,356,1,0,0,0,358,357,1,0,0,0,359,
		55,1,0,0,0,360,361,5,15,0,0,361,375,3,18,9,0,362,363,5,15,0,0,363,375,
		3,116,58,0,364,365,5,15,0,0,365,366,3,18,9,0,366,367,5,42,0,0,367,368,
		3,18,9,0,368,375,1,0,0,0,369,370,5,15,0,0,370,371,3,116,58,0,371,372,5,
		42,0,0,372,373,3,18,9,0,373,375,1,0,0,0,374,360,1,0,0,0,374,362,1,0,0,
		0,374,364,1,0,0,0,374,369,1,0,0,0,375,57,1,0,0,0,376,379,5,14,0,0,377,
		380,3,10,5,0,378,380,3,20,10,0,379,377,1,0,0,0,379,378,1,0,0,0,380,381,
		1,0,0,0,381,382,3,18,9,0,382,59,1,0,0,0,383,384,3,24,12,0,384,385,5,54,
		0,0,385,386,3,24,12,0,386,404,1,0,0,0,387,388,3,24,12,0,388,389,5,55,0,
		0,389,390,3,24,12,0,390,404,1,0,0,0,391,392,3,24,12,0,392,393,5,56,0,0,
		393,394,3,44,22,0,394,395,5,57,0,0,395,396,3,24,12,0,396,404,1,0,0,0,397,
		398,3,24,12,0,398,399,5,58,0,0,399,400,3,44,22,0,400,401,5,59,0,0,401,
		402,3,24,12,0,402,404,1,0,0,0,403,383,1,0,0,0,403,387,1,0,0,0,403,391,
		1,0,0,0,403,397,1,0,0,0,404,61,1,0,0,0,405,406,5,11,0,0,406,407,3,18,9,
		0,407,408,3,64,32,0,408,63,1,0,0,0,409,416,5,70,0,0,410,411,5,38,0,0,411,
		415,3,22,11,0,412,413,5,44,0,0,413,415,3,22,11,0,414,410,1,0,0,0,414,412,
		1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,
		0,418,416,1,0,0,0,419,420,5,71,0,0,420,65,1,0,0,0,421,422,5,13,0,0,422,
		423,3,18,9,0,423,424,5,50,0,0,424,426,5,68,0,0,425,427,3,30,15,0,426,425,
		1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,5,69,0,0,429,431,5,68,
		0,0,430,432,3,30,15,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,
		433,434,5,69,0,0,434,435,3,68,34,0,435,67,1,0,0,0,436,485,5,70,0,0,437,
		484,3,4,2,0,438,439,5,35,0,0,439,440,3,38,19,0,440,447,3,6,3,0,441,442,
		5,37,0,0,442,443,3,38,19,0,443,444,3,6,3,0,444,446,1,0,0,0,445,441,1,0,
		0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,452,1,0,0,0,449,
		447,1,0,0,0,450,451,5,36,0,0,451,453,3,6,3,0,452,450,1,0,0,0,452,453,1,
		0,0,0,453,484,1,0,0,0,454,455,5,40,0,0,455,456,3,38,19,0,456,457,3,6,3,
		0,457,484,1,0,0,0,458,460,5,38,0,0,459,461,3,8,4,0,460,459,1,0,0,0,460,
		461,1,0,0,0,461,462,1,0,0,0,462,463,3,26,13,0,463,464,5,50,0,0,464,465,
		3,36,18,0,465,466,5,47,0,0,466,469,3,38,19,0,467,468,5,47,0,0,468,470,
		3,38,19,0,469,467,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,3,6,
		3,0,472,484,1,0,0,0,473,475,5,38,0,0,474,476,3,8,4,0,475,474,1,0,0,0,475,
		476,1,0,0,0,476,477,1,0,0,0,477,478,3,18,9,0,478,479,5,39,0,0,479,480,
		3,18,9,0,480,481,3,6,3,0,481,484,1,0,0,0,482,484,3,70,35,0,483,437,1,0,
		0,0,483,438,1,0,0,0,483,454,1,0,0,0,483,458,1,0,0,0,483,473,1,0,0,0,483,
		482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,
		0,0,0,487,485,1,0,0,0,488,489,5,71,0,0,489,69,1,0,0,0,490,492,5,41,0,0,
		491,493,3,26,13,0,492,491,1,0,0,0,492,493,1,0,0,0,493,71,1,0,0,0,494,495,
		3,18,9,0,495,497,5,68,0,0,496,498,3,26,13,0,497,496,1,0,0,0,497,498,1,
		0,0,0,498,499,1,0,0,0,499,500,5,69,0,0,500,73,1,0,0,0,501,502,3,14,7,0,
		502,521,3,18,9,0,503,505,3,120,60,0,504,503,1,0,0,0,505,508,1,0,0,0,506,
		504,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,513,5,
		47,0,0,510,512,3,120,60,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,1,0,
		0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,517,3,14,7,0,517,
		518,3,18,9,0,518,520,1,0,0,0,519,506,1,0,0,0,520,523,1,0,0,0,521,519,1,
		0,0,0,521,522,1,0,0,0,522,526,1,0,0,0,523,521,1,0,0,0,524,526,3,120,60,
		0,525,501,1,0,0,0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,
		528,1,0,0,0,528,75,1,0,0,0,529,527,1,0,0,0,530,531,5,6,0,0,531,532,3,18,
		9,0,532,533,5,70,0,0,533,534,3,74,37,0,534,535,5,71,0,0,535,77,1,0,0,0,
		536,537,5,74,0,0,537,79,1,0,0,0,538,539,5,74,0,0,539,81,1,0,0,0,540,541,
		5,74,0,0,541,83,1,0,0,0,542,543,3,78,39,0,543,550,3,18,9,0,544,545,5,47,
		0,0,545,546,3,78,39,0,546,547,3,18,9,0,547,549,1,0,0,0,548,544,1,0,0,0,
		549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,85,1,0,0,0,552,550,
		1,0,0,0,553,554,5,7,0,0,554,555,3,78,39,0,555,557,5,70,0,0,556,558,3,32,
		16,0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,5,71,0,0,
		560,87,1,0,0,0,561,562,5,8,0,0,562,563,3,82,41,0,563,564,5,70,0,0,564,
		565,3,90,45,0,565,566,5,71,0,0,566,89,1,0,0,0,567,568,5,25,0,0,568,573,
		3,78,39,0,569,570,5,26,0,0,570,573,3,78,39,0,571,573,3,120,60,0,572,567,
		1,0,0,0,572,569,1,0,0,0,572,571,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,
		0,574,575,1,0,0,0,575,91,1,0,0,0,576,574,1,0,0,0,577,578,5,9,0,0,578,579,
		3,80,40,0,579,580,5,70,0,0,580,581,3,98,49,0,581,582,5,71,0,0,582,591,
		1,0,0,0,583,584,5,9,0,0,584,585,3,80,40,0,585,586,3,94,47,0,586,587,5,
		70,0,0,587,588,3,98,49,0,588,589,5,71,0,0,589,591,1,0,0,0,590,577,1,0,
		0,0,590,583,1,0,0,0,591,93,1,0,0,0,592,594,5,68,0,0,593,595,3,84,42,0,
		594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,5,54,0,0,597,599,
		3,84,42,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,601,5,69,
		0,0,601,95,1,0,0,0,602,603,5,10,0,0,603,604,3,18,9,0,604,605,5,70,0,0,
		605,606,3,98,49,0,606,607,5,71,0,0,607,627,1,0,0,0,608,609,5,10,0,0,609,
		610,3,18,9,0,610,615,3,94,47,0,611,612,5,70,0,0,612,613,3,98,49,0,613,
		614,5,71,0,0,614,616,1,0,0,0,615,611,1,0,0,0,615,616,1,0,0,0,616,627,1,
		0,0,0,617,618,5,10,0,0,618,619,3,20,10,0,619,620,3,18,9,0,620,627,1,0,
		0,0,621,622,5,10,0,0,622,623,3,20,10,0,623,624,3,18,9,0,624,625,3,110,
		55,0,625,627,1,0,0,0,626,602,1,0,0,0,626,608,1,0,0,0,626,617,1,0,0,0,626,
		621,1,0,0,0,627,97,1,0,0,0,628,634,3,100,50,0,629,634,3,108,54,0,630,634,
		3,104,52,0,631,634,3,106,53,0,632,634,3,120,60,0,633,628,1,0,0,0,633,629,
		1,0,0,0,633,630,1,0,0,0,633,631,1,0,0,0,633,632,1,0,0,0,634,637,1,0,0,
		0,635,633,1,0,0,0,635,636,1,0,0,0,636,99,1,0,0,0,637,635,1,0,0,0,638,639,
		5,19,0,0,639,655,3,84,42,0,640,641,5,20,0,0,641,655,3,84,42,0,642,643,
		5,19,0,0,643,644,5,72,0,0,644,645,3,102,51,0,645,646,5,73,0,0,646,647,
		3,84,42,0,647,655,1,0,0,0,648,649,5,20,0,0,649,650,5,72,0,0,650,651,3,
		102,51,0,651,652,5,73,0,0,652,653,3,84,42,0,653,655,1,0,0,0,654,638,1,
		0,0,0,654,640,1,0,0,0,654,642,1,0,0,0,654,648,1,0,0,0,655,101,1,0,0,0,
		656,657,7,3,0,0,657,658,5,48,0,0,658,659,5,74,0,0,659,103,1,0,0,0,660,
		661,5,16,0,0,661,662,3,18,9,0,662,105,1,0,0,0,663,666,5,17,0,0,664,667,
		3,8,4,0,665,667,3,20,10,0,666,664,1,0,0,0,666,665,1,0,0,0,667,668,1,0,
		0,0,668,669,3,26,13,0,669,107,1,0,0,0,670,671,7,4,0,0,671,672,3,82,41,
		0,672,673,5,74,0,0,673,109,1,0,0,0,674,676,5,68,0,0,675,677,3,40,20,0,
		676,675,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,679,5,69,0,0,679,111,
		1,0,0,0,680,681,5,12,0,0,681,682,3,18,9,0,682,690,5,70,0,0,683,684,5,17,
		0,0,684,685,3,8,4,0,685,686,3,26,13,0,686,687,3,120,60,0,687,689,1,0,0,
		0,688,683,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,
		693,1,0,0,0,692,690,1,0,0,0,693,694,5,71,0,0,694,113,1,0,0,0,695,696,7,
		5,0,0,696,115,1,0,0,0,697,698,5,76,0,0,698,117,1,0,0,0,699,700,7,6,0,0,
		700,119,1,0,0,0,701,702,5,83,0,0,702,121,1,0,0,0,62,128,135,147,169,172,
		189,197,210,218,226,237,242,248,254,265,269,273,280,295,300,303,310,321,
		343,353,358,374,379,403,414,416,426,431,447,452,460,469,475,483,485,492,
		497,506,513,521,525,527,550,557,572,574,590,594,598,615,626,633,635,654,
		666,676,690
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Sidl.Processor
