//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\workspaces\spa\Sidl\src\Grammar\SidlParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARRAY=1, STRING=2, INT=3, FLOAT=4, BOOL=5, STRUCT=6, MESSAGE=7, NODETYPE=8, 
		NODE=9, META=10, FUNCTION=11, TYPEDEF=12, IMPORT=13, INCLUDE=14, PROPERTY=15, 
		TOPIC=16, INPUT=17, OUTPUT=18, NULL=19, TRUE=20, FALSE=21, IF=22, ELSE=23, 
		ELSEIF=24, FOR=25, IN=26, WHILE=27, RETURN=28, DOT=29, STAR=30, COMMA=31, 
		COLON=32, SEMI_COLON=33, ASSIGN=34, ADD=35, MINUS=36, DIV=37, ARROW=38, 
		OPEN_PAREN=39, CLOSE_PAREN=40, OPEN_BRACE=41, CLOSE_BRACE=42, OPEN_BRACKET=43, 
		CLOSE_BRACKET=44, NAME=45, WORD=46, STRINGLITEARL=47, NORMALSTRING=48, 
		CHARSTRING=49, LONGSTRING=50, INTEGER=51, FLOATINGPOINTNUMBER=52, WHITESPACE=53, 
		STMEND=54, COMMENT=55, LINECOMMENT=56, SHEBANG=57;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_graphtype = 7, RULE_variable = 8, 
		RULE_typename = 9, RULE_atomictypeortypename = 10, RULE_variablelist = 11, 
		RULE_typedvariablelist = 12, RULE_customtypedvariablelist = 13, RULE_messageparameterlist = 14, 
		RULE_messageparametersignature = 15, RULE_expressionlist = 16, RULE_expression = 17, 
		RULE_arraydeclaration = 18, RULE_arrayaccess = 19, RULE_fieldaccess = 20, 
		RULE_lefthandside = 21, RULE_importstatement = 22, RULE_typedefstatement = 23, 
		RULE_functiondefinition = 24, RULE_functionbody = 25, RULE_returnstatement = 26, 
		RULE_functioncall = 27, RULE_structpropertylist = 28, RULE_structdefinition = 29, 
		RULE_messagetypename = 30, RULE_nodetypename = 31, RULE_messagetypelist = 32, 
		RULE_messagedefinition = 33, RULE_nodetypedefinition = 34, RULE_nodetypesignature = 35, 
		RULE_nodedefinition = 36, RULE_nodebody = 37, RULE_metadefinition = 38, 
		RULE_number = 39, RULE_string = 40, RULE_boolean = 41, RULE_terminator = 42;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"graphtype", "variable", "typename", "atomictypeortypename", "variablelist", 
		"typedvariablelist", "customtypedvariablelist", "messageparameterlist", 
		"messageparametersignature", "expressionlist", "expression", "arraydeclaration", 
		"arrayaccess", "fieldaccess", "lefthandside", "importstatement", "typedefstatement", 
		"functiondefinition", "functionbody", "returnstatement", "functioncall", 
		"structpropertylist", "structdefinition", "messagetypename", "nodetypename", 
		"messagetypelist", "messagedefinition", "nodetypedefinition", "nodetypesignature", 
		"nodedefinition", "nodebody", "metadefinition", "number", "string", "boolean", 
		"terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", "'message'", 
		"'nodetype'", "'node'", "'meta'", "'function'", "'typedef'", "'import'", 
		"'include'", "'property'", "'topic'", "'input'", "'output'", "'null'", 
		"'true'", "'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'while'", 
		"'return'", "'.'", "'*'", "','", "':'", "';'", "'='", "'+'", "'-'", "'/'", 
		"'-->'", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"NODETYPE", "NODE", "META", "FUNCTION", "TYPEDEF", "IMPORT", "INCLUDE", 
		"PROPERTY", "TOPIC", "INPUT", "OUTPUT", "NULL", "TRUE", "FALSE", "IF", 
		"ELSE", "ELSEIF", "FOR", "IN", "WHILE", "RETURN", "DOT", "STAR", "COMMA", 
		"COLON", "SEMI_COLON", "ASSIGN", "ADD", "MINUS", "DIV", "ARROW", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"NAME", "WORD", "STRINGLITEARL", "NORMALSTRING", "CHARSTRING", "LONGSTRING", 
		"INTEGER", "FLOATINGPOINTNUMBER", "WHITESPACE", "STMEND", "COMMENT", "LINECOMMENT", 
		"SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			set();
			State = 87;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT) | (1L << MESSAGE) | (1L << NODETYPE) | (1L << NODE) | (1L << META) | (1L << TYPEDEF) | (1L << IMPORT) | (1L << OPEN_BRACE) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				{
				State = 89;
				statement();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessageDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessageDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetaDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedefStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedefstatementContext typedefstatement() {
			return GetRuleContext<TypedefstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TypedefStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodeDefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodeDefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 97;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 98;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 101;
				variablelist();
				State = 102;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 104;
				variablelist();
				State = 105;
				Match(ASSIGN);
				State = 106;
				expressionlist();
				State = 107;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 111;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 109;
					atomictype();
					}
					break;
				case NAME:
					{
					State = 110;
					typename();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 113;
				variablelist();
				State = 114;
				Match(ASSIGN);
				State = 115;
				expressionlist();
				State = 116;
				terminator();
				}
				break;
			case 6:
				_localctx = new StructDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 118;
				structdefinition();
				}
				break;
			case 7:
				_localctx = new MessageDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 119;
				messagedefinition();
				}
				break;
			case 8:
				_localctx = new NodetypeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 120;
				nodetypedefinition();
				}
				break;
			case 9:
				_localctx = new NodeDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 121;
				nodedefinition();
				}
				break;
			case 10:
				_localctx = new MetaDefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 122;
				metadefinition();
				}
				break;
			case 11:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 123;
				importstatement();
				State = 124;
				terminator();
				}
				break;
			case 12:
				_localctx = new TypedefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 126;
				typedefstatement();
				State = 127;
				terminator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 131;
				variable();
				}
			}

			State = 134;
			Match(OPEN_BRACE);
			State = 135;
			set();
			State = 136;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SidlParser.ARRAY, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				atomictype();
				State = 141;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143;
				complextype();
				State = 144;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MESSAGE) | (1L << NODETYPE) | (1L << NODE) | (1L << META))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 18, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeortypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public AtomictypeortypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictypeortypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictypeortypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeortypenameContext atomictypeortypename() {
		AtomictypeortypenameContext _localctx = new AtomictypeortypenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_atomictypeortypename);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				atomictype();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 22, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			variable();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 163;
				Match(COMMA);
				State = 164;
				variable();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 24, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			atomictype();
			State = 171;
			variable();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 172;
				Match(COMMA);
				State = 173;
				atomictype();
				State = 174;
				variable();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomtypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext[] atomictype() {
			return GetRuleContexts<AtomictypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype(int i) {
			return GetRuleContext<AtomictypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public CustomtypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customtypedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomtypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomtypedvariablelistContext customtypedvariablelist() {
		CustomtypedvariablelistContext _localctx = new CustomtypedvariablelistContext(Context, State);
		EnterRule(_localctx, 26, RULE_customtypedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 181;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 182;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 185;
			variable();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 186;
				Match(COMMA);
				State = 189;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 187;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
					{
					State = 188;
					atomictype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 191;
				variable();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext[] messageparametersignature() {
			return GetRuleContexts<MessageparametersignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageparametersignatureContext messageparametersignature(int i) {
			return GetRuleContext<MessageparametersignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public MessageparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparameterlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparameterlistContext messageparameterlist() {
		MessageparameterlistContext _localctx = new MessageparameterlistContext(Context, State);
		EnterRule(_localctx, 28, RULE_messageparameterlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			messageparametersignature();
			State = 199;
			variable();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 200;
				Match(COMMA);
				State = 201;
				messageparametersignature();
				State = 202;
				variable();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageparametersignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(SidlParser.TOPIC, 0); }
		public MessageparametersignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageparametersignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageparametersignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageparametersignatureContext messageparametersignature() {
		MessageparametersignatureContext _localctx = new MessageparametersignatureContext(Context, State);
		EnterRule(_localctx, 30, RULE_messageparametersignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOPIC) {
				{
				State = 209;
				Match(TOPIC);
				}
			}

			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 212;
				typename();
				}
				break;
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 213;
				atomictype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			expression();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					Match(COMMA);
					State = 218;
					expression();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 227;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 228;
				variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 229;
				functiondefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 230;
				functioncall();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 231;
				importstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			type();
			State = 235;
			Match(ARRAY);
			State = 236;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayaccess);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				variable();
				State = 239;
				Match(OPEN_BRACKET);
				State = 240;
				expression();
				State = 241;
				Match(CLOSE_BRACKET);
				}
				break;
			case STRINGLITEARL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				@string();
				State = 244;
				Match(OPEN_BRACKET);
				State = 245;
				expression();
				State = 246;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 40, RULE_fieldaccess);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				variable();
				State = 251;
				Match(DOT);
				State = 252;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				arrayaccess();
				State = 255;
				Match(DOT);
				State = 256;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 42, RULE_lefthandside);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITEARL() { return GetToken(SidlParser.STRINGLITEARL, 0); }
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_importstatement);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				Match(IMPORT);
				State = 266;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				Match(IMPORT);
				State = 268;
				Match(STRINGLITEARL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(SidlParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypedefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefstatementContext typedefstatement() {
		TypedefstatementContext _localctx = new TypedefstatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_typedefstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(TYPEDEF);
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case INT:
			case FLOAT:
			case BOOL:
				{
				State = 272;
				atomictype();
				}
				break;
			case NAME:
				{
				State = 273;
				typename();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 276;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(FUNCTION);
			State = 279;
			variable();
			State = 280;
			Match(ASSIGN);
			State = 281;
			Match(OPEN_PAREN);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << NAME))) != 0)) {
				{
				State = 282;
				customtypedvariablelist();
				}
			}

			State = 285;
			Match(CLOSE_PAREN);
			State = 286;
			Match(OPEN_PAREN);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << NAME))) != 0)) {
				{
				State = 287;
				customtypedvariablelist();
				}
			}

			State = 290;
			Match(CLOSE_PAREN);
			State = 291;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(OPEN_BRACE);
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT) | (1L << MESSAGE) | (1L << NODETYPE) | (1L << NODE) | (1L << META) | (1L << TYPEDEF) | (1L << IMPORT) | (1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << RETURN) | (1L << OPEN_BRACE) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				State = 340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 294;
					statement();
					}
					break;
				case 2:
					{
					State = 295;
					Match(IF);
					State = 296;
					expression();
					State = 297;
					scope();
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 298;
						Match(ELSEIF);
						State = 299;
						expression();
						State = 300;
						scope();
						}
						}
						State = 306;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 307;
						Match(ELSE);
						State = 308;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 311;
					Match(WHILE);
					State = 312;
					expression();
					State = 313;
					scope();
					}
					break;
				case 4:
					{
					State = 315;
					Match(FOR);
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
						{
						State = 316;
						type();
						}
					}

					State = 319;
					variablelist();
					State = 320;
					Match(ASSIGN);
					State = 321;
					expressionlist();
					State = 322;
					Match(COMMA);
					State = 323;
					expression();
					State = 326;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 324;
						Match(COMMA);
						State = 325;
						expression();
						}
					}

					State = 328;
					scope();
					}
					break;
				case 5:
					{
					State = 330;
					Match(FOR);
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
						{
						State = 331;
						type();
						}
					}

					State = 334;
					variable();
					State = 335;
					Match(IN);
					State = 336;
					variable();
					State = 337;
					scope();
					}
					break;
				case 6:
					{
					State = 339;
					returnstatement();
					}
					break;
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 345;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(RETURN);
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 348;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 54, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			variable();
			State = 352;
			Match(OPEN_PAREN);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 353;
				variablelist();
				}
			}

			State = 356;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructpropertylistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext[] atomictypeortypename() {
			return GetRuleContexts<AtomictypeortypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeortypenameContext atomictypeortypename(int i) {
			return GetRuleContext<AtomictypeortypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public StructpropertylistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structpropertylist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructpropertylist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructpropertylistContext structpropertylist() {
		StructpropertylistContext _localctx = new StructpropertylistContext(Context, State);
		EnterRule(_localctx, 56, RULE_structpropertylist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			atomictypeortypename();
			State = 359;
			variable();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 360;
				Match(COMMA);
				State = 361;
				atomictypeortypename();
				State = 362;
				variable();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructpropertylistContext structpropertylist() {
			return GetRuleContext<StructpropertylistContext>(0);
		}
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_structdefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(STRUCT);
			State = 370;
			variable();
			State = 371;
			Match(OPEN_BRACE);
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << NAME))) != 0)) {
				{
				State = 372;
				structpropertylist();
				}
			}

			State = 375;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 60, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 62, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 64, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			messagetypename();
			State = 382;
			variable();
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 383;
				Match(COMMA);
				State = 384;
				messagetypename();
				State = 385;
				variable();
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageparameterlistContext messageparameterlist() {
			return GetRuleContext<MessageparameterlistContext>(0);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 66, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(MESSAGE);
			State = 393;
			messagetypename();
			State = 394;
			Match(OPEN_BRACE);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << TOPIC) | (1L << NAME))) != 0)) {
				{
				State = 395;
				messageparameterlist();
				}
			}

			State = 398;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 68, RULE_nodetypedefinition);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				Match(NODETYPE);
				State = 401;
				nodetypename();
				State = 402;
				Match(OPEN_BRACE);
				State = 403;
				nodebody();
				State = 404;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				Match(NODETYPE);
				State = 407;
				nodetypename();
				State = 408;
				nodetypesignature();
				State = 413;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 409;
					Match(OPEN_BRACE);
					State = 410;
					nodebody();
					State = 411;
					Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypesignatureContext : ParserRuleContext {
		public MessagetypelistContext inputs;
		public MessagetypelistContext outputs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext[] messagetypelist() {
			return GetRuleContexts<MessagetypelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist(int i) {
			return GetRuleContext<MessagetypelistContext>(i);
		}
		public NodetypesignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypesignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypesignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypesignatureContext nodetypesignature() {
		NodetypesignatureContext _localctx = new NodetypesignatureContext(Context, State);
		EnterRule(_localctx, 70, RULE_nodetypesignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(OPEN_PAREN);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 418;
				_localctx.inputs = messagetypelist();
				}
			}

			State = 421;
			Match(ARROW);
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 422;
				_localctx.outputs = messagetypelist();
				}
			}

			State = 425;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 72, RULE_nodedefinition);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				Match(NODE);
				State = 428;
				variable();
				State = 429;
				Match(OPEN_BRACE);
				State = 430;
				nodebody();
				State = 431;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				Match(NODE);
				State = 434;
				variable();
				State = 435;
				nodetypesignature();
				State = 440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 436;
					Match(OPEN_BRACE);
					State = 437;
					nodebody();
					State = 438;
					Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 442;
				Match(NODE);
				State = 443;
				typename();
				State = 444;
				variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INCLUDE() { return GetTokens(SidlParser.INCLUDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE(int i) {
			return GetToken(SidlParser.INCLUDE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPUT() { return GetTokens(SidlParser.INPUT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT(int i) {
			return GetToken(SidlParser.INPUT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OUTPUT() { return GetTokens(SidlParser.OUTPUT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT(int i) {
			return GetToken(SidlParser.OUTPUT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext[] customtypedvariablelist() {
			return GetRuleContexts<CustomtypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomtypedvariablelistContext customtypedvariablelist(int i) {
			return GetRuleContext<CustomtypedvariablelistContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCLUDE) | (1L << PROPERTY) | (1L << INPUT) | (1L << OUTPUT))) != 0)) {
				{
				State = 462;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
					{
					State = 448;
					_la = TokenStream.LA(1);
					if ( !(_la==INPUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << NAME))) != 0)) {
						{
						State = 449;
						customtypedvariablelist();
						}
					}

					State = 452;
					terminator();
					}
					break;
				case INCLUDE:
					{
					State = 453;
					Match(INCLUDE);
					State = 454;
					variable();
					State = 455;
					terminator();
					}
					break;
				case PROPERTY:
					{
					State = 457;
					Match(PROPERTY);
					State = 458;
					type();
					State = 459;
					variablelist();
					State = 460;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 76, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(META);
			State = 468;
			variable();
			State = 469;
			Match(OPEN_BRACE);
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 470;
				Match(PROPERTY);
				State = 471;
				type();
				State = 472;
				variablelist();
				State = 473;
				terminator();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 480;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 78, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITEARL() { return GetToken(SidlParser.STRINGLITEARL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 80, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(STRINGLITEARL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SidlParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 82, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x1ED', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 
		']', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '`', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x66', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'r', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x84', 
		'\n', '\x4', '\x3', '\x5', '\x5', '\x5', '\x87', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x95', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xA3', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xA8', '\n', '\r', '\f', '\r', '\xE', '\r', '\xAB', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xB3', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xB6', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBA', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xC0', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xC4', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC7', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xCF', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xD2', 
		'\v', '\x10', '\x3', '\x11', '\x5', '\x11', '\xD5', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xD9', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xDE', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xE1', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xEB', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xFB', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x105', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x10A', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x110', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x115', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x11E', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x123', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\x131', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x134', 
		'\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x138', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x140', '\n', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x149', '\n', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x14F', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x157', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x15A', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x160', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x165', '\n', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x16F', '\n', '\x1E', '\f', 
		'\x1E', '\xE', '\x1E', '\x172', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x178', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x186', '\n', '\"', '\f', '\"', '\xE', '\"', '\x189', 
		'\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x18F', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1A0', 
		'\n', '$', '\x5', '$', '\x1A2', '\n', '$', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x1A6', '\n', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1AA', 
		'\n', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1BB', '\n', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1C1', 
		'\n', '&', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1C5', '\n', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x1D1', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1D4', '\v', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\a', '(', '\x1DE', '\n', '(', '\f', '(', '\xE', '(', 
		'\x1E1', '\v', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x2', '\x2', '-', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', '\x2', '\a', '\x3', '\x2', '\x4', '\a', '\x3', '\x2', '\t', 
		'\f', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x16', '\x17', '\x2', '\x209', '\x2', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '^', '\x3', '\x2', '\x2', '\x2', '\x6', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x86', '\x3', '\x2', '\x2', '\x2', '\n', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x98', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xD4', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '$', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xEC', '\x3', '\x2', '\x2', '\x2', '(', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x104', '\x3', '\x2', '\x2', '\x2', ',', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x111', '\x3', '\x2', '\x2', '\x2', '\x32', '\x118', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x127', '\x3', '\x2', '\x2', '\x2', '\x36', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x161', '\x3', '\x2', '\x2', '\x2', 
		':', '\x168', '\x3', '\x2', '\x2', '\x2', '<', '\x173', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x17B', '\x3', '\x2', '\x2', '\x2', '@', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1A3', '\x3', '\x2', '\x2', '\x2', 'J', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1D5', '\x3', '\x2', '\x2', '\x2', 'P', '\x1E4', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1E6', '\x3', '\x2', '\x2', '\x2', 'T', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x5', '\x4', '\x3', '\x2', 'Y', 'Z', '\a', '\x2', '\x2', '\x3', 
		'Z', '\x3', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x5', '\x6', '\x4', 
		'\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', 
		'\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x5', '\x3', '\x2', '\x2', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x84', '\x5', 'V', ',', '\x2', '\x62', 
		'\x84', '\x5', '\b', '\x5', '\x2', '\x63', '\x66', '\x5', '\f', '\a', 
		'\x2', '\x64', '\x66', '\x5', '\x14', '\v', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x5', '\x18', '\r', '\x2', 
		'h', 'i', '\x5', 'V', ',', '\x2', 'i', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x5', '\x18', '\r', '\x2', 'k', 'l', '\a', '$', '\x2', '\x2', 
		'l', 'm', '\x5', '\"', '\x12', '\x2', 'm', 'n', '\x5', 'V', ',', '\x2', 
		'n', '\x84', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x5', '\f', '\a', 
		'\x2', 'p', 'r', '\x5', '\x14', '\v', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\x5', '\x18', '\r', '\x2', 't', 'u', '\a', '$', '\x2', 
		'\x2', 'u', 'v', '\x5', '\"', '\x12', '\x2', 'v', 'w', '\x5', 'V', ',', 
		'\x2', 'w', '\x84', '\x3', '\x2', '\x2', '\x2', 'x', '\x84', '\x5', '<', 
		'\x1F', '\x2', 'y', '\x84', '\x5', '\x44', '#', '\x2', 'z', '\x84', '\x5', 
		'\x46', '$', '\x2', '{', '\x84', '\x5', 'J', '&', '\x2', '|', '\x84', 
		'\x5', 'N', '(', '\x2', '}', '~', '\x5', '.', '\x18', '\x2', '~', '\x7F', 
		'\x5', 'V', ',', '\x2', '\x7F', '\x84', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x5', '\x30', '\x19', '\x2', '\x81', '\x82', '\x5', 'V', ',', 
		'\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x62', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x83', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x83', 'q', '\x3', '\x2', '\x2', '\x2', '\x83', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x83', 'y', '\x3', '\x2', '\x2', '\x2', '\x83', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '{', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x87', '\x5', '\x12', '\n', '\x2', '\x86', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '+', 
		'\x2', '\x2', '\x89', '\x8A', '\x5', '\x4', '\x3', '\x2', '\x8A', '\x8B', 
		'\a', ',', '\x2', '\x2', '\x8B', '\t', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x95', '\x5', '\f', '\a', '\x2', '\x8D', '\x95', '\x5', '\xE', '\b', 
		'\x2', '\x8E', '\x8F', '\x5', '\f', '\a', '\x2', '\x8F', '\x90', '\a', 
		'\x3', '\x2', '\x2', '\x90', '\x95', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x5', '\xE', '\b', '\x2', '\x92', '\x93', '\a', '\x3', '\x2', 
		'\x2', '\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x94', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\v', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\t', 
		'\x2', '\x2', '\x2', '\x97', '\r', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\b', '\x2', '\x2', '\x99', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\t', '\x3', '\x2', '\x2', '\x9B', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '/', '\x2', '\x2', '\x9D', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '/', '\x2', 
		'\x2', '\x9F', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA3', '\x5', 
		'\f', '\a', '\x2', '\xA1', '\xA3', '\x5', '\x14', '\v', '\x2', '\xA2', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA9', '\x5', 
		'\x12', '\n', '\x2', '\xA5', '\xA6', '\a', '!', '\x2', '\x2', '\xA6', 
		'\xA8', '\x5', '\x12', '\n', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', '\f', '\a', '\x2', '\xAD', '\xB4', '\x5', 
		'\x12', '\n', '\x2', '\xAE', '\xAF', '\a', '!', '\x2', '\x2', '\xAF', 
		'\xB0', '\x5', '\f', '\a', '\x2', '\xB0', '\xB1', '\x5', '\x12', '\n', 
		'\x2', '\xB1', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xBA', '\x5', '\x14', '\v', '\x2', '\xB8', 
		'\xBA', '\x5', '\f', '\a', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xC5', '\x5', '\x12', '\n', '\x2', '\xBC', 
		'\xBF', '\a', '!', '\x2', '\x2', '\xBD', '\xC0', '\x5', '\x14', '\v', 
		'\x2', '\xBE', '\xC0', '\x5', '\f', '\a', '\x2', '\xBF', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\x12', '\n', 
		'\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', ' ', '\x11', '\x2', '\xC9', 
		'\xD0', '\x5', '\x12', '\n', '\x2', '\xCA', '\xCB', '\a', '!', '\x2', 
		'\x2', '\xCB', '\xCC', '\x5', ' ', '\x11', '\x2', '\xCC', '\xCD', '\x5', 
		'\x12', '\n', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD5', '\a', '\x12', '\x2', 
		'\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD9', '\x5', '\x14', '\v', '\x2', '\xD7', '\xD9', '\x5', '\f', '\a', 
		'\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '!', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDF', '\x5', '$', '\x13', '\x2', '\xDB', '\xDC', '\a', '!', '\x2', '\x2', 
		'\xDC', '\xDE', '\x5', '$', '\x13', '\x2', '\xDD', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '#', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xEB', '\a', '\x15', '\x2', '\x2', '\xE3', '\xEB', 
		'\x5', 'T', '+', '\x2', '\xE4', '\xEB', '\x5', 'P', ')', '\x2', '\xE5', 
		'\xEB', '\x5', 'R', '*', '\x2', '\xE6', '\xEB', '\x5', '\x12', '\n', '\x2', 
		'\xE7', '\xEB', '\x5', '\x32', '\x1A', '\x2', '\xE8', '\xEB', '\x5', '\x38', 
		'\x1D', '\x2', '\xE9', '\xEB', '\x5', '.', '\x18', '\x2', '\xEA', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xED', '\x5', '\n', '\x6', '\x2', '\xED', '\xEE', 
		'\a', '\x3', '\x2', '\x2', '\xEE', '\xEF', '\x5', '\x12', '\n', '\x2', 
		'\xEF', '\'', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x12', 
		'\n', '\x2', '\xF1', '\xF2', '\a', '-', '\x2', '\x2', '\xF2', '\xF3', 
		'\x5', '$', '\x13', '\x2', '\xF3', '\xF4', '\a', '.', '\x2', '\x2', '\xF4', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', 'R', '*', '\x2', 
		'\xF6', '\xF7', '\a', '-', '\x2', '\x2', '\xF7', '\xF8', '\x5', '$', '\x13', 
		'\x2', '\xF8', '\xF9', '\a', '.', '\x2', '\x2', '\xF9', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xFB', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFD', '\x5', '\x12', '\n', '\x2', '\xFD', '\xFE', '\a', 
		'\x1F', '\x2', '\x2', '\xFE', '\xFF', '\x5', ',', '\x17', '\x2', '\xFF', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x5', '(', '\x15', 
		'\x2', '\x101', '\x102', '\a', '\x1F', '\x2', '\x2', '\x102', '\x103', 
		'\x5', ',', '\x17', '\x2', '\x103', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x104', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '+', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x10A', '\x5', '\x12', '\n', '\x2', '\x107', '\x10A', '\x5', '*', '\x16', 
		'\x2', '\x108', '\x10A', '\x5', '(', '\x15', '\x2', '\x109', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x10B', '\x10C', '\a', '\xF', '\x2', '\x2', '\x10C', '\x110', 
		'\x5', '\x12', '\n', '\x2', '\x10D', '\x10E', '\a', '\xF', '\x2', '\x2', 
		'\x10E', '\x110', '\a', '\x31', '\x2', '\x2', '\x10F', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x111', '\x114', '\a', '\xE', '\x2', 
		'\x2', '\x112', '\x115', '\x5', '\f', '\a', '\x2', '\x113', '\x115', '\x5', 
		'\x14', '\v', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x5', '\x12', '\n', '\x2', '\x117', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\r', '\x2', '\x2', 
		'\x119', '\x11A', '\x5', '\x12', '\n', '\x2', '\x11A', '\x11B', '\a', 
		'$', '\x2', '\x2', '\x11B', '\x11D', '\a', ')', '\x2', '\x2', '\x11C', 
		'\x11E', '\x5', '\x1C', '\xF', '\x2', '\x11D', '\x11C', '\x3', '\x2', 
		'\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '*', '\x2', '\x2', 
		'\x120', '\x122', '\a', ')', '\x2', '\x2', '\x121', '\x123', '\x5', '\x1C', 
		'\xF', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\a', '*', '\x2', '\x2', '\x125', '\x126', '\x5', '\x34', 
		'\x1B', '\x2', '\x126', '\x33', '\x3', '\x2', '\x2', '\x2', '\x127', '\x158', 
		'\a', '+', '\x2', '\x2', '\x128', '\x157', '\x5', '\x6', '\x4', '\x2', 
		'\x129', '\x12A', '\a', '\x18', '\x2', '\x2', '\x12A', '\x12B', '\x5', 
		'$', '\x13', '\x2', '\x12B', '\x132', '\x5', '\b', '\x5', '\x2', '\x12C', 
		'\x12D', '\a', '\x1A', '\x2', '\x2', '\x12D', '\x12E', '\x5', '$', '\x13', 
		'\x2', '\x12E', '\x12F', '\x5', '\b', '\x5', '\x2', '\x12F', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x134', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\a', '\x19', '\x2', '\x2', '\x136', '\x138', 
		'\x5', '\b', '\x5', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '\x1D', '\x2', '\x2', '\x13A', 
		'\x13B', '\x5', '$', '\x13', '\x2', '\x13B', '\x13C', '\x5', '\b', '\x5', 
		'\x2', '\x13C', '\x157', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', 
		'\a', '\x1B', '\x2', '\x2', '\x13E', '\x140', '\x5', '\n', '\x6', '\x2', 
		'\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x5', '\x18', '\r', '\x2', '\x142', '\x143', '\a', '$', '\x2', 
		'\x2', '\x143', '\x144', '\x5', '\"', '\x12', '\x2', '\x144', '\x145', 
		'\a', '!', '\x2', '\x2', '\x145', '\x148', '\x5', '$', '\x13', '\x2', 
		'\x146', '\x147', '\a', '!', '\x2', '\x2', '\x147', '\x149', '\x5', '$', 
		'\x13', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\x5', '\b', '\x5', '\x2', '\x14B', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\a', '\x1B', '\x2', '\x2', 
		'\x14D', '\x14F', '\x5', '\n', '\x6', '\x2', '\x14E', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x5', '\x12', 
		'\n', '\x2', '\x151', '\x152', '\a', '\x1C', '\x2', '\x2', '\x152', '\x153', 
		'\x5', '\x12', '\n', '\x2', '\x153', '\x154', '\x5', '\b', '\x5', '\x2', 
		'\x154', '\x157', '\x3', '\x2', '\x2', '\x2', '\x155', '\x157', '\x5', 
		'\x36', '\x1C', '\x2', '\x156', '\x128', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x156', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x156', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x158', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15C', '\a', ',', '\x2', '\x2', '\x15C', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15F', '\a', '\x1E', '\x2', '\x2', '\x15E', 
		'\x160', '\x5', '\x18', '\r', '\x2', '\x15F', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x5', '\x12', '\n', '\x2', 
		'\x162', '\x164', '\a', ')', '\x2', '\x2', '\x163', '\x165', '\x5', '\x18', 
		'\r', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x167', '\a', '*', '\x2', '\x2', '\x167', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x169', '\x5', '\x16', '\f', '\x2', '\x169', '\x170', 
		'\x5', '\x12', '\n', '\x2', '\x16A', '\x16B', '\a', '!', '\x2', '\x2', 
		'\x16B', '\x16C', '\x5', '\x16', '\f', '\x2', '\x16C', '\x16D', '\x5', 
		'\x12', '\n', '\x2', '\x16D', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x171', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', 
		'\b', '\x2', '\x2', '\x174', '\x175', '\x5', '\x12', '\n', '\x2', '\x175', 
		'\x177', '\a', '+', '\x2', '\x2', '\x176', '\x178', '\x5', ':', '\x1E', 
		'\x2', '\x177', '\x176', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x17A', '\a', ',', '\x2', '\x2', '\x17A', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x17B', '\x17C', '\a', '/', '\x2', '\x2', '\x17C', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', '/', '\x2', '\x2', 
		'\x17E', '\x41', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x5', 
		'>', ' ', '\x2', '\x180', '\x187', '\x5', '\x12', '\n', '\x2', '\x181', 
		'\x182', '\a', '!', '\x2', '\x2', '\x182', '\x183', '\x5', '>', ' ', '\x2', 
		'\x183', '\x184', '\x5', '\x12', '\n', '\x2', '\x184', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x181', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x18B', '\a', '\t', '\x2', '\x2', '\x18B', '\x18C', '\x5', '>', 
		' ', '\x2', '\x18C', '\x18E', '\a', '+', '\x2', '\x2', '\x18D', '\x18F', 
		'\x5', '\x1E', '\x10', '\x2', '\x18E', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x191', '\a', ',', '\x2', '\x2', '\x191', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\a', '\n', '\x2', 
		'\x2', '\x193', '\x194', '\x5', '@', '!', '\x2', '\x194', '\x195', '\a', 
		'+', '\x2', '\x2', '\x195', '\x196', '\x5', 'L', '\'', '\x2', '\x196', 
		'\x197', '\a', ',', '\x2', '\x2', '\x197', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x199', '\a', '\n', '\x2', '\x2', '\x199', '\x19A', '\x5', 
		'@', '!', '\x2', '\x19A', '\x19F', '\x5', 'H', '%', '\x2', '\x19B', '\x19C', 
		'\a', '+', '\x2', '\x2', '\x19C', '\x19D', '\x5', 'L', '\'', '\x2', '\x19D', 
		'\x19E', '\a', ',', '\x2', '\x2', '\x19E', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x192', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A5', '\a', ')', '\x2', '\x2', '\x1A4', '\x1A6', '\x5', '\x42', '\"', 
		'\x2', '\x1A5', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A9', '\a', '(', '\x2', '\x2', '\x1A8', '\x1AA', '\x5', '\x42', 
		'\"', '\x2', '\x1A9', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\a', '*', '\x2', '\x2', '\x1AC', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD', '\x1AE', '\a', '\v', '\x2', '\x2', '\x1AE', '\x1AF', 
		'\x5', '\x12', '\n', '\x2', '\x1AF', '\x1B0', '\a', '+', '\x2', '\x2', 
		'\x1B0', '\x1B1', '\x5', 'L', '\'', '\x2', '\x1B1', '\x1B2', '\a', ',', 
		'\x2', '\x2', '\x1B2', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\a', '\v', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', '\x12', '\n', '\x2', 
		'\x1B5', '\x1BA', '\x5', 'H', '%', '\x2', '\x1B6', '\x1B7', '\a', '+', 
		'\x2', '\x2', '\x1B7', '\x1B8', '\x5', 'L', '\'', '\x2', '\x1B8', '\x1B9', 
		'\a', ',', '\x2', '\x2', '\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\a', '\v', '\x2', '\x2', '\x1BD', '\x1BE', '\x5', '\x14', '\v', 
		'\x2', '\x1BE', '\x1BF', '\x5', '\x12', '\n', '\x2', '\x1BF', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', 'K', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C4', '\t', '\x4', '\x2', '\x2', '\x1C3', '\x1C5', '\x5', '\x1C', '\xF', 
		'\x2', '\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C6', '\x1D1', '\x5', 'V', ',', '\x2', '\x1C7', '\x1C8', '\a', '\x10', 
		'\x2', '\x2', '\x1C8', '\x1C9', '\x5', '\x12', '\n', '\x2', '\x1C9', '\x1CA', 
		'\x5', 'V', ',', '\x2', '\x1CA', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CC', '\a', '\x11', '\x2', '\x2', '\x1CC', '\x1CD', '\x5', 
		'\n', '\x6', '\x2', '\x1CD', '\x1CE', '\x5', '\x18', '\r', '\x2', '\x1CE', 
		'\x1CF', '\x5', 'V', ',', '\x2', '\x1CF', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D6', '\a', '\f', '\x2', '\x2', '\x1D6', '\x1D7', '\x5', 
		'\x12', '\n', '\x2', '\x1D7', '\x1DF', '\a', '+', '\x2', '\x2', '\x1D8', 
		'\x1D9', '\a', '\x11', '\x2', '\x2', '\x1D9', '\x1DA', '\x5', '\n', '\x6', 
		'\x2', '\x1DA', '\x1DB', '\x5', '\x18', '\r', '\x2', '\x1DB', '\x1DC', 
		'\x5', 'V', ',', '\x2', '\x1DC', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\a', ',', '\x2', '\x2', '\x1E3', 'O', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\t', '\x5', '\x2', '\x2', '\x1E5', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E7', '\a', '\x31', '\x2', '\x2', '\x1E7', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\t', '\x6', '\x2', '\x2', '\x1E9', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\a', '\x38', '\x2', 
		'\x2', '\x1EB', 'W', '\x3', '\x2', '\x2', '\x2', '\x31', '^', '\x65', 
		'q', '\x83', '\x86', '\x94', '\xA2', '\xA9', '\xB4', '\xB9', '\xBF', '\xC5', 
		'\xD0', '\xD4', '\xD8', '\xDF', '\xEA', '\xFA', '\x104', '\x109', '\x10F', 
		'\x114', '\x11D', '\x122', '\x132', '\x137', '\x13F', '\x148', '\x14E', 
		'\x156', '\x158', '\x15F', '\x164', '\x170', '\x177', '\x187', '\x18E', 
		'\x19F', '\x1A1', '\x1A5', '\x1A9', '\x1BA', '\x1C0', '\x1C4', '\x1D0', 
		'\x1D2', '\x1DF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Sidl.Processor
