//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\workspaces\spa\Sidl\src\Grammar\SidlParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Sidl.Processor {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SidlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TYPE=1, ARRAY=2, STRING=3, INT=4, FLOAT=5, BOOL=6, STRUCT=7, MESSAGE=8, 
		NODETYPE=9, NODE=10, META=11, FUNCTION=12, IMPORT=13, INCLUDE=14, PROPERTY=15, 
		TOPIC=16, INPUT=17, OUTPUT=18, NULL=19, TRUE=20, FALSE=21, IF=22, ELSE=23, 
		ELSEIF=24, FOR=25, IN=26, WHILE=27, RETURN=28, DOT=29, STAR=30, COMMA=31, 
		COLON=32, SEMI_COLON=33, ASSIGN=34, ADD=35, MINUS=36, DIV=37, ARROW=38, 
		OPEN_PAREN=39, CLOSE_PAREN=40, OPEN_BRACE=41, CLOSE_BRACE=42, OPEN_BRACKET=43, 
		CLOSE_BRACKET=44, NAME=45, WORD=46, STRINGLITEARL=47, NORMALSTRING=48, 
		CHARSTRING=49, LONGSTRING=50, INTEGER=51, FLOATINGPOINTNUMBER=52, WHITESPACE=53, 
		STMEND=54, COMMENT=55, LINECOMMENT=56, SHEBANG=57;
	public const int
		RULE_root = 0, RULE_set = 1, RULE_statement = 2, RULE_scope = 3, RULE_type = 4, 
		RULE_atomictype = 5, RULE_complextype = 6, RULE_graphtype = 7, RULE_variable = 8, 
		RULE_typename = 9, RULE_variablelist = 10, RULE_typedvariablelist = 11, 
		RULE_expressionlist = 12, RULE_expression = 13, RULE_arraydeclaration = 14, 
		RULE_arrayaccess = 15, RULE_fieldaccess = 16, RULE_lefthandside = 17, 
		RULE_importstatement = 18, RULE_typealiasingstatement = 19, RULE_functiondefinition = 20, 
		RULE_functionbody = 21, RULE_returnstatement = 22, RULE_functioncall = 23, 
		RULE_structdefinition = 24, RULE_messagetypename = 25, RULE_nodetypename = 26, 
		RULE_messagetypelist = 27, RULE_messagedefinition = 28, RULE_nodetypedefinition = 29, 
		RULE_nodetypesignature = 30, RULE_nodedefinition = 31, RULE_nodebody = 32, 
		RULE_metadefinition = 33, RULE_number = 34, RULE_string = 35, RULE_terminator = 36;
	public static readonly string[] ruleNames = {
		"root", "set", "statement", "scope", "type", "atomictype", "complextype", 
		"graphtype", "variable", "typename", "variablelist", "typedvariablelist", 
		"expressionlist", "expression", "arraydeclaration", "arrayaccess", "fieldaccess", 
		"lefthandside", "importstatement", "typealiasingstatement", "functiondefinition", 
		"functionbody", "returnstatement", "functioncall", "structdefinition", 
		"messagetypename", "nodetypename", "messagetypelist", "messagedefinition", 
		"nodetypedefinition", "nodetypesignature", "nodedefinition", "nodebody", 
		"metadefinition", "number", "string", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'type'", "'[]'", "'string'", "'int'", "'float'", "'bool'", "'struct'", 
		"'message'", "'nodetype'", "'node'", "'meta'", "'function'", "'import'", 
		"'include'", "'property'", "'topic'", "'input'", "'output'", "'null'", 
		"'true'", "'false'", "'if'", "'else'", "'else if'", "'for'", "'in'", "'while'", 
		"'return'", "'.'", "'*'", "','", "':'", "';'", "'='", "'+'", "'-'", "'/'", 
		"'-->'", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE", "ARRAY", "STRING", "INT", "FLOAT", "BOOL", "STRUCT", "MESSAGE", 
		"NODETYPE", "NODE", "META", "FUNCTION", "IMPORT", "INCLUDE", "PROPERTY", 
		"TOPIC", "INPUT", "OUTPUT", "NULL", "TRUE", "FALSE", "IF", "ELSE", "ELSEIF", 
		"FOR", "IN", "WHILE", "RETURN", "DOT", "STAR", "COMMA", "COLON", "SEMI_COLON", 
		"ASSIGN", "ADD", "MINUS", "DIV", "ARROW", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", 
		"WORD", "STRINGLITEARL", "NORMALSTRING", "CHARSTRING", "LONGSTRING", "INTEGER", 
		"FLOATINGPOINTNUMBER", "WHITESPACE", "STMEND", "COMMENT", "LINECOMMENT", 
		"SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SidlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SidlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SidlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SidlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SidlParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			set();
			State = 75;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 2, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT) | (1L << MESSAGE) | (1L << NODETYPE) | (1L << NODE) | (1L << META) | (1L << IMPORT) | (1L << OPEN_BRACKET) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				{
				State = 77;
				statement();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TerminatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructdefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructdefinitionContext structdefinition() {
			return GetRuleContext<StructdefinitionContext>(0);
		}
		public StructdefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public AssignmentStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MessagedefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagedefinitionContext messagedefinition() {
			return GetRuleContext<MessagedefinitionContext>(0);
		}
		public MessagedefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodetypedefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodetypedefinitionContext nodetypedefinition() {
			return GetRuleContext<NodetypedefinitionContext>(0);
		}
		public NodetypedefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NodedefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodedefinitionContext nodedefinition() {
			return GetRuleContext<NodedefinitionContext>(0);
		}
		public NodedefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetadefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadefinitionContext metadefinition() {
			return GetRuleContext<MetadefinitionContext>(0);
		}
		public MetadefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypealiasingStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypealiasingstatementContext typealiasingstatement() {
			return GetRuleContext<TypealiasingstatementContext>(0);
		}
		public TypealiasingStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypealiasingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScopeStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ScopeStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new TerminatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				terminator();
				}
				break;
			case 2:
				_localctx = new ScopeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				scope();
				}
				break;
			case 3:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				type();
				State = 86;
				variablelist();
				State = 87;
				terminator();
				}
				break;
			case 4:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89;
				variablelist();
				State = 90;
				Match(ASSIGN);
				State = 91;
				expressionlist();
				State = 92;
				terminator();
				}
				break;
			case 5:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				type();
				State = 95;
				variablelist();
				State = 96;
				Match(ASSIGN);
				State = 97;
				expressionlist();
				State = 98;
				terminator();
				}
				break;
			case 6:
				_localctx = new StructdefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 100;
				structdefinition();
				}
				break;
			case 7:
				_localctx = new MessagedefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 101;
				messagedefinition();
				}
				break;
			case 8:
				_localctx = new NodetypedefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 102;
				nodetypedefinition();
				}
				break;
			case 9:
				_localctx = new NodedefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 103;
				nodedefinition();
				}
				break;
			case 10:
				_localctx = new MetadefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 104;
				metadefinition();
				}
				break;
			case 11:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 105;
				importstatement();
				}
				break;
			case 12:
				_localctx = new TypealiasingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 106;
				typealiasingstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 109;
				variable();
				}
			}

			State = 112;
			Match(OPEN_BRACKET);
			State = 113;
			set();
			State = 114;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomictypeContext atomictype() {
			return GetRuleContext<AtomictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplextypeContext complextype() {
			return GetRuleContext<ComplextypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SidlParser.ARRAY, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				atomictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				complextype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118;
				atomictype();
				State = 119;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				complextype();
				State = 122;
				Match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SidlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SidlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SidlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SidlParser.BOOL, 0); }
		public AtomictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomictypeContext atomictype() {
		AtomictypeContext _localctx = new AtomictypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplextypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SidlParser.STRUCT, 0); }
		public ComplextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complextype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplextypeContext complextype() {
		ComplextypeContext _localctx = new ComplextypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_complextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SidlParser.META, 0); }
		public GraphtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphtypeContext graphtype() {
		GraphtypeContext _localctx = new GraphtypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_graphtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MESSAGE) | (1L << NODETYPE) | (1L << NODE) | (1L << META))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 18, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 20, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			variable();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 137;
				Match(COMMA);
				State = 138;
				variable();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedvariablelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public TypedvariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedvariablelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedvariablelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedvariablelistContext typedvariablelist() {
		TypedvariablelistContext _localctx = new TypedvariablelistContext(Context, State);
		EnterRule(_localctx, 22, RULE_typedvariablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			type();
			State = 145;
			variable();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 146;
				Match(COMMA);
				State = 147;
				type();
				State = 148;
				variable();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 24, RULE_expressionlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			expression();
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 156;
					Match(COMMA);
					State = 157;
					expression();
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SidlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SidlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SidlParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportstatementContext importstatement() {
			return GetRuleContext<ImportstatementContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(TRUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(FALSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168;
				variable();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 169;
				scope();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 170;
				functiondefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 171;
				functioncall();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 172;
				importstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SidlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			type();
			State = 176;
			Match(ARRAY);
			State = 177;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SidlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SidlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArrayaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayaccessContext arrayaccess() {
		ArrayaccessContext _localctx = new ArrayaccessContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayaccess);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				variable();
				State = 180;
				Match(OPEN_BRACKET);
				State = 181;
				expression();
				State = 182;
				Match(CLOSE_BRACKET);
				}
				break;
			case STRINGLITEARL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				@string();
				State = 185;
				Match(OPEN_BRACKET);
				State = 186;
				expression();
				State = 187;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldaccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SidlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LefthandsideContext lefthandside() {
			return GetRuleContext<LefthandsideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public FieldaccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldaccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldaccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldaccessContext fieldaccess() {
		FieldaccessContext _localctx = new FieldaccessContext(Context, State);
		EnterRule(_localctx, 32, RULE_fieldaccess);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				variable();
				State = 192;
				Match(DOT);
				State = 193;
				lefthandside();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				arrayaccess();
				State = 196;
				Match(DOT);
				State = 197;
				lefthandside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LefthandsideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldaccessContext fieldaccess() {
			return GetRuleContext<FieldaccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayaccessContext arrayaccess() {
			return GetRuleContext<ArrayaccessContext>(0);
		}
		public LefthandsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lefthandside; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLefthandside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LefthandsideContext lefthandside() {
		LefthandsideContext _localctx = new LefthandsideContext(Context, State);
		EnterRule(_localctx, 34, RULE_lefthandside);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				fieldaccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				arrayaccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SidlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITEARL() { return GetToken(SidlParser.STRINGLITEARL, 0); }
		public ImportstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportstatementContext importstatement() {
		ImportstatementContext _localctx = new ImportstatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_importstatement);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				Match(IMPORT);
				State = 207;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				Match(IMPORT);
				State = 209;
				Match(STRINGLITEARL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypealiasingstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(SidlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SidlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SidlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public TypealiasingstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typealiasingstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypealiasingstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypealiasingstatementContext typealiasingstatement() {
		TypealiasingstatementContext _localctx = new TypealiasingstatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_typealiasingstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(TYPE);
			State = 213;
			variable();
			State = 214;
			Match(COLON);
			State = 215;
			type();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 216;
				Match(COMMA);
				State = 217;
				@string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SidlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SidlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(SidlParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(SidlParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(SidlParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(SidlParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext[] typedvariablelist() {
			return GetRuleContexts<TypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext typedvariablelist(int i) {
			return GetRuleContext<TypedvariablelistContext>(i);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(FUNCTION);
			State = 221;
			variable();
			State = 222;
			Match(ASSIGN);
			State = 223;
			Match(OPEN_PAREN);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
				{
				State = 224;
				typedvariablelist();
				}
			}

			State = 227;
			Match(CLOSE_PAREN);
			State = 228;
			Match(OPEN_PAREN);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
				{
				State = 229;
				typedvariablelist();
				}
			}

			State = 232;
			Match(CLOSE_PAREN);
			State = 233;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SidlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SidlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SidlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SidlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SidlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SidlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SidlParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SidlParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext[] expressionlist() {
			return GetRuleContexts<ExpressionlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist(int i) {
			return GetRuleContext<ExpressionlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(SidlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(SidlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext[] returnstatement() {
			return GetRuleContexts<ReturnstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement(int i) {
			return GetRuleContext<ReturnstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(SidlParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(SidlParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SidlParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SidlParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(OPEN_BRACE);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT) | (1L << MESSAGE) | (1L << NODETYPE) | (1L << NODE) | (1L << META) | (1L << IMPORT) | (1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << RETURN) | (1L << OPEN_BRACKET) | (1L << NAME) | (1L << STMEND))) != 0)) {
				{
				State = 282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 236;
					statement();
					}
					break;
				case 2:
					{
					State = 237;
					Match(IF);
					State = 238;
					expression();
					State = 239;
					scope();
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ELSEIF) {
						{
						{
						State = 240;
						Match(ELSEIF);
						State = 241;
						expression();
						State = 242;
						scope();
						}
						}
						State = 248;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELSE) {
						{
						State = 249;
						Match(ELSE);
						State = 250;
						scope();
						}
					}

					}
					break;
				case 3:
					{
					State = 253;
					Match(WHILE);
					State = 254;
					expression();
					State = 255;
					scope();
					}
					break;
				case 4:
					{
					State = 257;
					Match(FOR);
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
						{
						State = 258;
						type();
						}
					}

					State = 261;
					variablelist();
					State = 262;
					Match(ASSIGN);
					State = 263;
					expressionlist();
					State = 264;
					Match(COMMA);
					State = 265;
					expression();
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 266;
						Match(COMMA);
						State = 267;
						expression();
						}
					}

					State = 270;
					scope();
					}
					break;
				case 5:
					{
					State = 272;
					Match(FOR);
					State = 274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
						{
						State = 273;
						type();
						}
					}

					State = 276;
					variable();
					State = 277;
					Match(IN);
					State = 278;
					variable();
					State = 279;
					scope();
					}
					break;
				case 6:
					{
					State = 281;
					returnstatement();
					}
					break;
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 287;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SidlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(RETURN);
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 290;
				variablelist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 46, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			variable();
			State = 294;
			Match(OPEN_PAREN);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 295;
				variablelist();
				}
			}

			State = 298;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(SidlParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public StructdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructdefinitionContext structdefinition() {
		StructdefinitionContext _localctx = new StructdefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_structdefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(STRUCT);
			State = 301;
			variable();
			State = 302;
			Match(OPEN_BRACE);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
				{
				{
				State = 303;
				type();
				State = 304;
				variable();
				State = 305;
				terminator();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 312;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public MessagetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypenameContext messagetypename() {
		MessagetypenameContext _localctx = new MessagetypenameContext(Context, State);
		EnterRule(_localctx, 50, RULE_messagetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SidlParser.NAME, 0); }
		public NodetypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypenameContext nodetypename() {
		NodetypenameContext _localctx = new NodetypenameContext(Context, State);
		EnterRule(_localctx, 52, RULE_nodetypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagetypelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext[] messagetypename() {
			return GetRuleContexts<MessagetypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename(int i) {
			return GetRuleContext<MessagetypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public MessagetypelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagetypelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagetypelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagetypelistContext messagetypelist() {
		MessagetypelistContext _localctx = new MessagetypelistContext(Context, State);
		EnterRule(_localctx, 54, RULE_messagetypelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			messagetypename();
			State = 319;
			variable();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 320;
				Match(COMMA);
				State = 321;
				messagetypename();
				State = 322;
				variable();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessagedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(SidlParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypenameContext messagetypename() {
			return GetRuleContext<MessagetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOPIC() { return GetTokens(SidlParser.TOPIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC(int i) {
			return GetToken(SidlParser.TOPIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SidlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SidlParser.COMMA, i);
		}
		public MessagedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messagedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessagedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessagedefinitionContext messagedefinition() {
		MessagedefinitionContext _localctx = new MessagedefinitionContext(Context, State);
		EnterRule(_localctx, 56, RULE_messagedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(MESSAGE);
			State = 330;
			messagetypename();
			State = 331;
			Match(OPEN_BRACE);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT) | (1L << TOPIC) | (1L << NAME))) != 0)) {
				{
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOPIC) {
					{
					State = 332;
					Match(TOPIC);
					}
				}

				State = 337;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 335;
					typename();
					}
					break;
				case STRING:
				case INT:
				case FLOAT:
				case BOOL:
				case STRUCT:
					{
					State = 336;
					type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 339;
				variable();
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 340;
					Match(COMMA);
					State = 342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TOPIC) {
						{
						State = 341;
						Match(TOPIC);
						}
					}

					State = 346;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAME:
						{
						State = 344;
						typename();
						}
						break;
					case STRING:
					case INT:
					case FLOAT:
					case BOOL:
					case STRUCT:
						{
						State = 345;
						type();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 348;
					variable();
					}
					}
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 357;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODETYPE() { return GetToken(SidlParser.NODETYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypenameContext nodetypename() {
			return GetRuleContext<NodetypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		public NodetypedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypedefinitionContext nodetypedefinition() {
		NodetypedefinitionContext _localctx = new NodetypedefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_nodetypedefinition);
		int _la;
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				Match(NODETYPE);
				State = 360;
				nodetypename();
				State = 361;
				Match(OPEN_BRACE);
				State = 362;
				nodebody();
				State = 363;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365;
				Match(NODETYPE);
				State = 366;
				nodetypename();
				State = 367;
				nodetypesignature();
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACE) {
					{
					State = 368;
					Match(OPEN_BRACE);
					State = 369;
					nodebody();
					State = 370;
					Match(CLOSE_BRACE);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodetypesignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SidlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SidlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SidlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext[] messagetypelist() {
			return GetRuleContexts<MessagetypelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessagetypelistContext messagetypelist(int i) {
			return GetRuleContext<MessagetypelistContext>(i);
		}
		public NodetypesignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodetypesignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodetypesignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodetypesignatureContext nodetypesignature() {
		NodetypesignatureContext _localctx = new NodetypesignatureContext(Context, State);
		EnterRule(_localctx, 60, RULE_nodetypesignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(OPEN_PAREN);
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 377;
				messagetypelist();
				}
			}

			State = 380;
			Match(ARROW);
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 381;
				messagetypelist();
				}
			}

			State = 384;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(SidlParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodebodyContext nodebody() {
			return GetRuleContext<NodebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NodetypesignatureContext nodetypesignature() {
			return GetRuleContext<NodetypesignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NodedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodedefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodedefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodedefinitionContext nodedefinition() {
		NodedefinitionContext _localctx = new NodedefinitionContext(Context, State);
		EnterRule(_localctx, 62, RULE_nodedefinition);
		int _la;
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				Match(NODE);
				State = 387;
				variable();
				State = 388;
				Match(OPEN_BRACE);
				State = 389;
				nodebody();
				State = 390;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				Match(NODE);
				State = 393;
				variable();
				State = 394;
				nodetypesignature();
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACE) {
					{
					State = 395;
					Match(OPEN_BRACE);
					State = 396;
					nodebody();
					State = 397;
					Match(CLOSE_BRACE);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 401;
				Match(NODE);
				State = 402;
				typename();
				State = 403;
				variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INCLUDE() { return GetTokens(SidlParser.INCLUDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE(int i) {
			return GetToken(SidlParser.INCLUDE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPUT() { return GetTokens(SidlParser.INPUT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT(int i) {
			return GetToken(SidlParser.INPUT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OUTPUT() { return GetTokens(SidlParser.OUTPUT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT(int i) {
			return GetToken(SidlParser.OUTPUT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext[] typedvariablelist() {
			return GetRuleContexts<TypedvariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedvariablelistContext typedvariablelist(int i) {
			return GetRuleContext<TypedvariablelistContext>(i);
		}
		public NodebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodebody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodebody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodebodyContext nodebody() {
		NodebodyContext _localctx = new NodebodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_nodebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INCLUDE) | (1L << PROPERTY) | (1L << INPUT) | (1L << OUTPUT))) != 0)) {
				{
				State = 421;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INPUT:
				case OUTPUT:
					{
					State = 407;
					_la = TokenStream.LA(1);
					if ( !(_la==INPUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 409;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRUCT))) != 0)) {
						{
						State = 408;
						typedvariablelist();
						}
					}

					State = 411;
					terminator();
					}
					break;
				case INCLUDE:
					{
					State = 412;
					Match(INCLUDE);
					State = 413;
					variable();
					State = 414;
					terminator();
					}
					break;
				case PROPERTY:
					{
					State = 416;
					Match(PROPERTY);
					State = 417;
					type();
					State = 418;
					variablelist();
					State = 419;
					terminator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode META() { return GetToken(SidlParser.META, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SidlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SidlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROPERTY() { return GetTokens(SidlParser.PROPERTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY(int i) {
			return GetToken(SidlParser.PROPERTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext[] variablelist() {
			return GetRuleContexts<VariablelistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablelistContext variablelist(int i) {
			return GetRuleContext<VariablelistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext[] terminator() {
			return GetRuleContexts<TerminatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminatorContext terminator(int i) {
			return GetRuleContext<TerminatorContext>(i);
		}
		public MetadefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadefinitionContext metadefinition() {
		MetadefinitionContext _localctx = new MetadefinitionContext(Context, State);
		EnterRule(_localctx, 66, RULE_metadefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(META);
			State = 427;
			variable();
			State = 428;
			Match(OPEN_BRACE);
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROPERTY) {
				{
				{
				State = 429;
				Match(PROPERTY);
				State = 430;
				type();
				State = 431;
				variablelist();
				State = 432;
				terminator();
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 439;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SidlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATINGPOINTNUMBER() { return GetToken(SidlParser.FLOATINGPOINTNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 68, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==FLOATINGPOINTNUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITEARL() { return GetToken(SidlParser.STRINGLITEARL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 70, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(STRINGLITEARL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STMEND() { return GetToken(SidlParser.STMEND, 0); }
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISidlParserVisitor<TResult> typedVisitor = visitor as ISidlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_terminator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(STMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x1C2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', 'Q', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'T', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'n', '\n', '\x4', '\x3', '\x5', '\x5', '\x5', 'q', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x7F', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x8E', '\n', '\f', '\f', '\f', '\xE', '\f', '\x91', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x99', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\x9C', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\xA1', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA4', '\v', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xB0', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xC0', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xCA', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xCF', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xD5', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xDD', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\xE4', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\xE9', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\xF7', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xFA', 
		'\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xFE', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x106', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x10F', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x115', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x11D', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x120', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x126', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x12B', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x136', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x139', '\v', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x147', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x14A', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x150', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x154', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x159', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x15D', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\a', '\x1E', '\x161', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x164', 
		'\v', '\x1E', '\x5', '\x1E', '\x166', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x177', 
		'\n', '\x1F', '\x5', '\x1F', '\x179', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x17D', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x181', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x192', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x198', '\n', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x19C', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', 
		'\"', '\x1A8', '\n', '\"', '\f', '\"', '\xE', '\"', '\x1AB', '\v', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\a', '#', '\x1B5', '\n', '#', '\f', '#', '\xE', 
		'#', '\x1B8', '\v', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x2', '\x2', 
		'\'', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', '\x2', '\x6', '\x3', '\x2', '\x5', '\b', 
		'\x3', '\x2', '\n', '\r', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'\x35', '\x36', '\x2', '\x1E1', '\x2', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'R', '\x3', '\x2', '\x2', '\x2', '\x6', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'p', '\x3', '\x2', '\x2', '\x2', '\n', '~', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x80', '\x3', '\x2', '\x2', '\x2', '\xE', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x86', '\x3', '\x2', '\x2', '\x2', '\x14', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xBF', '\x3', '\x2', '\x2', '\x2', '\"', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xCE', '\x3', '\x2', '\x2', '\x2', '&', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xD6', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', ',', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x123', '\x3', '\x2', '\x2', '\x2', '\x30', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x36', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x140', '\x3', '\x2', '\x2', '\x2', ':', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x178', '\x3', '\x2', '\x2', '\x2', '>', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1BB', '\x3', '\x2', '\x2', '\x2', 'H', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x5', '\x4', '\x3', '\x2', 'M', 'N', '\a', '\x2', '\x2', '\x3', 
		'N', '\x3', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x5', '\x6', '\x4', 
		'\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', '\x5', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'n', '\x5', 'J', '&', '\x2', 'V', 'n', '\x5', '\b', 
		'\x5', '\x2', 'W', 'X', '\x5', '\n', '\x6', '\x2', 'X', 'Y', '\x5', '\x16', 
		'\f', '\x2', 'Y', 'Z', '\x5', 'J', '&', '\x2', 'Z', 'n', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x5', '\x16', '\f', '\x2', '\\', ']', '\a', 
		'$', '\x2', '\x2', ']', '^', '\x5', '\x1A', '\xE', '\x2', '^', '_', '\x5', 
		'J', '&', '\x2', '_', 'n', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x5', 
		'\n', '\x6', '\x2', '\x61', '\x62', '\x5', '\x16', '\f', '\x2', '\x62', 
		'\x63', '\a', '$', '\x2', '\x2', '\x63', '\x64', '\x5', '\x1A', '\xE', 
		'\x2', '\x64', '\x65', '\x5', 'J', '&', '\x2', '\x65', 'n', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'n', '\x5', '\x32', '\x1A', '\x2', 'g', 'n', '\x5', 
		':', '\x1E', '\x2', 'h', 'n', '\x5', '<', '\x1F', '\x2', 'i', 'n', '\x5', 
		'@', '!', '\x2', 'j', 'n', '\x5', '\x44', '#', '\x2', 'k', 'n', '\x5', 
		'&', '\x14', '\x2', 'l', 'n', '\x5', '(', '\x15', '\x2', 'm', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'V', '\x3', '\x2', '\x2', '\x2', 'm', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'm', '[', '\x3', '\x2', '\x2', '\x2', 'm', '`', '\x3', 
		'\x2', '\x2', '\x2', 'm', '\x66', '\x3', '\x2', '\x2', '\x2', 'm', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'h', '\x3', '\x2', '\x2', '\x2', 'm', 
		'i', '\x3', '\x2', '\x2', '\x2', 'm', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', '\a', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x5', '\x12', '\n', 
		'\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '-', '\x2', 
		'\x2', 's', 't', '\x5', '\x4', '\x3', '\x2', 't', 'u', '\a', '.', '\x2', 
		'\x2', 'u', '\t', '\x3', '\x2', '\x2', '\x2', 'v', '\x7F', '\x5', '\f', 
		'\a', '\x2', 'w', '\x7F', '\x5', '\xE', '\b', '\x2', 'x', 'y', '\x5', 
		'\f', '\a', '\x2', 'y', 'z', '\a', '\x4', '\x2', '\x2', 'z', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x5', '\xE', '\b', '\x2', '|', '}', '\a', 
		'\x4', '\x2', '\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', 'v', 
		'\x3', '\x2', '\x2', '\x2', '~', 'w', '\x3', '\x2', '\x2', '\x2', '~', 
		'x', '\x3', '\x2', '\x2', '\x2', '~', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\v', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\t', '\x2', 
		'\x2', '\x2', '\x81', '\r', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\a', '\t', '\x2', '\x2', '\x83', '\xF', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\t', '\x3', '\x2', '\x2', '\x85', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\a', '/', '\x2', '\x2', '\x87', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '/', '\x2', '\x2', '\x89', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8F', '\x5', '\x12', '\n', 
		'\x2', '\x8B', '\x8C', '\a', '!', '\x2', '\x2', '\x8C', '\x8E', '\x5', 
		'\x12', '\n', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\n', '\x6', '\x2', '\x93', '\x9A', '\x5', '\x12', '\n', 
		'\x2', '\x94', '\x95', '\a', '!', '\x2', '\x2', '\x95', '\x96', '\x5', 
		'\n', '\x6', '\x2', '\x96', '\x97', '\x5', '\x12', '\n', '\x2', '\x97', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\xA2', '\x5', '\x1C', '\xF', '\x2', '\x9E', '\x9F', '\a', 
		'!', '\x2', '\x2', '\x9F', '\xA1', '\x5', '\x1C', '\xF', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xB0', '\a', '\x15', '\x2', 
		'\x2', '\xA6', '\xB0', '\a', '\x16', '\x2', '\x2', '\xA7', '\xB0', '\a', 
		'\x17', '\x2', '\x2', '\xA8', '\xB0', '\x5', '\x46', '$', '\x2', '\xA9', 
		'\xB0', '\x5', 'H', '%', '\x2', '\xAA', '\xB0', '\x5', '\x12', '\n', '\x2', 
		'\xAB', '\xB0', '\x5', '\b', '\x5', '\x2', '\xAC', '\xB0', '\x5', '*', 
		'\x16', '\x2', '\xAD', '\xB0', '\x5', '\x30', '\x19', '\x2', '\xAE', '\xB0', 
		'\x5', '&', '\x14', '\x2', '\xAF', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '\n', '\x6', '\x2', '\xB2', '\xB3', '\a', '\x4', 
		'\x2', '\x2', '\xB3', '\xB4', '\x5', '\x12', '\n', '\x2', '\xB4', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x5', '\x12', '\n', '\x2', 
		'\xB6', '\xB7', '\a', '-', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x1C', 
		'\xF', '\x2', '\xB8', '\xB9', '\a', '.', '\x2', '\x2', '\xB9', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', 'H', '%', '\x2', '\xBB', 
		'\xBC', '\a', '-', '\x2', '\x2', '\xBC', '\xBD', '\x5', '\x1C', '\xF', 
		'\x2', '\xBD', '\xBE', '\a', '.', '\x2', '\x2', '\xBE', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xC0', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\x5', '\x12', '\n', '\x2', '\xC2', '\xC3', '\a', 
		'\x1F', '\x2', '\x2', '\xC3', '\xC4', '\x5', '$', '\x13', '\x2', '\xC4', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', ' ', '\x11', 
		'\x2', '\xC6', '\xC7', '\a', '\x1F', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'$', '\x13', '\x2', '\xC8', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '#', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCF', '\x5', 
		'\x12', '\n', '\x2', '\xCC', '\xCF', '\x5', '\"', '\x12', '\x2', '\xCD', 
		'\xCF', '\x5', ' ', '\x11', '\x2', '\xCE', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '%', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\a', '\xF', '\x2', '\x2', '\xD1', '\xD5', '\x5', '\x12', '\n', 
		'\x2', '\xD2', '\xD3', '\a', '\xF', '\x2', '\x2', '\xD3', '\xD5', '\a', 
		'\x31', '\x2', '\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD7', '\a', '\x3', '\x2', '\x2', '\xD7', '\xD8', '\x5', 
		'\x12', '\n', '\x2', '\xD8', '\xD9', '\a', '\"', '\x2', '\x2', '\xD9', 
		'\xDC', '\x5', '\n', '\x6', '\x2', '\xDA', '\xDB', '\a', '!', '\x2', '\x2', 
		'\xDB', '\xDD', '\x5', 'H', '%', '\x2', '\xDC', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\xE', '\x2', '\x2', 
		'\xDF', '\xE0', '\x5', '\x12', '\n', '\x2', '\xE0', '\xE1', '\a', '$', 
		'\x2', '\x2', '\xE1', '\xE3', '\a', ')', '\x2', '\x2', '\xE2', '\xE4', 
		'\x5', '\x18', '\r', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE6', '\a', '*', '\x2', '\x2', '\xE6', '\xE8', 
		'\a', ')', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x18', '\r', '\x2', '\xE8', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		'*', '\x2', '\x2', '\xEB', '\xEC', '\x5', ',', '\x17', '\x2', '\xEC', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xED', '\x11E', '\a', '+', '\x2', '\x2', 
		'\xEE', '\x11D', '\x5', '\x6', '\x4', '\x2', '\xEF', '\xF0', '\a', '\x18', 
		'\x2', '\x2', '\xF0', '\xF1', '\x5', '\x1C', '\xF', '\x2', '\xF1', '\xF8', 
		'\x5', '\b', '\x5', '\x2', '\xF2', '\xF3', '\a', '\x1A', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', '\x1C', '\xF', '\x2', '\xF4', '\xF5', '\x5', '\b', 
		'\x5', '\x2', '\xF5', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xFA', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x19', '\x2', '\x2', 
		'\xFC', '\xFE', '\x5', '\b', '\x5', '\x2', '\xFD', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x1D', '\x2', '\x2', 
		'\x100', '\x101', '\x5', '\x1C', '\xF', '\x2', '\x101', '\x102', '\x5', 
		'\b', '\x5', '\x2', '\x102', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x105', '\a', '\x1B', '\x2', '\x2', '\x104', '\x106', '\x5', '\n', '\x6', 
		'\x2', '\x105', '\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\x5', '\x16', '\f', '\x2', '\x108', '\x109', '\a', 
		'$', '\x2', '\x2', '\x109', '\x10A', '\x5', '\x1A', '\xE', '\x2', '\x10A', 
		'\x10B', '\a', '!', '\x2', '\x2', '\x10B', '\x10E', '\x5', '\x1C', '\xF', 
		'\x2', '\x10C', '\x10D', '\a', '!', '\x2', '\x2', '\x10D', '\x10F', '\x5', 
		'\x1C', '\xF', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x111', '\x5', '\b', '\x5', '\x2', '\x111', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x114', '\a', '\x1B', '\x2', '\x2', 
		'\x113', '\x115', '\x5', '\n', '\x6', '\x2', '\x114', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x5', '\x12', 
		'\n', '\x2', '\x117', '\x118', '\a', '\x1C', '\x2', '\x2', '\x118', '\x119', 
		'\x5', '\x12', '\n', '\x2', '\x119', '\x11A', '\x5', '\b', '\x5', '\x2', 
		'\x11A', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', '\x5', 
		'.', '\x18', '\x2', '\x11C', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x103', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x122', '\a', ',', '\x2', '\x2', '\x122', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x125', '\a', '\x1E', '\x2', '\x2', '\x124', 
		'\x126', '\x5', '\x16', '\f', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\x5', '\x12', '\n', '\x2', '\x128', 
		'\x12A', '\a', ')', '\x2', '\x2', '\x129', '\x12B', '\x5', '\x16', '\f', 
		'\x2', '\x12A', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\a', '*', '\x2', '\x2', '\x12D', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x12E', '\x12F', '\a', '\t', '\x2', '\x2', '\x12F', '\x130', 
		'\x5', '\x12', '\n', '\x2', '\x130', '\x137', '\a', '+', '\x2', '\x2', 
		'\x131', '\x132', '\x5', '\n', '\x6', '\x2', '\x132', '\x133', '\x5', 
		'\x12', '\n', '\x2', '\x133', '\x134', '\x5', 'J', '&', '\x2', '\x134', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x135', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', ',', '\x2', '\x2', '\x13B', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '/', '\x2', 
		'\x2', '\x13D', '\x35', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', 
		'\a', '/', '\x2', '\x2', '\x13F', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x141', '\x5', '\x34', '\x1B', '\x2', '\x141', '\x148', '\x5', 
		'\x12', '\n', '\x2', '\x142', '\x143', '\a', '!', '\x2', '\x2', '\x143', 
		'\x144', '\x5', '\x34', '\x1B', '\x2', '\x144', '\x145', '\x5', '\x12', 
		'\n', '\x2', '\x145', '\x147', '\x3', '\x2', '\x2', '\x2', '\x146', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x39', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', '\n', '\x2', 
		'\x2', '\x14C', '\x14D', '\x5', '\x34', '\x1B', '\x2', '\x14D', '\x165', 
		'\a', '+', '\x2', '\x2', '\x14E', '\x150', '\a', '\x12', '\x2', '\x2', 
		'\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x153', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x154', '\x5', '\x14', '\v', '\x2', '\x152', '\x154', '\x5', '\n', '\x6', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x162', '\x5', '\x12', '\n', '\x2', '\x156', '\x158', '\a', 
		'!', '\x2', '\x2', '\x157', '\x159', '\a', '\x12', '\x2', '\x2', '\x158', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', 
		'\x5', '\x14', '\v', '\x2', '\x15B', '\x15D', '\x5', '\n', '\x6', '\x2', 
		'\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x15F', '\x5', '\x12', '\n', '\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x156', '\x3', '\x2', '\x2', '\x2', '\x161', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\a', ',', '\x2', '\x2', '\x168', ';', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\a', '\v', '\x2', '\x2', '\x16A', '\x16B', '\x5', '\x36', '\x1C', 
		'\x2', '\x16B', '\x16C', '\a', '+', '\x2', '\x2', '\x16C', '\x16D', '\x5', 
		'\x42', '\"', '\x2', '\x16D', '\x16E', '\a', ',', '\x2', '\x2', '\x16E', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\a', '\v', '\x2', 
		'\x2', '\x170', '\x171', '\x5', '\x36', '\x1C', '\x2', '\x171', '\x176', 
		'\x5', '>', ' ', '\x2', '\x172', '\x173', '\a', '+', '\x2', '\x2', '\x173', 
		'\x174', '\x5', '\x42', '\"', '\x2', '\x174', '\x175', '\a', ',', '\x2', 
		'\x2', '\x175', '\x177', '\x3', '\x2', '\x2', '\x2', '\x176', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x179', '\x3', '\x2', '\x2', '\x2', '\x178', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17C', '\a', ')', '\x2', '\x2', 
		'\x17B', '\x17D', '\x5', '\x38', '\x1D', '\x2', '\x17C', '\x17B', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\a', '(', '\x2', 
		'\x2', '\x17F', '\x181', '\x5', '\x38', '\x1D', '\x2', '\x180', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\a', 
		'*', '\x2', '\x2', '\x183', '?', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\a', '\f', '\x2', '\x2', '\x185', '\x186', '\x5', '\x12', '\n', 
		'\x2', '\x186', '\x187', '\a', '+', '\x2', '\x2', '\x187', '\x188', '\x5', 
		'\x42', '\"', '\x2', '\x188', '\x189', '\a', ',', '\x2', '\x2', '\x189', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\a', '\f', '\x2', 
		'\x2', '\x18B', '\x18C', '\x5', '\x12', '\n', '\x2', '\x18C', '\x191', 
		'\x5', '>', ' ', '\x2', '\x18D', '\x18E', '\a', '+', '\x2', '\x2', '\x18E', 
		'\x18F', '\x5', '\x42', '\"', '\x2', '\x18F', '\x190', '\a', ',', '\x2', 
		'\x2', '\x190', '\x192', '\x3', '\x2', '\x2', '\x2', '\x191', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x198', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\a', 
		'\f', '\x2', '\x2', '\x194', '\x195', '\x5', '\x14', '\v', '\x2', '\x195', 
		'\x196', '\x5', '\x12', '\n', '\x2', '\x196', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x184', '\x3', '\x2', '\x2', '\x2', '\x197', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x41', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19B', '\t', '\x4', 
		'\x2', '\x2', '\x19A', '\x19C', '\x5', '\x18', '\r', '\x2', '\x19B', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A8', '\x5', 
		'J', '&', '\x2', '\x19E', '\x19F', '\a', '\x10', '\x2', '\x2', '\x19F', 
		'\x1A0', '\x5', '\x12', '\n', '\x2', '\x1A0', '\x1A1', '\x5', 'J', '&', 
		'\x2', '\x1A1', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\a', '\x11', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '\n', '\x6', '\x2', 
		'\x1A4', '\x1A5', '\x5', '\x16', '\f', '\x2', '\x1A5', '\x1A6', '\x5', 
		'J', '&', '\x2', '\x1A6', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x19E', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', '\r', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', '\x12', '\n', 
		'\x2', '\x1AE', '\x1B6', '\a', '+', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 
		'\x11', '\x2', '\x2', '\x1B0', '\x1B1', '\x5', '\n', '\x6', '\x2', '\x1B1', 
		'\x1B2', '\x5', '\x16', '\f', '\x2', '\x1B2', '\x1B3', '\x5', 'J', '&', 
		'\x2', '\x1B3', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\a', ',', '\x2', 
		'\x2', '\x1BA', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\t', '\x5', '\x2', '\x2', '\x1BC', 'G', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\a', '\x31', '\x2', '\x2', '\x1BE', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\a', '\x38', '\x2', '\x2', '\x1C0', 'K', '\x3', 
		'\x2', '\x2', '\x2', ',', 'R', 'm', 'p', '~', '\x8F', '\x9A', '\xA2', 
		'\xAF', '\xBF', '\xC9', '\xCE', '\xD4', '\xDC', '\xE3', '\xE8', '\xF8', 
		'\xFD', '\x105', '\x10E', '\x114', '\x11C', '\x11E', '\x125', '\x12A', 
		'\x137', '\x148', '\x14F', '\x153', '\x158', '\x15C', '\x162', '\x165', 
		'\x176', '\x178', '\x17C', '\x180', '\x191', '\x197', '\x19B', '\x1A7', 
		'\x1A9', '\x1B6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Sidl.Processor
